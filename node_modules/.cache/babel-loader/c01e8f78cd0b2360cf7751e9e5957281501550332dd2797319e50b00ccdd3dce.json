{"ast":null,"code":"import { _ as __assign, a as __rest, b as __awaiter, c as __generator, d as createNanoEvents, e as __spreadArray } from './common-ba25e019.js';\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\nfunction commonjsRequire(path) {\n  throw new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\nvar proto = {\n  exports: {}\n};\nvar indexMinimal = {};\nvar minimal$1 = {};\nvar aspromise;\nvar hasRequiredAspromise;\nfunction requireAspromise() {\n  if (hasRequiredAspromise) return aspromise;\n  hasRequiredAspromise = 1;\n  aspromise = asPromise;\n\n  /**\r\n   * Callback as used by {@link util.asPromise}.\r\n   * @typedef asPromiseCallback\r\n   * @type {function}\r\n   * @param {Error|null} error Error, if any\r\n   * @param {...*} params Additional arguments\r\n   * @returns {undefined}\r\n   */\n\n  /**\r\n   * Returns a promise from a node-style callback function.\r\n   * @memberof util\r\n   * @param {asPromiseCallback} fn Function to call\r\n   * @param {*} ctx Function context\r\n   * @param {...*} params Function arguments\r\n   * @returns {Promise<*>} Promisified function\r\n   */\n  function asPromise(fn, ctx /*, varargs */) {\n    var params = new Array(arguments.length - 1),\n      offset = 0,\n      index = 2,\n      pending = true;\n    while (index < arguments.length) params[offset++] = arguments[index++];\n    return new Promise(function executor(resolve, reject) {\n      params[offset] = function callback(err /*, varargs */) {\n        if (pending) {\n          pending = false;\n          if (err) reject(err);else {\n            var params = new Array(arguments.length - 1),\n              offset = 0;\n            while (offset < params.length) params[offset++] = arguments[offset];\n            resolve.apply(null, params);\n          }\n        }\n      };\n      try {\n        fn.apply(ctx || null, params);\n      } catch (err) {\n        if (pending) {\n          pending = false;\n          reject(err);\n        }\n      }\n    });\n  }\n  return aspromise;\n}\nvar base64 = {};\nvar hasRequiredBase64;\nfunction requireBase64() {\n  if (hasRequiredBase64) return base64;\n  hasRequiredBase64 = 1;\n  (function (exports) {\n    /**\r\n     * A minimal base64 implementation for number arrays.\r\n     * @memberof util\r\n     * @namespace\r\n     */\n    var base64 = exports;\n\n    /**\r\n     * Calculates the byte length of a base64 encoded string.\r\n     * @param {string} string Base64 encoded string\r\n     * @returns {number} Byte length\r\n     */\n    base64.length = function length(string) {\n      var p = string.length;\n      if (!p) return 0;\n      var n = 0;\n      while (--p % 4 > 1 && string.charAt(p) === \"=\") ++n;\n      return Math.ceil(string.length * 3) / 4 - n;\n    };\n\n    // Base64 encoding table\n    var b64 = new Array(64);\n\n    // Base64 decoding table\n    var s64 = new Array(123);\n\n    // 65..90, 97..122, 48..57, 43, 47\n    for (var i = 0; i < 64;) s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\n\n    /**\r\n     * Encodes a buffer to a base64 encoded string.\r\n     * @param {Uint8Array} buffer Source buffer\r\n     * @param {number} start Source start\r\n     * @param {number} end Source end\r\n     * @returns {string} Base64 encoded string\r\n     */\n    base64.encode = function encode(buffer, start, end) {\n      var parts = null,\n        chunk = [];\n      var i = 0,\n        // output index\n        j = 0,\n        // goto index\n        t; // temporary\n      while (start < end) {\n        var b = buffer[start++];\n        switch (j) {\n          case 0:\n            chunk[i++] = b64[b >> 2];\n            t = (b & 3) << 4;\n            j = 1;\n            break;\n          case 1:\n            chunk[i++] = b64[t | b >> 4];\n            t = (b & 15) << 2;\n            j = 2;\n            break;\n          case 2:\n            chunk[i++] = b64[t | b >> 6];\n            chunk[i++] = b64[b & 63];\n            j = 0;\n            break;\n        }\n        if (i > 8191) {\n          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n          i = 0;\n        }\n      }\n      if (j) {\n        chunk[i++] = b64[t];\n        chunk[i++] = 61;\n        if (j === 1) chunk[i++] = 61;\n      }\n      if (parts) {\n        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n        return parts.join(\"\");\n      }\n      return String.fromCharCode.apply(String, chunk.slice(0, i));\n    };\n    var invalidEncoding = \"invalid encoding\";\n\n    /**\r\n     * Decodes a base64 encoded string to a buffer.\r\n     * @param {string} string Source string\r\n     * @param {Uint8Array} buffer Destination buffer\r\n     * @param {number} offset Destination offset\r\n     * @returns {number} Number of bytes written\r\n     * @throws {Error} If encoding is invalid\r\n     */\n    base64.decode = function decode(string, buffer, offset) {\n      var start = offset;\n      var j = 0,\n        // goto index\n        t; // temporary\n      for (var i = 0; i < string.length;) {\n        var c = string.charCodeAt(i++);\n        if (c === 61 && j > 1) break;\n        if ((c = s64[c]) === undefined) throw Error(invalidEncoding);\n        switch (j) {\n          case 0:\n            t = c;\n            j = 1;\n            break;\n          case 1:\n            buffer[offset++] = t << 2 | (c & 48) >> 4;\n            t = c;\n            j = 2;\n            break;\n          case 2:\n            buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\n            t = c;\n            j = 3;\n            break;\n          case 3:\n            buffer[offset++] = (t & 3) << 6 | c;\n            j = 0;\n            break;\n        }\n      }\n      if (j === 1) throw Error(invalidEncoding);\n      return offset - start;\n    };\n\n    /**\r\n     * Tests if the specified string appears to be base64 encoded.\r\n     * @param {string} string String to test\r\n     * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n     */\n    base64.test = function test(string) {\n      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\n    };\n  })(base64);\n  return base64;\n}\nvar eventemitter;\nvar hasRequiredEventemitter;\nfunction requireEventemitter() {\n  if (hasRequiredEventemitter) return eventemitter;\n  hasRequiredEventemitter = 1;\n  eventemitter = EventEmitter;\n\n  /**\r\n   * Constructs a new event emitter instance.\r\n   * @classdesc A minimal event emitter.\r\n   * @memberof util\r\n   * @constructor\r\n   */\n  function EventEmitter() {\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\n    this._listeners = {};\n  }\n\n  /**\r\n   * Registers an event listener.\r\n   * @param {string} evt Event name\r\n   * @param {function} fn Listener\r\n   * @param {*} [ctx] Listener context\r\n   * @returns {util.EventEmitter} `this`\r\n   */\n  EventEmitter.prototype.on = function on(evt, fn, ctx) {\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\n      fn: fn,\n      ctx: ctx || this\n    });\n    return this;\n  };\n\n  /**\r\n   * Removes an event listener or any matching listeners if arguments are omitted.\r\n   * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n   * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n   * @returns {util.EventEmitter} `this`\r\n   */\n  EventEmitter.prototype.off = function off(evt, fn) {\n    if (evt === undefined) this._listeners = {};else {\n      if (fn === undefined) this._listeners[evt] = [];else {\n        var listeners = this._listeners[evt];\n        for (var i = 0; i < listeners.length;) if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;\n      }\n    }\n    return this;\n  };\n\n  /**\r\n   * Emits an event by calling its listeners with the specified arguments.\r\n   * @param {string} evt Event name\r\n   * @param {...*} args Arguments\r\n   * @returns {util.EventEmitter} `this`\r\n   */\n  EventEmitter.prototype.emit = function emit(evt) {\n    var listeners = this._listeners[evt];\n    if (listeners) {\n      var args = [],\n        i = 1;\n      for (; i < arguments.length;) args.push(arguments[i++]);\n      for (i = 0; i < listeners.length;) listeners[i].fn.apply(listeners[i++].ctx, args);\n    }\n    return this;\n  };\n  return eventemitter;\n}\nvar float;\nvar hasRequiredFloat;\nfunction requireFloat() {\n  if (hasRequiredFloat) return float;\n  hasRequiredFloat = 1;\n  float = factory(factory);\n\n  /**\r\n   * Reads / writes floats / doubles from / to buffers.\r\n   * @name util.float\r\n   * @namespace\r\n   */\n\n  /**\r\n   * Writes a 32 bit float to a buffer using little endian byte order.\r\n   * @name util.float.writeFloatLE\r\n   * @function\r\n   * @param {number} val Value to write\r\n   * @param {Uint8Array} buf Target buffer\r\n   * @param {number} pos Target buffer offset\r\n   * @returns {undefined}\r\n   */\n\n  /**\r\n   * Writes a 32 bit float to a buffer using big endian byte order.\r\n   * @name util.float.writeFloatBE\r\n   * @function\r\n   * @param {number} val Value to write\r\n   * @param {Uint8Array} buf Target buffer\r\n   * @param {number} pos Target buffer offset\r\n   * @returns {undefined}\r\n   */\n\n  /**\r\n   * Reads a 32 bit float from a buffer using little endian byte order.\r\n   * @name util.float.readFloatLE\r\n   * @function\r\n   * @param {Uint8Array} buf Source buffer\r\n   * @param {number} pos Source buffer offset\r\n   * @returns {number} Value read\r\n   */\n\n  /**\r\n   * Reads a 32 bit float from a buffer using big endian byte order.\r\n   * @name util.float.readFloatBE\r\n   * @function\r\n   * @param {Uint8Array} buf Source buffer\r\n   * @param {number} pos Source buffer offset\r\n   * @returns {number} Value read\r\n   */\n\n  /**\r\n   * Writes a 64 bit double to a buffer using little endian byte order.\r\n   * @name util.float.writeDoubleLE\r\n   * @function\r\n   * @param {number} val Value to write\r\n   * @param {Uint8Array} buf Target buffer\r\n   * @param {number} pos Target buffer offset\r\n   * @returns {undefined}\r\n   */\n\n  /**\r\n   * Writes a 64 bit double to a buffer using big endian byte order.\r\n   * @name util.float.writeDoubleBE\r\n   * @function\r\n   * @param {number} val Value to write\r\n   * @param {Uint8Array} buf Target buffer\r\n   * @param {number} pos Target buffer offset\r\n   * @returns {undefined}\r\n   */\n\n  /**\r\n   * Reads a 64 bit double from a buffer using little endian byte order.\r\n   * @name util.float.readDoubleLE\r\n   * @function\r\n   * @param {Uint8Array} buf Source buffer\r\n   * @param {number} pos Source buffer offset\r\n   * @returns {number} Value read\r\n   */\n\n  /**\r\n   * Reads a 64 bit double from a buffer using big endian byte order.\r\n   * @name util.float.readDoubleBE\r\n   * @function\r\n   * @param {Uint8Array} buf Source buffer\r\n   * @param {number} pos Source buffer offset\r\n   * @returns {number} Value read\r\n   */\n\n  // Factory function for the purpose of node-based testing in modified global environments\n  function factory(exports) {\n    // float: typed array\n    if (typeof Float32Array !== \"undefined\") (function () {\n      var f32 = new Float32Array([-0]),\n        f8b = new Uint8Array(f32.buffer),\n        le = f8b[3] === 128;\n      function writeFloat_f32_cpy(val, buf, pos) {\n        f32[0] = val;\n        buf[pos] = f8b[0];\n        buf[pos + 1] = f8b[1];\n        buf[pos + 2] = f8b[2];\n        buf[pos + 3] = f8b[3];\n      }\n      function writeFloat_f32_rev(val, buf, pos) {\n        f32[0] = val;\n        buf[pos] = f8b[3];\n        buf[pos + 1] = f8b[2];\n        buf[pos + 2] = f8b[1];\n        buf[pos + 3] = f8b[0];\n      }\n\n      /* istanbul ignore next */\n      exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\n      /* istanbul ignore next */\n      exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\n      function readFloat_f32_cpy(buf, pos) {\n        f8b[0] = buf[pos];\n        f8b[1] = buf[pos + 1];\n        f8b[2] = buf[pos + 2];\n        f8b[3] = buf[pos + 3];\n        return f32[0];\n      }\n      function readFloat_f32_rev(buf, pos) {\n        f8b[3] = buf[pos];\n        f8b[2] = buf[pos + 1];\n        f8b[1] = buf[pos + 2];\n        f8b[0] = buf[pos + 3];\n        return f32[0];\n      }\n\n      /* istanbul ignore next */\n      exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\n      /* istanbul ignore next */\n      exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\n\n      // float: ieee754\n    })();else (function () {\n      function writeFloat_ieee754(writeUint, val, buf, pos) {\n        var sign = val < 0 ? 1 : 0;\n        if (sign) val = -val;\n        if (val === 0) writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38)\n          // +-Infinity\n          writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38)\n          // denormal\n          writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {\n          var exponent = Math.floor(Math.log(val) / Math.LN2),\n            mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\n          writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\n        }\n      }\n      exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\n      exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\n      function readFloat_ieee754(readUint, buf, pos) {\n        var uint = readUint(buf, pos),\n          sign = (uint >> 31) * 2 + 1,\n          exponent = uint >>> 23 & 255,\n          mantissa = uint & 8388607;\n        return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n        ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\n      }\n      exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\n      exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\n    })();\n\n    // double: typed array\n    if (typeof Float64Array !== \"undefined\") (function () {\n      var f64 = new Float64Array([-0]),\n        f8b = new Uint8Array(f64.buffer),\n        le = f8b[7] === 128;\n      function writeDouble_f64_cpy(val, buf, pos) {\n        f64[0] = val;\n        buf[pos] = f8b[0];\n        buf[pos + 1] = f8b[1];\n        buf[pos + 2] = f8b[2];\n        buf[pos + 3] = f8b[3];\n        buf[pos + 4] = f8b[4];\n        buf[pos + 5] = f8b[5];\n        buf[pos + 6] = f8b[6];\n        buf[pos + 7] = f8b[7];\n      }\n      function writeDouble_f64_rev(val, buf, pos) {\n        f64[0] = val;\n        buf[pos] = f8b[7];\n        buf[pos + 1] = f8b[6];\n        buf[pos + 2] = f8b[5];\n        buf[pos + 3] = f8b[4];\n        buf[pos + 4] = f8b[3];\n        buf[pos + 5] = f8b[2];\n        buf[pos + 6] = f8b[1];\n        buf[pos + 7] = f8b[0];\n      }\n\n      /* istanbul ignore next */\n      exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\n      /* istanbul ignore next */\n      exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\n      function readDouble_f64_cpy(buf, pos) {\n        f8b[0] = buf[pos];\n        f8b[1] = buf[pos + 1];\n        f8b[2] = buf[pos + 2];\n        f8b[3] = buf[pos + 3];\n        f8b[4] = buf[pos + 4];\n        f8b[5] = buf[pos + 5];\n        f8b[6] = buf[pos + 6];\n        f8b[7] = buf[pos + 7];\n        return f64[0];\n      }\n      function readDouble_f64_rev(buf, pos) {\n        f8b[7] = buf[pos];\n        f8b[6] = buf[pos + 1];\n        f8b[5] = buf[pos + 2];\n        f8b[4] = buf[pos + 3];\n        f8b[3] = buf[pos + 4];\n        f8b[2] = buf[pos + 5];\n        f8b[1] = buf[pos + 6];\n        f8b[0] = buf[pos + 7];\n        return f64[0];\n      }\n\n      /* istanbul ignore next */\n      exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\n      /* istanbul ignore next */\n      exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\n\n      // double: ieee754\n    })();else (function () {\n      function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\n        var sign = val < 0 ? 1 : 0;\n        if (sign) val = -val;\n        if (val === 0) {\n          writeUint(0, buf, pos + off0);\n          writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos + off1);\n        } else if (isNaN(val)) {\n          writeUint(0, buf, pos + off0);\n          writeUint(2146959360, buf, pos + off1);\n        } else if (val > 1.7976931348623157e+308) {\n          // +-Infinity\n          writeUint(0, buf, pos + off0);\n          writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\n        } else {\n          var mantissa;\n          if (val < 2.2250738585072014e-308) {\n            // denormal\n            mantissa = val / 5e-324;\n            writeUint(mantissa >>> 0, buf, pos + off0);\n            writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\n          } else {\n            var exponent = Math.floor(Math.log(val) / Math.LN2);\n            if (exponent === 1024) exponent = 1023;\n            mantissa = val * Math.pow(2, -exponent);\n            writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\n            writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\n          }\n        }\n      }\n      exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\n      exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\n      function readDouble_ieee754(readUint, off0, off1, buf, pos) {\n        var lo = readUint(buf, pos + off0),\n          hi = readUint(buf, pos + off1);\n        var sign = (hi >> 31) * 2 + 1,\n          exponent = hi >>> 20 & 2047,\n          mantissa = 4294967296 * (hi & 1048575) + lo;\n        return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n        ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\n      }\n      exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\n      exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\n    })();\n    return exports;\n  }\n\n  // uint helpers\n\n  function writeUintLE(val, buf, pos) {\n    buf[pos] = val & 255;\n    buf[pos + 1] = val >>> 8 & 255;\n    buf[pos + 2] = val >>> 16 & 255;\n    buf[pos + 3] = val >>> 24;\n  }\n  function writeUintBE(val, buf, pos) {\n    buf[pos] = val >>> 24;\n    buf[pos + 1] = val >>> 16 & 255;\n    buf[pos + 2] = val >>> 8 & 255;\n    buf[pos + 3] = val & 255;\n  }\n  function readUintLE(buf, pos) {\n    return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;\n  }\n  function readUintBE(buf, pos) {\n    return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;\n  }\n  return float;\n}\nvar inquire_1;\nvar hasRequiredInquire;\nfunction requireInquire() {\n  if (hasRequiredInquire) return inquire_1;\n  hasRequiredInquire = 1;\n  inquire_1 = inquire;\n\n  /**\r\n   * Requires a module only if available.\r\n   * @memberof util\r\n   * @param {string} moduleName Module to require\r\n   * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n   */\n  function inquire(moduleName) {\n    try {\n      var mod = eval(\"quire\".replace(/^/, \"re\"))(moduleName); // eslint-disable-line no-eval\n      if (mod && (mod.length || Object.keys(mod).length)) return mod;\n    } catch (e) {} // eslint-disable-line no-empty\n    return null;\n  }\n  return inquire_1;\n}\nvar utf8 = {};\nvar hasRequiredUtf8;\nfunction requireUtf8() {\n  if (hasRequiredUtf8) return utf8;\n  hasRequiredUtf8 = 1;\n  (function (exports) {\n    /**\r\n     * A minimal UTF8 implementation for number arrays.\r\n     * @memberof util\r\n     * @namespace\r\n     */\n    var utf8 = exports;\n\n    /**\r\n     * Calculates the UTF8 byte length of a string.\r\n     * @param {string} string String\r\n     * @returns {number} Byte length\r\n     */\n    utf8.length = function utf8_length(string) {\n      var len = 0,\n        c = 0;\n      for (var i = 0; i < string.length; ++i) {\n        c = string.charCodeAt(i);\n        if (c < 128) len += 1;else if (c < 2048) len += 2;else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n          ++i;\n          len += 4;\n        } else len += 3;\n      }\n      return len;\n    };\n\n    /**\r\n     * Reads UTF8 bytes as a string.\r\n     * @param {Uint8Array} buffer Source buffer\r\n     * @param {number} start Source start\r\n     * @param {number} end Source end\r\n     * @returns {string} String read\r\n     */\n    utf8.read = function utf8_read(buffer, start, end) {\n      var len = end - start;\n      if (len < 1) return \"\";\n      var parts = null,\n        chunk = [],\n        i = 0,\n        // char offset\n        t; // temporary\n      while (start < end) {\n        t = buffer[start++];\n        if (t < 128) chunk[i++] = t;else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;else if (t > 239 && t < 365) {\n          t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\n          chunk[i++] = 0xD800 + (t >> 10);\n          chunk[i++] = 0xDC00 + (t & 1023);\n        } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\n        if (i > 8191) {\n          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n          i = 0;\n        }\n      }\n      if (parts) {\n        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n        return parts.join(\"\");\n      }\n      return String.fromCharCode.apply(String, chunk.slice(0, i));\n    };\n\n    /**\r\n     * Writes a string as UTF8 bytes.\r\n     * @param {string} string Source string\r\n     * @param {Uint8Array} buffer Destination buffer\r\n     * @param {number} offset Destination offset\r\n     * @returns {number} Bytes written\r\n     */\n    utf8.write = function utf8_write(string, buffer, offset) {\n      var start = offset,\n        c1,\n        // character 1\n        c2; // character 2\n      for (var i = 0; i < string.length; ++i) {\n        c1 = string.charCodeAt(i);\n        if (c1 < 128) {\n          buffer[offset++] = c1;\n        } else if (c1 < 2048) {\n          buffer[offset++] = c1 >> 6 | 192;\n          buffer[offset++] = c1 & 63 | 128;\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n          c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n          ++i;\n          buffer[offset++] = c1 >> 18 | 240;\n          buffer[offset++] = c1 >> 12 & 63 | 128;\n          buffer[offset++] = c1 >> 6 & 63 | 128;\n          buffer[offset++] = c1 & 63 | 128;\n        } else {\n          buffer[offset++] = c1 >> 12 | 224;\n          buffer[offset++] = c1 >> 6 & 63 | 128;\n          buffer[offset++] = c1 & 63 | 128;\n        }\n      }\n      return offset - start;\n    };\n  })(utf8);\n  return utf8;\n}\nvar pool_1;\nvar hasRequiredPool;\nfunction requirePool() {\n  if (hasRequiredPool) return pool_1;\n  hasRequiredPool = 1;\n  pool_1 = pool;\n\n  /**\r\n   * An allocator as used by {@link util.pool}.\r\n   * @typedef PoolAllocator\r\n   * @type {function}\r\n   * @param {number} size Buffer size\r\n   * @returns {Uint8Array} Buffer\r\n   */\n\n  /**\r\n   * A slicer as used by {@link util.pool}.\r\n   * @typedef PoolSlicer\r\n   * @type {function}\r\n   * @param {number} start Start offset\r\n   * @param {number} end End offset\r\n   * @returns {Uint8Array} Buffer slice\r\n   * @this {Uint8Array}\r\n   */\n\n  /**\r\n   * A general purpose buffer pool.\r\n   * @memberof util\r\n   * @function\r\n   * @param {PoolAllocator} alloc Allocator\r\n   * @param {PoolSlicer} slice Slicer\r\n   * @param {number} [size=8192] Slab size\r\n   * @returns {PoolAllocator} Pooled allocator\r\n   */\n  function pool(alloc, slice, size) {\n    var SIZE = size || 8192;\n    var MAX = SIZE >>> 1;\n    var slab = null;\n    var offset = SIZE;\n    return function pool_alloc(size) {\n      if (size < 1 || size > MAX) return alloc(size);\n      if (offset + size > SIZE) {\n        slab = alloc(SIZE);\n        offset = 0;\n      }\n      var buf = slice.call(slab, offset, offset += size);\n      if (offset & 7)\n        // align to 32 bit\n        offset = (offset | 7) + 1;\n      return buf;\n    };\n  }\n  return pool_1;\n}\nvar longbits;\nvar hasRequiredLongbits;\nfunction requireLongbits() {\n  if (hasRequiredLongbits) return longbits;\n  hasRequiredLongbits = 1;\n  longbits = LongBits;\n  var util = requireMinimal$1();\n\n  /**\n   * Constructs new long bits.\n   * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n   * @memberof util\n   * @constructor\n   * @param {number} lo Low 32 bits, unsigned\n   * @param {number} hi High 32 bits, unsigned\n   */\n  function LongBits(lo, hi) {\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n  }\n\n  /**\n   * Zero bits.\n   * @memberof util.LongBits\n   * @type {util.LongBits}\n   */\n  var zero = LongBits.zero = new LongBits(0, 0);\n  zero.toNumber = function () {\n    return 0;\n  };\n  zero.zzEncode = zero.zzDecode = function () {\n    return this;\n  };\n  zero.length = function () {\n    return 1;\n  };\n\n  /**\n   * Zero hash.\n   * @memberof util.LongBits\n   * @type {string}\n   */\n  var zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n  /**\n   * Constructs new long bits from the specified number.\n   * @param {number} value Value\n   * @returns {util.LongBits} Instance\n   */\n  LongBits.fromNumber = function fromNumber(value) {\n    if (value === 0) return zero;\n    var sign = value < 0;\n    if (sign) value = -value;\n    var lo = value >>> 0,\n      hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n      hi = ~hi >>> 0;\n      lo = ~lo >>> 0;\n      if (++lo > 4294967295) {\n        lo = 0;\n        if (++hi > 4294967295) hi = 0;\n      }\n    }\n    return new LongBits(lo, hi);\n  };\n\n  /**\n   * Constructs new long bits from a number, long or string.\n   * @param {Long|number|string} value Value\n   * @returns {util.LongBits} Instance\n   */\n  LongBits.from = function from(value) {\n    if (typeof value === \"number\") return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n      /* istanbul ignore else */\n      if (util.Long) value = util.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n  };\n\n  /**\n   * Converts this long bits to a possibly unsafe JavaScript number.\n   * @param {boolean} [unsigned=false] Whether unsigned or not\n   * @returns {number} Possibly unsafe number\n   */\n  LongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n      var lo = ~this.lo + 1 >>> 0,\n        hi = ~this.hi >>> 0;\n      if (!lo) hi = hi + 1 >>> 0;\n      return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n  };\n\n  /**\n   * Converts this long bits to a long.\n   * @param {boolean} [unsigned=false] Whether unsigned or not\n   * @returns {Long} Long\n   */\n  LongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n    /* istanbul ignore next */ : {\n      low: this.lo | 0,\n      high: this.hi | 0,\n      unsigned: Boolean(unsigned)\n    };\n  };\n  var charCodeAt = String.prototype.charCodeAt;\n\n  /**\n   * Constructs new long bits from the specified 8 characters long hash.\n   * @param {string} hash Hash\n   * @returns {util.LongBits} Bits\n   */\n  LongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash) return zero;\n    return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);\n  };\n\n  /**\n   * Converts this long bits to a 8 characters long hash.\n   * @returns {string} Hash\n   */\n  LongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);\n  };\n\n  /**\n   * Zig-zag encodes this long bits.\n   * @returns {util.LongBits} `this`\n   */\n  LongBits.prototype.zzEncode = function zzEncode() {\n    var mask = this.hi >> 31;\n    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo = (this.lo << 1 ^ mask) >>> 0;\n    return this;\n  };\n\n  /**\n   * Zig-zag decodes this long bits.\n   * @returns {util.LongBits} `this`\n   */\n  LongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi = (this.hi >>> 1 ^ mask) >>> 0;\n    return this;\n  };\n\n  /**\n   * Calculates the length of this longbits when encoded as a varint.\n   * @returns {number} Length\n   */\n  LongBits.prototype.length = function length() {\n    var part0 = this.lo,\n      part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n      part2 = this.hi >>> 24;\n    return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n  };\n  return longbits;\n}\nvar hasRequiredMinimal$1;\nfunction requireMinimal$1() {\n  if (hasRequiredMinimal$1) return minimal$1;\n  hasRequiredMinimal$1 = 1;\n  (function (exports) {\n    var util = exports;\n\n    // used to return a Promise where callback is omitted\n    util.asPromise = requireAspromise();\n\n    // converts to / from base64 encoded strings\n    util.base64 = requireBase64();\n\n    // base class of rpc.Service\n    util.EventEmitter = requireEventemitter();\n\n    // float handling accross browsers\n    util.float = requireFloat();\n\n    // requires modules optionally and hides the call from bundlers\n    util.inquire = requireInquire();\n\n    // converts to / from utf8 encoded strings\n    util.utf8 = requireUtf8();\n\n    // provides a node-like buffer pool in the browser\n    util.pool = requirePool();\n\n    // utility to work with the low and high bits of a 64 bit value\n    util.LongBits = requireLongbits();\n\n    /**\n     * Whether running within node or not.\n     * @memberof util\n     * @type {boolean}\n     */\n    util.isNode = Boolean(typeof commonjsGlobal !== \"undefined\" && commonjsGlobal && commonjsGlobal.process && commonjsGlobal.process.versions && commonjsGlobal.process.versions.node);\n\n    /**\n     * Global object reference.\n     * @memberof util\n     * @type {Object}\n     */\n    util.global = util.isNode && commonjsGlobal || typeof window !== \"undefined\" && window || typeof self !== \"undefined\" && self || commonjsGlobal; // eslint-disable-line no-invalid-this\n\n    /**\n     * An immuable empty array.\n     * @memberof util\n     * @type {Array.<*>}\n     * @const\n     */\n    util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */[]; // used on prototypes\n\n    /**\n     * An immutable empty object.\n     * @type {Object}\n     * @const\n     */\n    util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */{}; // used on prototypes\n\n    /**\n     * Tests if the specified value is an integer.\n     * @function\n     * @param {*} value Value to test\n     * @returns {boolean} `true` if the value is an integer\n     */\n    util.isInteger = Number.isInteger || /* istanbul ignore next */function isInteger(value) {\n      return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n    };\n\n    /**\n     * Tests if the specified value is a string.\n     * @param {*} value Value to test\n     * @returns {boolean} `true` if the value is a string\n     */\n    util.isString = function isString(value) {\n      return typeof value === \"string\" || value instanceof String;\n    };\n\n    /**\n     * Tests if the specified value is a non-null object.\n     * @param {*} value Value to test\n     * @returns {boolean} `true` if the value is a non-null object\n     */\n    util.isObject = function isObject(value) {\n      return value && typeof value === \"object\";\n    };\n\n    /**\n     * Checks if a property on a message is considered to be present.\n     * This is an alias of {@link util.isSet}.\n     * @function\n     * @param {Object} obj Plain object or message instance\n     * @param {string} prop Property name\n     * @returns {boolean} `true` if considered to be present, otherwise `false`\n     */\n    util.isset =\n    /**\n     * Checks if a property on a message is considered to be present.\n     * @param {Object} obj Plain object or message instance\n     * @param {string} prop Property name\n     * @returns {boolean} `true` if considered to be present, otherwise `false`\n     */\n    util.isSet = function isSet(obj, prop) {\n      var value = obj[prop];\n      if (value != null && obj.hasOwnProperty(prop))\n        // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n      return false;\n    };\n\n    /**\n     * Any compatible Buffer instance.\n     * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n     * @interface Buffer\n     * @extends Uint8Array\n     */\n\n    /**\n     * Node's Buffer class if available.\n     * @type {Constructor<Buffer>}\n     */\n    util.Buffer = function () {\n      try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */null;\n      } catch (e) {\n        /* istanbul ignore next */\n        return null;\n      }\n    }();\n\n    // Internal alias of or polyfull for Buffer.from.\n    util._Buffer_from = null;\n\n    // Internal alias of or polyfill for Buffer.allocUnsafe.\n    util._Buffer_allocUnsafe = null;\n\n    /**\n     * Creates a new buffer of whatever type supported by the environment.\n     * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n     * @returns {Uint8Array|Buffer} Buffer\n     */\n    util.newBuffer = function newBuffer(sizeOrArray) {\n      /* istanbul ignore next */\n      return typeof sizeOrArray === \"number\" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === \"undefined\" ? sizeOrArray : new Uint8Array(sizeOrArray);\n    };\n\n    /**\n     * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n     * @type {Constructor<Uint8Array>}\n     */\n    util.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n    /**\n     * Any compatible Long instance.\n     * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n     * @interface Long\n     * @property {number} low Low bits\n     * @property {number} high High bits\n     * @property {boolean} unsigned Whether unsigned or not\n     */\n\n    /**\n     * Long.js's Long class if available.\n     * @type {Constructor<Long>}\n     */\n    util.Long = /* istanbul ignore next */util.global.dcodeIO && /* istanbul ignore next */util.global.dcodeIO.Long || /* istanbul ignore next */util.global.Long || util.inquire(\"long\");\n\n    /**\n     * Regular expression used to verify 2 bit (`bool`) map keys.\n     * @type {RegExp}\n     * @const\n     */\n    util.key2Re = /^true|false|0|1$/;\n\n    /**\n     * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n     * @type {RegExp}\n     * @const\n     */\n    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n    /**\n     * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n     * @type {RegExp}\n     * @const\n     */\n    util.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n    /**\n     * Converts a number or long to an 8 characters long hash string.\n     * @param {Long|number} value Value to convert\n     * @returns {string} Hash\n     */\n    util.longToHash = function longToHash(value) {\n      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;\n    };\n\n    /**\n     * Converts an 8 characters long hash string to a long or number.\n     * @param {string} hash Hash\n     * @param {boolean} [unsigned=false] Whether unsigned or not\n     * @returns {Long|number} Original value\n     */\n    util.longFromHash = function longFromHash(hash, unsigned) {\n      var bits = util.LongBits.fromHash(hash);\n      if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n      return bits.toNumber(Boolean(unsigned));\n    };\n\n    /**\n     * Merges the properties of the source object into the destination object.\n     * @memberof util\n     * @param {Object.<string,*>} dst Destination object\n     * @param {Object.<string,*>} src Source object\n     * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n     * @returns {Object.<string,*>} Destination object\n     */\n    function merge(dst, src, ifNotSet) {\n      // used by converters\n      for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];\n      return dst;\n    }\n    util.merge = merge;\n\n    /**\n     * Converts the first character of a string to lower case.\n     * @param {string} str String to convert\n     * @returns {string} Converted string\n     */\n    util.lcFirst = function lcFirst(str) {\n      return str.charAt(0).toLowerCase() + str.substring(1);\n    };\n\n    /**\n     * Creates a custom error constructor.\n     * @memberof util\n     * @param {string} name Error name\n     * @returns {Constructor<Error>} Custom error constructor\n     */\n    function newError(name) {\n      function CustomError(message, properties) {\n        if (!(this instanceof CustomError)) return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", {\n          get: function () {\n            return message;\n          }\n        });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace)\n          // node\n          Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, \"stack\", {\n          value: new Error().stack || \"\"\n        });\n        if (properties) merge(this, properties);\n      }\n      CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n          value: CustomError,\n          writable: true,\n          enumerable: false,\n          configurable: true\n        },\n        name: {\n          get: function get() {\n            return name;\n          },\n          set: undefined,\n          enumerable: false,\n          // configurable: false would accurately preserve the behavior of\n          // the original, but I'm guessing that was not intentional.\n          // For an actual error subclass, this property would\n          // be configurable.\n          configurable: true\n        },\n        toString: {\n          value: function value() {\n            return this.name + \": \" + this.message;\n          },\n          writable: true,\n          enumerable: false,\n          configurable: true\n        }\n      });\n      return CustomError;\n    }\n    util.newError = newError;\n\n    /**\n     * Constructs a new protocol error.\n     * @classdesc Error subclass indicating a protocol specifc error.\n     * @memberof util\n     * @extends Error\n     * @template T extends Message<T>\n     * @constructor\n     * @param {string} message Error message\n     * @param {Object.<string,*>} [properties] Additional properties\n     * @example\n     * try {\n     *     MyMessage.decode(someBuffer); // throws if required fields are missing\n     * } catch (e) {\n     *     if (e instanceof ProtocolError && e.instance)\n     *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n     * }\n     */\n    util.ProtocolError = newError(\"ProtocolError\");\n\n    /**\n     * So far decoded message instance.\n     * @name util.ProtocolError#instance\n     * @type {Message<T>}\n     */\n\n    /**\n     * A OneOf getter as returned by {@link util.oneOfGetter}.\n     * @typedef OneOfGetter\n     * @type {function}\n     * @returns {string|undefined} Set field name, if any\n     */\n\n    /**\n     * Builds a getter for a oneof's present field name.\n     * @param {string[]} fieldNames Field names\n     * @returns {OneOfGetter} Unbound getter\n     */\n    util.oneOfGetter = function getOneOf(fieldNames) {\n      var fieldMap = {};\n      for (var i = 0; i < fieldNames.length; ++i) fieldMap[fieldNames[i]] = 1;\n\n      /**\n       * @returns {string|undefined} Set field name, if any\n       * @this Object\n       * @ignore\n       */\n      return function () {\n        // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];\n      };\n    };\n\n    /**\n     * A OneOf setter as returned by {@link util.oneOfSetter}.\n     * @typedef OneOfSetter\n     * @type {function}\n     * @param {string|undefined} value Field name\n     * @returns {undefined}\n     */\n\n    /**\n     * Builds a setter for a oneof's present field name.\n     * @param {string[]} fieldNames Field names\n     * @returns {OneOfSetter} Unbound setter\n     */\n    util.oneOfSetter = function setOneOf(fieldNames) {\n      /**\n       * @param {string} name Field name\n       * @returns {undefined}\n       * @this Object\n       * @ignore\n       */\n      return function (name) {\n        for (var i = 0; i < fieldNames.length; ++i) if (fieldNames[i] !== name) delete this[fieldNames[i]];\n      };\n    };\n\n    /**\n     * Default conversion options used for {@link Message#toJSON} implementations.\n     *\n     * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n     *\n     * - Longs become strings\n     * - Enums become string keys\n     * - Bytes become base64 encoded strings\n     * - (Sub-)Messages become plain objects\n     * - Maps become plain objects with all string keys\n     * - Repeated fields become arrays\n     * - NaN and Infinity for float and double fields become strings\n     *\n     * @type {IConversionOptions}\n     * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n     */\n    util.toJSONOptions = {\n      longs: String,\n      enums: String,\n      bytes: String,\n      json: true\n    };\n\n    // Sets up buffer utility according to the environment (called in index-minimal)\n    util._configure = function () {\n      var Buffer = util.Buffer;\n      /* istanbul ignore if */\n      if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n      }\n      // because node 4.x buffers are incompatible & immutable\n      // see: https://github.com/dcodeIO/protobuf.js/pull/665\n      util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */\n      function Buffer_from(value, encoding) {\n        return new Buffer(value, encoding);\n      };\n      util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */\n      function Buffer_allocUnsafe(size) {\n        return new Buffer(size);\n      };\n    };\n  })(minimal$1);\n  return minimal$1;\n}\nvar writer;\nvar hasRequiredWriter;\nfunction requireWriter() {\n  if (hasRequiredWriter) return writer;\n  hasRequiredWriter = 1;\n  writer = Writer;\n  var util = requireMinimal$1();\n  var BufferWriter; // cyclic\n\n  var LongBits = util.LongBits,\n    base64 = util.base64,\n    utf8 = util.utf8;\n\n  /**\n   * Constructs a new writer operation instance.\n   * @classdesc Scheduled writer operation.\n   * @constructor\n   * @param {function(*, Uint8Array, number)} fn Function to call\n   * @param {number} len Value byte length\n   * @param {*} val Value to write\n   * @ignore\n   */\n  function Op(fn, len, val) {\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n  }\n\n  /* istanbul ignore next */\n  function noop() {} // eslint-disable-line no-empty-function\n\n  /**\n   * Constructs a new writer state instance.\n   * @classdesc Copied writer state.\n   * @memberof Writer\n   * @constructor\n   * @param {Writer} writer Writer to copy state from\n   * @ignore\n   */\n  function State(writer) {\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n  }\n\n  /**\n   * Constructs a new writer instance.\n   * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n   * @constructor\n   */\n  function Writer() {\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n  }\n\n  var create = function create() {\n    return util.Buffer ? function create_buffer_setup() {\n      return (Writer.create = function create_buffer() {\n        return new BufferWriter();\n      })();\n    }\n    /* istanbul ignore next */ : function create_array() {\n      return new Writer();\n    };\n  };\n\n  /**\n   * Creates a new writer.\n   * @function\n   * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n   */\n  Writer.create = create();\n\n  /**\n   * Allocates a buffer of the specified size.\n   * @param {number} size Buffer size\n   * @returns {Uint8Array} Buffer\n   */\n  Writer.alloc = function alloc(size) {\n    return new util.Array(size);\n  };\n\n  // Use Uint8Array buffer pool in the browser, just like node does with buffers\n  /* istanbul ignore else */\n  if (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n  /**\n   * Pushes a new operation to the queue.\n   * @param {function(Uint8Array, number, *)} fn Function to call\n   * @param {number} len Value byte length\n   * @param {number} val Value to write\n   * @returns {Writer} `this`\n   * @private\n   */\n  Writer.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n  };\n  function writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n  }\n  function writeVarint32(val, buf, pos) {\n    while (val > 127) {\n      buf[pos++] = val & 127 | 128;\n      val >>>= 7;\n    }\n    buf[pos] = val;\n  }\n\n  /**\n   * Constructs a new varint writer operation instance.\n   * @classdesc Scheduled varint writer operation.\n   * @extends Op\n   * @constructor\n   * @param {number} len Value byte length\n   * @param {number} val Value to write\n   * @ignore\n   */\n  function VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n  }\n  VarintOp.prototype = Object.create(Op.prototype);\n  VarintOp.prototype.fn = writeVarint32;\n\n  /**\n   * Writes an unsigned 32 bit value as a varint.\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n    return this;\n  };\n\n  /**\n   * Writes a signed 32 bit value as a varint.\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.int32 = function write_int32(value) {\n    return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n    : this.uint32(value);\n  };\n\n  /**\n   * Writes a 32 bit value as a varint, zig-zag encoded.\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n  };\n  function writeVarint64(val, buf, pos) {\n    while (val.hi) {\n      buf[pos++] = val.lo & 127 | 128;\n      val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n      val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n      buf[pos++] = val.lo & 127 | 128;\n      val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as a varint.\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n  };\n\n  /**\n   * Writes a signed 64 bit value as a varint.\n   * @function\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.int64 = Writer.prototype.uint64;\n\n  /**\n   * Writes a signed 64 bit value as a varint, zig-zag encoded.\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n  };\n\n  /**\n   * Writes a boolish value as a varint.\n   * @param {boolean} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n  };\n  function writeFixed32(val, buf, pos) {\n    buf[pos] = val & 255;\n    buf[pos + 1] = val >>> 8 & 255;\n    buf[pos + 2] = val >>> 16 & 255;\n    buf[pos + 3] = val >>> 24;\n  }\n\n  /**\n   * Writes an unsigned 32 bit value as fixed 32 bits.\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n  };\n\n  /**\n   * Writes a signed 32 bit value as fixed 32 bits.\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.sfixed32 = Writer.prototype.fixed32;\n\n  /**\n   * Writes an unsigned 64 bit value as fixed 64 bits.\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n  };\n\n  /**\n   * Writes a signed 64 bit value as fixed 64 bits.\n   * @function\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.sfixed64 = Writer.prototype.fixed64;\n\n  /**\n   * Writes a float (32 bit).\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n  };\n\n  /**\n   * Writes a double (64 bit float).\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n  };\n  var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {\n    buf.set(val, pos); // also works for plain array values\n  }\n  /* istanbul ignore next */ : function writeBytes_for(val, buf, pos) {\n    for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i];\n  };\n\n  /**\n   * Writes a sequence of bytes.\n   * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len) return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n      var buf = Writer.alloc(len = base64.length(value));\n      base64.decode(value, buf, 0);\n      value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n  };\n\n  /**\n   * Writes a string.\n   * @param {string} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);\n  };\n\n  /**\n   * Forks this writer's state by pushing it to a stack.\n   * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n  };\n\n  /**\n   * Resets this instance to the last state.\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.reset = function reset() {\n    if (this.states) {\n      this.head = this.states.head;\n      this.tail = this.states.tail;\n      this.len = this.states.len;\n      this.states = this.states.next;\n    } else {\n      this.head = this.tail = new Op(noop, 0, 0);\n      this.len = 0;\n    }\n    return this;\n  };\n\n  /**\n   * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.ldelim = function ldelim() {\n    var head = this.head,\n      tail = this.tail,\n      len = this.len;\n    this.reset().uint32(len);\n    if (len) {\n      this.tail.next = head.next; // skip noop\n      this.tail = tail;\n      this.len += len;\n    }\n    return this;\n  };\n\n  /**\n   * Finishes the write operation.\n   * @returns {Uint8Array} Finished buffer\n   */\n  Writer.prototype.finish = function finish() {\n    var head = this.head.next,\n      // skip noop\n      buf = this.constructor.alloc(this.len),\n      pos = 0;\n    while (head) {\n      head.fn(head.val, buf, pos);\n      pos += head.len;\n      head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n  };\n  Writer._configure = function (BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n  };\n  return writer;\n}\nvar writer_buffer;\nvar hasRequiredWriter_buffer;\nfunction requireWriter_buffer() {\n  if (hasRequiredWriter_buffer) return writer_buffer;\n  hasRequiredWriter_buffer = 1;\n  writer_buffer = BufferWriter;\n\n  // extends Writer\n  var Writer = requireWriter();\n  (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n  var util = requireMinimal$1();\n\n  /**\n   * Constructs a new buffer writer instance.\n   * @classdesc Wire format writer using node buffers.\n   * @extends Writer\n   * @constructor\n   */\n  function BufferWriter() {\n    Writer.call(this);\n  }\n  BufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n      buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n      // also works for plain array values\n    }\n    /* istanbul ignore next */ : function writeBytesBuffer_copy(val, buf, pos) {\n      if (val.copy)\n        // Buffer values\n        val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;)\n      // plain array values\n      buf[pos++] = val[i++];\n    };\n  };\n\n  /**\n   * @override\n   */\n  BufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value)) value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len) this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n  };\n  function writeStringBuffer(val, buf, pos) {\n    if (val.length < 40)\n      // plain js is faster for short strings (probably due to redundant assertions)\n      util.utf8.write(val, buf, pos);else if (buf.utf8Write) buf.utf8Write(val, pos);else buf.write(val, pos);\n  }\n\n  /**\n   * @override\n   */\n  BufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len) this._push(writeStringBuffer, len, value);\n    return this;\n  };\n\n  /**\n   * Finishes the write operation.\n   * @name BufferWriter#finish\n   * @function\n   * @returns {Buffer} Finished buffer\n   */\n\n  BufferWriter._configure();\n  return writer_buffer;\n}\nvar reader;\nvar hasRequiredReader;\nfunction requireReader() {\n  if (hasRequiredReader) return reader;\n  hasRequiredReader = 1;\n  reader = Reader;\n  var util = requireMinimal$1();\n  var BufferReader; // cyclic\n\n  var LongBits = util.LongBits,\n    utf8 = util.utf8;\n\n  /* istanbul ignore next */\n  function indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n  }\n\n  /**\n   * Constructs a new reader instance using the specified buffer.\n   * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n   * @constructor\n   * @param {Uint8Array} buffer Buffer to read from\n   */\n  function Reader(buffer) {\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n  }\n  var create_array = typeof Uint8Array !== \"undefined\" ? function create_typed_array(buffer) {\n    if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n  }\n  /* istanbul ignore next */ : function create_array(buffer) {\n    if (Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n  };\n  var create = function create() {\n    return util.Buffer ? function create_buffer_setup(buffer) {\n      return (Reader.create = function create_buffer(buffer) {\n        return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer)\n        /* istanbul ignore next */ : create_array(buffer);\n      })(buffer);\n    }\n    /* istanbul ignore next */ : create_array;\n  };\n\n  /**\n   * Creates a new reader using the specified buffer.\n   * @function\n   * @param {Uint8Array|Buffer} buffer Buffer to read from\n   * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n   * @throws {Error} If `buffer` is not a valid buffer\n   */\n  Reader.create = create();\n  Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */util.Array.prototype.slice;\n\n  /**\n   * Reads a varint as an unsigned 32 bit value.\n   * @function\n   * @returns {number} Value read\n   */\n  Reader.prototype.uint32 = function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n      value = (this.buf[this.pos] & 127) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n\n      /* istanbul ignore if */\n      if ((this.pos += 5) > this.len) {\n        this.pos = this.len;\n        throw indexOutOfRange(this, 10);\n      }\n      return value;\n    };\n  }();\n\n  /**\n   * Reads a varint as a signed 32 bit value.\n   * @returns {number} Value read\n   */\n  Reader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n  };\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 32 bit value.\n   * @returns {number} Value read\n   */\n  Reader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n  };\n\n  /* eslint-disable no-invalid-this */\n\n  function readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) {\n      // fast route (lo)\n      for (; i < 4; ++i) {\n        // 1st..4th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n      // 5th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n      i = 0;\n    } else {\n      for (; i < 3; ++i) {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) throw indexOutOfRange(this);\n        // 1st..3th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n      // 4th\n      bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n      return bits;\n    }\n    if (this.len - this.pos > 4) {\n      // fast route (hi)\n      for (; i < 5; ++i) {\n        // 6th..10th\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n    } else {\n      for (; i < 5; ++i) {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) throw indexOutOfRange(this);\n        // 6th..10th\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n  }\n\n  /* eslint-enable no-invalid-this */\n\n  /**\n   * Reads a varint as a signed 64 bit value.\n   * @name Reader#int64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a varint as an unsigned 64 bit value.\n   * @name Reader#uint64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 64 bit value.\n   * @name Reader#sint64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a varint as a boolean.\n   * @returns {boolean} Value read\n   */\n  Reader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n  };\n  function readFixed32_end(buf, end) {\n    // note that this uses `end`, not `pos`\n    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n  }\n\n  /**\n   * Reads fixed 32 bits as an unsigned 32 bit integer.\n   * @returns {number} Value read\n   */\n  Reader.prototype.fixed32 = function read_fixed32() {\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    return readFixed32_end(this.buf, this.pos += 4);\n  };\n\n  /**\n   * Reads fixed 32 bits as a signed 32 bit integer.\n   * @returns {number} Value read\n   */\n  Reader.prototype.sfixed32 = function read_sfixed32() {\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n  };\n\n  /* eslint-disable no-invalid-this */\n\n  function readFixed64( /* this: Reader */\n  ) {\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n  }\n\n  /* eslint-enable no-invalid-this */\n\n  /**\n   * Reads fixed 64 bits.\n   * @name Reader#fixed64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads zig-zag encoded fixed 64 bits.\n   * @name Reader#sfixed64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a float (32 bit) as a number.\n   * @function\n   * @returns {number} Value read\n   */\n  Reader.prototype.float = function read_float() {\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n  };\n\n  /**\n   * Reads a double (64 bit float) as a number.\n   * @function\n   * @returns {number} Value read\n   */\n  Reader.prototype.double = function read_double() {\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n  };\n\n  /**\n   * Reads a sequence of bytes preceeded by its length as a varint.\n   * @returns {Uint8Array} Value read\n   */\n  Reader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n      start = this.pos,\n      end = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len) throw indexOutOfRange(this, length);\n    this.pos += length;\n    if (Array.isArray(this.buf))\n      // plain array\n      return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n    ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);\n  };\n\n  /**\n   * Reads a string preceeded by its byte length as a varint.\n   * @returns {string} Value read\n   */\n  Reader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n  };\n\n  /**\n   * Skips the specified number of bytes if specified, otherwise skips a varint.\n   * @param {number} [length] Length if known, otherwise a varint is assumed\n   * @returns {Reader} `this`\n   */\n  Reader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n      /* istanbul ignore if */\n      if (this.pos + length > this.len) throw indexOutOfRange(this, length);\n      this.pos += length;\n    } else {\n      do {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) throw indexOutOfRange(this);\n      } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n  };\n\n  /**\n   * Skips the next element of the specified wire type.\n   * @param {number} wireType Wire type received\n   * @returns {Reader} `this`\n   */\n  Reader.prototype.skipType = function (wireType) {\n    switch (wireType) {\n      case 0:\n        this.skip();\n        break;\n      case 1:\n        this.skip(8);\n        break;\n      case 2:\n        this.skip(this.uint32());\n        break;\n      case 3:\n        while ((wireType = this.uint32() & 7) !== 4) {\n          this.skipType(wireType);\n        }\n        break;\n      case 5:\n        this.skip(4);\n        break;\n\n      /* istanbul ignore next */\n      default:\n        throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n  };\n  Reader._configure = function (BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */\"toNumber\";\n    util.merge(Reader.prototype, {\n      int64: function read_int64() {\n        return readLongVarint.call(this)[fn](false);\n      },\n      uint64: function read_uint64() {\n        return readLongVarint.call(this)[fn](true);\n      },\n      sint64: function read_sint64() {\n        return readLongVarint.call(this).zzDecode()[fn](false);\n      },\n      fixed64: function read_fixed64() {\n        return readFixed64.call(this)[fn](true);\n      },\n      sfixed64: function read_sfixed64() {\n        return readFixed64.call(this)[fn](false);\n      }\n    });\n  };\n  return reader;\n}\nvar reader_buffer;\nvar hasRequiredReader_buffer;\nfunction requireReader_buffer() {\n  if (hasRequiredReader_buffer) return reader_buffer;\n  hasRequiredReader_buffer = 1;\n  reader_buffer = BufferReader;\n\n  // extends Reader\n  var Reader = requireReader();\n  (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n  var util = requireMinimal$1();\n\n  /**\n   * Constructs a new buffer reader instance.\n   * @classdesc Wire format reader using node buffers.\n   * @extends Reader\n   * @constructor\n   * @param {Buffer} buffer Buffer to read from\n   */\n  function BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n  }\n\n  BufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;\n  };\n\n  /**\n   * @override\n   */\n  BufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n  };\n\n  /**\n   * Reads a sequence of bytes preceeded by its length as a varint.\n   * @name BufferReader#bytes\n   * @function\n   * @returns {Buffer} Value read\n   */\n\n  BufferReader._configure();\n  return reader_buffer;\n}\nvar rpc = {};\nvar service;\nvar hasRequiredService;\nfunction requireService() {\n  if (hasRequiredService) return service;\n  hasRequiredService = 1;\n  service = Service;\n  var util = requireMinimal$1();\n\n  // Extends EventEmitter\n  (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n  /**\n   * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n   *\n   * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n   * @typedef rpc.ServiceMethodCallback\n   * @template TRes extends Message<TRes>\n   * @type {function}\n   * @param {Error|null} error Error, if any\n   * @param {TRes} [response] Response message\n   * @returns {undefined}\n   */\n\n  /**\n   * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n   * @typedef rpc.ServiceMethod\n   * @template TReq extends Message<TReq>\n   * @template TRes extends Message<TRes>\n   * @type {function}\n   * @param {TReq|Properties<TReq>} request Request message or plain object\n   * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n   * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n   */\n\n  /**\n   * Constructs a new RPC service instance.\n   * @classdesc An RPC service as returned by {@link Service#create}.\n   * @exports rpc.Service\n   * @extends util.EventEmitter\n   * @constructor\n   * @param {RPCImpl} rpcImpl RPC implementation\n   * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n   * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n   */\n  function Service(rpcImpl, requestDelimited, responseDelimited) {\n    if (typeof rpcImpl !== \"function\") throw TypeError(\"rpcImpl must be a function\");\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n  }\n\n  /**\n   * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n   * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n   * @param {Constructor<TReq>} requestCtor Request constructor\n   * @param {Constructor<TRes>} responseCtor Response constructor\n   * @param {TReq|Properties<TReq>} request Request message or plain object\n   * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n   * @returns {undefined}\n   * @template TReq extends Message<TReq>\n   * @template TRes extends Message<TRes>\n   */\n  Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n    if (!request) throw TypeError(\"request must be specified\");\n    var self = this;\n    if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n    if (!self.rpcImpl) {\n      setTimeout(function () {\n        callback(Error(\"already ended\"));\n      }, 0);\n      return undefined;\n    }\n    try {\n      return self.rpcImpl(method, requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(), function rpcCallback(err, response) {\n        if (err) {\n          self.emit(\"error\", err, method);\n          return callback(err);\n        }\n        if (response === null) {\n          self.end( /* endedByRPC */true);\n          return undefined;\n        }\n        if (!(response instanceof responseCtor)) {\n          try {\n            response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n          } catch (err) {\n            self.emit(\"error\", err, method);\n            return callback(err);\n          }\n        }\n        self.emit(\"data\", response, method);\n        return callback(null, response);\n      });\n    } catch (err) {\n      self.emit(\"error\", err, method);\n      setTimeout(function () {\n        callback(err);\n      }, 0);\n      return undefined;\n    }\n  };\n\n  /**\n   * Ends this service and emits the `end` event.\n   * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n   * @returns {rpc.Service} `this`\n   */\n  Service.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n      if (!endedByRPC)\n        // signal end to rpcImpl\n        this.rpcImpl(null, null, null);\n      this.rpcImpl = null;\n      this.emit(\"end\").off();\n    }\n    return this;\n  };\n  return service;\n}\nvar hasRequiredRpc;\nfunction requireRpc() {\n  if (hasRequiredRpc) return rpc;\n  hasRequiredRpc = 1;\n  (function (exports) {\n    /**\n     * Streaming RPC helpers.\n     * @namespace\n     */\n    var rpc = exports;\n\n    /**\n     * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n     * @typedef RPCImpl\n     * @type {function}\n     * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n     * @param {Uint8Array} requestData Request data\n     * @param {RPCImplCallback} callback Callback function\n     * @returns {undefined}\n     * @example\n     * function rpcImpl(method, requestData, callback) {\n     *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n     *         throw Error(\"no such method\");\n     *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n     *         callback(err, responseData);\n     *     });\n     * }\n     */\n\n    /**\n     * Node-style callback as used by {@link RPCImpl}.\n     * @typedef RPCImplCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any, otherwise `null`\n     * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n     * @returns {undefined}\n     */\n\n    rpc.Service = requireService();\n  })(rpc);\n  return rpc;\n}\nvar roots;\nvar hasRequiredRoots;\nfunction requireRoots() {\n  if (hasRequiredRoots) return roots;\n  hasRequiredRoots = 1;\n  roots = {};\n\n  /**\n   * Named roots.\n   * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n   * Can also be used manually to make roots available across modules.\n   * @name roots\n   * @type {Object.<string,Root>}\n   * @example\n   * // pbjs -r myroot -o compiled.js ...\n   *\n   * // in another module:\n   * require(\"./compiled.js\");\n   *\n   * // in any subsequent module:\n   * var root = protobuf.roots[\"myroot\"];\n   */\n  return roots;\n}\nvar hasRequiredIndexMinimal;\nfunction requireIndexMinimal() {\n  if (hasRequiredIndexMinimal) return indexMinimal;\n  hasRequiredIndexMinimal = 1;\n  (function (exports) {\n    var protobuf = exports;\n\n    /**\n     * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n     * @name build\n     * @type {string}\n     * @const\n     */\n    protobuf.build = \"minimal\";\n\n    // Serialization\n    protobuf.Writer = requireWriter();\n    protobuf.BufferWriter = requireWriter_buffer();\n    protobuf.Reader = requireReader();\n    protobuf.BufferReader = requireReader_buffer();\n\n    // Utility\n    protobuf.util = requireMinimal$1();\n    protobuf.rpc = requireRpc();\n    protobuf.roots = requireRoots();\n    protobuf.configure = configure;\n\n    /* istanbul ignore next */\n    /**\n     * Reconfigures the library according to the environment.\n     * @returns {undefined}\n     */\n    function configure() {\n      protobuf.util._configure();\n      protobuf.Writer._configure(protobuf.BufferWriter);\n      protobuf.Reader._configure(protobuf.BufferReader);\n    }\n\n    // Set up buffer utility according to the environment\n    configure();\n  })(indexMinimal);\n  return indexMinimal;\n}\nvar minimal;\nvar hasRequiredMinimal;\nfunction requireMinimal() {\n  if (hasRequiredMinimal) return minimal;\n  hasRequiredMinimal = 1;\n  minimal = requireIndexMinimal();\n  return minimal;\n}\n\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n(function (module) {\n  (function (global, factory) {\n    /* global define, require, module */\n\n    /* AMD */if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports) module.exports = factory(requireMinimal());\n  })(commonjsGlobal, function ($protobuf) {\n    // Common aliases\n    var $Reader = $protobuf.Reader,\n      $Writer = $protobuf.Writer,\n      $util = $protobuf.util;\n\n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    $root.Message = function () {\n      /**\n       * Properties of a Message.\n       * @exports IMessage\n       * @interface IMessage\n       * @property {string|null} [userId] Message userId\n       * @property {number|Long|null} [messageId] Message messageId\n       * @property {number|null} [last] Message last\n       * @property {string|null} [token] Message token\n       * @property {string|null} [userChannel] Message userChannel\n       * @property {string|null} [vpsToken] Message vpsToken\n       * @property {Array.<IDevContext>|null} [devContext] Устарело с версии 3.\n       * @property {string|null} [messageName] Message messageName\n       * @property {number|null} [version] Message version\n       * @property {IVoice|null} [voice] Message voice\n       * @property {IText|null} [text] Message text\n       * @property {ISystemMessage|null} [systemMessage] Message systemMessage\n       * @property {ILegacyDevice|null} [legacyDevice] Message legacyDevice\n       * @property {ISettings|null} [settings] Message settings\n       * @property {IStatus|null} [status] Message status\n       * @property {IDevice|null} [device] Message device\n       * @property {IBytes|null} [bytes] Message bytes\n       * @property {IInitialSettings|null} [initialSettings] Message initialSettings\n       * @property {ICancel|null} [cancel] Message cancel\n       * @property {IGetHistoryRequest|null} [getHistoryRequest] Message getHistoryRequest\n       * @property {IMute|null} [mute] Message mute\n       * @property {number|Long|null} [timestamp] Message timestamp\n       * @property {Object.<string,string>|null} [meta] Message meta\n       */\n\n      /**\n       * Constructs a new Message.\n       * @exports Message\n       * @classdesc Represents a Message.\n       * @implements IMessage\n       * @constructor\n       * @param {IMessage=} [properties] Properties to set\n       */\n      function Message(properties) {\n        this.devContext = [];\n        this.meta = {};\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Message userId.\n       * @member {string} userId\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.userId = \"\";\n\n      /**\n       * Message messageId.\n       * @member {number|Long} messageId\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.messageId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Message last.\n       * @member {number} last\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.last = 0;\n\n      /**\n       * Message token.\n       * @member {string} token\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.token = \"\";\n\n      /**\n       * Message userChannel.\n       * @member {string} userChannel\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.userChannel = \"\";\n\n      /**\n       * Message vpsToken.\n       * @member {string} vpsToken\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.vpsToken = \"\";\n\n      /**\n       * Устарело с версии 3.\n       * @member {Array.<IDevContext>} devContext\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.devContext = $util.emptyArray;\n\n      /**\n       * Message messageName.\n       * @member {string} messageName\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.messageName = \"\";\n\n      /**\n       * Message version.\n       * @member {number} version\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.version = 0;\n\n      /**\n       * Message voice.\n       * @member {IVoice|null|undefined} voice\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.voice = null;\n\n      /**\n       * Message text.\n       * @member {IText|null|undefined} text\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.text = null;\n\n      /**\n       * Message systemMessage.\n       * @member {ISystemMessage|null|undefined} systemMessage\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.systemMessage = null;\n\n      /**\n       * Message legacyDevice.\n       * @member {ILegacyDevice|null|undefined} legacyDevice\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.legacyDevice = null;\n\n      /**\n       * Message settings.\n       * @member {ISettings|null|undefined} settings\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.settings = null;\n\n      /**\n       * Message status.\n       * @member {IStatus|null|undefined} status\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.status = null;\n\n      /**\n       * Message device.\n       * @member {IDevice|null|undefined} device\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.device = null;\n\n      /**\n       * Message bytes.\n       * @member {IBytes|null|undefined} bytes\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.bytes = null;\n\n      /**\n       * Message initialSettings.\n       * @member {IInitialSettings|null|undefined} initialSettings\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.initialSettings = null;\n\n      /**\n       * Message cancel.\n       * @member {ICancel|null|undefined} cancel\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.cancel = null;\n\n      /**\n       * Message getHistoryRequest.\n       * @member {IGetHistoryRequest|null|undefined} getHistoryRequest\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.getHistoryRequest = null;\n\n      /**\n       * Message mute.\n       * @member {IMute|null|undefined} mute\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.mute = null;\n\n      /**\n       * Message timestamp.\n       * @member {number|Long} timestamp\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Message meta.\n       * @member {Object.<string,string>} meta\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.meta = $util.emptyObject;\n\n      // OneOf field names bound to virtual getters and setters\n      var $oneOfFields;\n\n      /**\n       * Message content.\n       * @member {\"voice\"|\"text\"|\"systemMessage\"|\"legacyDevice\"|\"settings\"|\"status\"|\"device\"|\"bytes\"|\"initialSettings\"|\"cancel\"|\"getHistoryRequest\"|\"mute\"|undefined} content\n       * @memberof Message\n       * @instance\n       */\n      Object.defineProperty(Message.prototype, \"content\", {\n        get: $util.oneOfGetter($oneOfFields = [\"voice\", \"text\", \"systemMessage\", \"legacyDevice\", \"settings\", \"status\", \"device\", \"bytes\", \"initialSettings\", \"cancel\", \"getHistoryRequest\", \"mute\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n\n      /**\n       * Creates a new Message instance using the specified properties.\n       * @function create\n       * @memberof Message\n       * @static\n       * @param {IMessage=} [properties] Properties to set\n       * @returns {Message} Message instance\n       */\n      Message.create = function create(properties) {\n        return new Message(properties);\n      };\n\n      /**\n       * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n       * @function encode\n       * @memberof Message\n       * @static\n       * @param {IMessage} message Message message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Message.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.messageId != null && Object.hasOwnProperty.call(message, \"messageId\")) writer.uint32( /* id 2, wireType 0 =*/16).int64(message.messageId);\n        if (message.last != null && Object.hasOwnProperty.call(message, \"last\")) writer.uint32( /* id 3, wireType 0 =*/24).int32(message.last);\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.token);\n        if (message.voice != null && Object.hasOwnProperty.call(message, \"voice\")) $root.Voice.encode(message.voice, writer.uint32( /* id 5, wireType 2 =*/42).fork()).ldelim();\n        if (message.text != null && Object.hasOwnProperty.call(message, \"text\")) $root.Text.encode(message.text, writer.uint32( /* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.systemMessage != null && Object.hasOwnProperty.call(message, \"systemMessage\")) $root.SystemMessage.encode(message.systemMessage, writer.uint32( /* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.legacyDevice != null && Object.hasOwnProperty.call(message, \"legacyDevice\")) $root.LegacyDevice.encode(message.legacyDevice, writer.uint32( /* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.settings != null && Object.hasOwnProperty.call(message, \"settings\")) $root.Settings.encode(message.settings, writer.uint32( /* id 9, wireType 2 =*/74).fork()).ldelim();\n        if (message.status != null && Object.hasOwnProperty.call(message, \"status\")) $root.Status.encode(message.status, writer.uint32( /* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\")) writer.uint32( /* id 11, wireType 2 =*/90).string(message.userChannel);\n        if (message.vpsToken != null && Object.hasOwnProperty.call(message, \"vpsToken\")) writer.uint32( /* id 12, wireType 2 =*/98).string(message.vpsToken);\n        if (message.devContext != null && message.devContext.length) for (var i = 0; i < message.devContext.length; ++i) $root.DevContext.encode(message.devContext[i], writer.uint32( /* id 13, wireType 2 =*/106).fork()).ldelim();\n        if (message.messageName != null && Object.hasOwnProperty.call(message, \"messageName\")) writer.uint32( /* id 14, wireType 2 =*/114).string(message.messageName);\n        if (message.version != null && Object.hasOwnProperty.call(message, \"version\")) writer.uint32( /* id 15, wireType 0 =*/120).int32(message.version);\n        if (message.device != null && Object.hasOwnProperty.call(message, \"device\")) $root.Device.encode(message.device, writer.uint32( /* id 16, wireType 2 =*/130).fork()).ldelim();\n        if (message.bytes != null && Object.hasOwnProperty.call(message, \"bytes\")) $root.Bytes.encode(message.bytes, writer.uint32( /* id 17, wireType 2 =*/138).fork()).ldelim();\n        if (message.initialSettings != null && Object.hasOwnProperty.call(message, \"initialSettings\")) $root.InitialSettings.encode(message.initialSettings, writer.uint32( /* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\")) writer.uint32( /* id 19, wireType 0 =*/152).int64(message.timestamp);\n        if (message.meta != null && Object.hasOwnProperty.call(message, \"meta\")) for (var keys = Object.keys(message.meta), i = 0; i < keys.length; ++i) writer.uint32( /* id 20, wireType 2 =*/162).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]).uint32( /* id 2, wireType 2 =*/18).string(message.meta[keys[i]]).ldelim();\n        if (message.cancel != null && Object.hasOwnProperty.call(message, \"cancel\")) $root.Cancel.encode(message.cancel, writer.uint32( /* id 21, wireType 2 =*/170).fork()).ldelim();\n        if (message.getHistoryRequest != null && Object.hasOwnProperty.call(message, \"getHistoryRequest\")) $root.GetHistoryRequest.encode(message.getHistoryRequest, writer.uint32( /* id 22, wireType 2 =*/178).fork()).ldelim();\n        if (message.mute != null && Object.hasOwnProperty.call(message, \"mute\")) $root.Mute.encode(message.mute, writer.uint32( /* id 23, wireType 2 =*/186).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes a Message message from the specified reader or buffer.\n       * @function decode\n       * @memberof Message\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Message} Message\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Message.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Message(),\n          key,\n          value;\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.userId = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.messageId = reader.int64();\n                break;\n              }\n            case 3:\n              {\n                message.last = reader.int32();\n                break;\n              }\n            case 4:\n              {\n                message.token = reader.string();\n                break;\n              }\n            case 11:\n              {\n                message.userChannel = reader.string();\n                break;\n              }\n            case 12:\n              {\n                message.vpsToken = reader.string();\n                break;\n              }\n            case 13:\n              {\n                if (!(message.devContext && message.devContext.length)) message.devContext = [];\n                message.devContext.push($root.DevContext.decode(reader, reader.uint32()));\n                break;\n              }\n            case 14:\n              {\n                message.messageName = reader.string();\n                break;\n              }\n            case 15:\n              {\n                message.version = reader.int32();\n                break;\n              }\n            case 5:\n              {\n                message.voice = $root.Voice.decode(reader, reader.uint32());\n                break;\n              }\n            case 6:\n              {\n                message.text = $root.Text.decode(reader, reader.uint32());\n                break;\n              }\n            case 7:\n              {\n                message.systemMessage = $root.SystemMessage.decode(reader, reader.uint32());\n                break;\n              }\n            case 8:\n              {\n                message.legacyDevice = $root.LegacyDevice.decode(reader, reader.uint32());\n                break;\n              }\n            case 9:\n              {\n                message.settings = $root.Settings.decode(reader, reader.uint32());\n                break;\n              }\n            case 10:\n              {\n                message.status = $root.Status.decode(reader, reader.uint32());\n                break;\n              }\n            case 16:\n              {\n                message.device = $root.Device.decode(reader, reader.uint32());\n                break;\n              }\n            case 17:\n              {\n                message.bytes = $root.Bytes.decode(reader, reader.uint32());\n                break;\n              }\n            case 18:\n              {\n                message.initialSettings = $root.InitialSettings.decode(reader, reader.uint32());\n                break;\n              }\n            case 21:\n              {\n                message.cancel = $root.Cancel.decode(reader, reader.uint32());\n                break;\n              }\n            case 22:\n              {\n                message.getHistoryRequest = $root.GetHistoryRequest.decode(reader, reader.uint32());\n                break;\n              }\n            case 23:\n              {\n                message.mute = $root.Mute.decode(reader, reader.uint32());\n                break;\n              }\n            case 19:\n              {\n                message.timestamp = reader.int64();\n                break;\n              }\n            case 20:\n              {\n                if (message.meta === $util.emptyObject) message.meta = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = \"\";\n                while (reader.pos < end2) {\n                  var tag2 = reader.uint32();\n                  switch (tag2 >>> 3) {\n                    case 1:\n                      key = reader.string();\n                      break;\n                    case 2:\n                      value = reader.string();\n                      break;\n                    default:\n                      reader.skipType(tag2 & 7);\n                      break;\n                  }\n                }\n                message.meta[key] = value;\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Message;\n    }();\n    $root.InitialSettings = function () {\n      /**\n       * Properties of an InitialSettings.\n       * @exports IInitialSettings\n       * @interface IInitialSettings\n       * @property {string|null} [userId] InitialSettings userId\n       * @property {string|null} [userChannel] InitialSettings userChannel\n       * @property {IDevice|null} [device] InitialSettings device\n       * @property {ISettings|null} [settings] InitialSettings settings\n       * @property {string|null} [locale] InitialSettings locale\n       */\n\n      /**\n       * Constructs a new InitialSettings.\n       * @exports InitialSettings\n       * @classdesc Represents an InitialSettings.\n       * @implements IInitialSettings\n       * @constructor\n       * @param {IInitialSettings=} [properties] Properties to set\n       */\n      function InitialSettings(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * InitialSettings userId.\n       * @member {string} userId\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.userId = \"\";\n\n      /**\n       * InitialSettings userChannel.\n       * @member {string} userChannel\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.userChannel = \"\";\n\n      /**\n       * InitialSettings device.\n       * @member {IDevice|null|undefined} device\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.device = null;\n\n      /**\n       * InitialSettings settings.\n       * @member {ISettings|null|undefined} settings\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.settings = null;\n\n      /**\n       * InitialSettings locale.\n       * @member {string} locale\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.locale = \"\";\n\n      /**\n       * Creates a new InitialSettings instance using the specified properties.\n       * @function create\n       * @memberof InitialSettings\n       * @static\n       * @param {IInitialSettings=} [properties] Properties to set\n       * @returns {InitialSettings} InitialSettings instance\n       */\n      InitialSettings.create = function create(properties) {\n        return new InitialSettings(properties);\n      };\n\n      /**\n       * Encodes the specified InitialSettings message. Does not implicitly {@link InitialSettings.verify|verify} messages.\n       * @function encode\n       * @memberof InitialSettings\n       * @static\n       * @param {IInitialSettings} message InitialSettings message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      InitialSettings.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.userChannel);\n        if (message.device != null && Object.hasOwnProperty.call(message, \"device\")) $root.Device.encode(message.device, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.settings != null && Object.hasOwnProperty.call(message, \"settings\")) $root.Settings.encode(message.settings, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.locale != null && Object.hasOwnProperty.call(message, \"locale\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.locale);\n        return writer;\n      };\n\n      /**\n       * Decodes an InitialSettings message from the specified reader or buffer.\n       * @function decode\n       * @memberof InitialSettings\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {InitialSettings} InitialSettings\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      InitialSettings.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.InitialSettings();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.userId = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.userChannel = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.device = $root.Device.decode(reader, reader.uint32());\n                break;\n              }\n            case 4:\n              {\n                message.settings = $root.Settings.decode(reader, reader.uint32());\n                break;\n              }\n            case 5:\n              {\n                message.locale = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return InitialSettings;\n    }();\n    $root.Device = function () {\n      /**\n       * Properties of a Device.\n       * @exports IDevice\n       * @interface IDevice\n       * @property {string|null} [platformType] Device platformType\n       * @property {string|null} [platformVersion] Device platformVersion\n       * @property {string|null} [surface] Обязательно. Пример, SBERBOX\n       * @property {string|null} [surfaceVersion] Device surfaceVersion\n       * @property {string|null} [features] Device features\n       * @property {string|null} [capabilities] Device capabilities\n       * @property {string|null} [deviceId] Device deviceId\n       * @property {string|null} [deviceManufacturer] Device deviceManufacturer\n       * @property {string|null} [deviceModel] Device deviceModel\n       * @property {string|null} [additionalInfo] Device additionalInfo\n       * @property {string|null} [tenant] Device tenant\n       */\n\n      /**\n       * Constructs a new Device.\n       * @exports Device\n       * @classdesc Represents a Device.\n       * @implements IDevice\n       * @constructor\n       * @param {IDevice=} [properties] Properties to set\n       */\n      function Device(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Device platformType.\n       * @member {string} platformType\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.platformType = \"\";\n\n      /**\n       * Device platformVersion.\n       * @member {string} platformVersion\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.platformVersion = \"\";\n\n      /**\n       * Обязательно. Пример, SBERBOX\n       * @member {string} surface\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.surface = \"\";\n\n      /**\n       * Device surfaceVersion.\n       * @member {string} surfaceVersion\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.surfaceVersion = \"\";\n\n      /**\n       * Device features.\n       * @member {string} features\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.features = \"\";\n\n      /**\n       * Device capabilities.\n       * @member {string} capabilities\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.capabilities = \"\";\n\n      /**\n       * Device deviceId.\n       * @member {string} deviceId\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.deviceId = \"\";\n\n      /**\n       * Device deviceManufacturer.\n       * @member {string} deviceManufacturer\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.deviceManufacturer = \"\";\n\n      /**\n       * Device deviceModel.\n       * @member {string} deviceModel\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.deviceModel = \"\";\n\n      /**\n       * Device additionalInfo.\n       * @member {string} additionalInfo\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.additionalInfo = \"\";\n\n      /**\n       * Device tenant.\n       * @member {string} tenant\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.tenant = \"\";\n\n      /**\n       * Creates a new Device instance using the specified properties.\n       * @function create\n       * @memberof Device\n       * @static\n       * @param {IDevice=} [properties] Properties to set\n       * @returns {Device} Device instance\n       */\n      Device.create = function create(properties) {\n        return new Device(properties);\n      };\n\n      /**\n       * Encodes the specified Device message. Does not implicitly {@link Device.verify|verify} messages.\n       * @function encode\n       * @memberof Device\n       * @static\n       * @param {IDevice} message Device message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Device.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.platformType != null && Object.hasOwnProperty.call(message, \"platformType\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.platformType);\n        if (message.platformVersion != null && Object.hasOwnProperty.call(message, \"platformVersion\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.platformVersion);\n        if (message.surface != null && Object.hasOwnProperty.call(message, \"surface\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.surface);\n        if (message.surfaceVersion != null && Object.hasOwnProperty.call(message, \"surfaceVersion\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.surfaceVersion);\n        if (message.features != null && Object.hasOwnProperty.call(message, \"features\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.features);\n        if (message.capabilities != null && Object.hasOwnProperty.call(message, \"capabilities\")) writer.uint32( /* id 6, wireType 2 =*/50).string(message.capabilities);\n        if (message.deviceId != null && Object.hasOwnProperty.call(message, \"deviceId\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.deviceId);\n        if (message.deviceManufacturer != null && Object.hasOwnProperty.call(message, \"deviceManufacturer\")) writer.uint32( /* id 8, wireType 2 =*/66).string(message.deviceManufacturer);\n        if (message.deviceModel != null && Object.hasOwnProperty.call(message, \"deviceModel\")) writer.uint32( /* id 9, wireType 2 =*/74).string(message.deviceModel);\n        if (message.additionalInfo != null && Object.hasOwnProperty.call(message, \"additionalInfo\")) writer.uint32( /* id 10, wireType 2 =*/82).string(message.additionalInfo);\n        if (message.tenant != null && Object.hasOwnProperty.call(message, \"tenant\")) writer.uint32( /* id 11, wireType 2 =*/90).string(message.tenant);\n        return writer;\n      };\n\n      /**\n       * Decodes a Device message from the specified reader or buffer.\n       * @function decode\n       * @memberof Device\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Device} Device\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Device.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Device();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.platformType = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.platformVersion = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.surface = reader.string();\n                break;\n              }\n            case 4:\n              {\n                message.surfaceVersion = reader.string();\n                break;\n              }\n            case 5:\n              {\n                message.features = reader.string();\n                break;\n              }\n            case 6:\n              {\n                message.capabilities = reader.string();\n                break;\n              }\n            case 7:\n              {\n                message.deviceId = reader.string();\n                break;\n              }\n            case 8:\n              {\n                message.deviceManufacturer = reader.string();\n                break;\n              }\n            case 9:\n              {\n                message.deviceModel = reader.string();\n                break;\n              }\n            case 10:\n              {\n                message.additionalInfo = reader.string();\n                break;\n              }\n            case 11:\n              {\n                message.tenant = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Device;\n    }();\n    $root.Settings = function () {\n      /**\n       * Properties of a Settings.\n       * @exports ISettings\n       * @interface ISettings\n       * @property {number|null} [dubbing] Settings dubbing\n       * @property {number|null} [echo] Settings echo\n       * @property {string|null} [ttsEngine] Settings ttsEngine\n       * @property {string|null} [asrEngine] Settings asrEngine\n       * @property {number|null} [asrAutoStop] Settings asrAutoStop\n       * @property {number|null} [devMode] Settings devMode\n       * @property {string|null} [authConnector] Settings authConnector\n       * @property {string|null} [surface] Settings surface\n       */\n\n      /**\n       * Constructs a new Settings.\n       * @exports Settings\n       * @classdesc Represents a Settings.\n       * @implements ISettings\n       * @constructor\n       * @param {ISettings=} [properties] Properties to set\n       */\n      function Settings(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Settings dubbing.\n       * @member {number} dubbing\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.dubbing = 0;\n\n      /**\n       * Settings echo.\n       * @member {number} echo\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.echo = 0;\n\n      /**\n       * Settings ttsEngine.\n       * @member {string} ttsEngine\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.ttsEngine = \"\";\n\n      /**\n       * Settings asrEngine.\n       * @member {string} asrEngine\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.asrEngine = \"\";\n\n      /**\n       * Settings asrAutoStop.\n       * @member {number} asrAutoStop\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.asrAutoStop = 0;\n\n      /**\n       * Settings devMode.\n       * @member {number} devMode\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.devMode = 0;\n\n      /**\n       * Settings authConnector.\n       * @member {string} authConnector\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.authConnector = \"\";\n\n      /**\n       * Settings surface.\n       * @member {string} surface\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.surface = \"\";\n\n      /**\n       * Creates a new Settings instance using the specified properties.\n       * @function create\n       * @memberof Settings\n       * @static\n       * @param {ISettings=} [properties] Properties to set\n       * @returns {Settings} Settings instance\n       */\n      Settings.create = function create(properties) {\n        return new Settings(properties);\n      };\n\n      /**\n       * Encodes the specified Settings message. Does not implicitly {@link Settings.verify|verify} messages.\n       * @function encode\n       * @memberof Settings\n       * @static\n       * @param {ISettings} message Settings message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Settings.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.dubbing != null && Object.hasOwnProperty.call(message, \"dubbing\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.dubbing);\n        if (message.echo != null && Object.hasOwnProperty.call(message, \"echo\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.echo);\n        if (message.ttsEngine != null && Object.hasOwnProperty.call(message, \"ttsEngine\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.ttsEngine);\n        if (message.asrEngine != null && Object.hasOwnProperty.call(message, \"asrEngine\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.asrEngine);\n        if (message.asrAutoStop != null && Object.hasOwnProperty.call(message, \"asrAutoStop\")) writer.uint32( /* id 5, wireType 0 =*/40).int32(message.asrAutoStop);\n        if (message.devMode != null && Object.hasOwnProperty.call(message, \"devMode\")) writer.uint32( /* id 6, wireType 0 =*/48).int32(message.devMode);\n        if (message.authConnector != null && Object.hasOwnProperty.call(message, \"authConnector\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.authConnector);\n        if (message.surface != null && Object.hasOwnProperty.call(message, \"surface\")) writer.uint32( /* id 8, wireType 2 =*/66).string(message.surface);\n        return writer;\n      };\n\n      /**\n       * Decodes a Settings message from the specified reader or buffer.\n       * @function decode\n       * @memberof Settings\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Settings} Settings\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Settings.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Settings();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.dubbing = reader.int32();\n                break;\n              }\n            case 2:\n              {\n                message.echo = reader.int32();\n                break;\n              }\n            case 3:\n              {\n                message.ttsEngine = reader.string();\n                break;\n              }\n            case 4:\n              {\n                message.asrEngine = reader.string();\n                break;\n              }\n            case 5:\n              {\n                message.asrAutoStop = reader.int32();\n                break;\n              }\n            case 6:\n              {\n                message.devMode = reader.int32();\n                break;\n              }\n            case 7:\n              {\n                message.authConnector = reader.string();\n                break;\n              }\n            case 8:\n              {\n                message.surface = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Settings;\n    }();\n    $root.LegacyDevice = function () {\n      /**\n       * Properties of a LegacyDevice.\n       * @exports ILegacyDevice\n       * @interface ILegacyDevice\n       * @property {string|null} [clientType] LegacyDevice clientType\n       * @property {string|null} [channel] LegacyDevice channel\n       * @property {string|null} [channelVersion] LegacyDevice channelVersion\n       * @property {string|null} [platformName] LegacyDevice platformName\n       * @property {string|null} [platformVersion] LegacyDevice platformVersion\n       * @property {string|null} [sdkVersion] LegacyDevice sdkVersion\n       * @property {string|null} [protocolVersion] LegacyDevice protocolVersion\n       */\n\n      /**\n       * Constructs a new LegacyDevice.\n       * @exports LegacyDevice\n       * @classdesc Represents a LegacyDevice.\n       * @implements ILegacyDevice\n       * @constructor\n       * @param {ILegacyDevice=} [properties] Properties to set\n       */\n      function LegacyDevice(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * LegacyDevice clientType.\n       * @member {string} clientType\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.clientType = \"\";\n\n      /**\n       * LegacyDevice channel.\n       * @member {string} channel\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.channel = \"\";\n\n      /**\n       * LegacyDevice channelVersion.\n       * @member {string} channelVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.channelVersion = \"\";\n\n      /**\n       * LegacyDevice platformName.\n       * @member {string} platformName\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.platformName = \"\";\n\n      /**\n       * LegacyDevice platformVersion.\n       * @member {string} platformVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.platformVersion = \"\";\n\n      /**\n       * LegacyDevice sdkVersion.\n       * @member {string} sdkVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.sdkVersion = \"\";\n\n      /**\n       * LegacyDevice protocolVersion.\n       * @member {string} protocolVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.protocolVersion = \"\";\n\n      /**\n       * Creates a new LegacyDevice instance using the specified properties.\n       * @function create\n       * @memberof LegacyDevice\n       * @static\n       * @param {ILegacyDevice=} [properties] Properties to set\n       * @returns {LegacyDevice} LegacyDevice instance\n       */\n      LegacyDevice.create = function create(properties) {\n        return new LegacyDevice(properties);\n      };\n\n      /**\n       * Encodes the specified LegacyDevice message. Does not implicitly {@link LegacyDevice.verify|verify} messages.\n       * @function encode\n       * @memberof LegacyDevice\n       * @static\n       * @param {ILegacyDevice} message LegacyDevice message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      LegacyDevice.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.clientType != null && Object.hasOwnProperty.call(message, \"clientType\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.clientType);\n        if (message.channel != null && Object.hasOwnProperty.call(message, \"channel\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.channel);\n        if (message.channelVersion != null && Object.hasOwnProperty.call(message, \"channelVersion\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.channelVersion);\n        if (message.platformName != null && Object.hasOwnProperty.call(message, \"platformName\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.platformName);\n        if (message.platformVersion != null && Object.hasOwnProperty.call(message, \"platformVersion\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.platformVersion);\n        if (message.sdkVersion != null && Object.hasOwnProperty.call(message, \"sdkVersion\")) writer.uint32( /* id 6, wireType 2 =*/50).string(message.sdkVersion);\n        if (message.protocolVersion != null && Object.hasOwnProperty.call(message, \"protocolVersion\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.protocolVersion);\n        return writer;\n      };\n\n      /**\n       * Decodes a LegacyDevice message from the specified reader or buffer.\n       * @function decode\n       * @memberof LegacyDevice\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {LegacyDevice} LegacyDevice\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      LegacyDevice.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.LegacyDevice();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.clientType = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.channel = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.channelVersion = reader.string();\n                break;\n              }\n            case 4:\n              {\n                message.platformName = reader.string();\n                break;\n              }\n            case 5:\n              {\n                message.platformVersion = reader.string();\n                break;\n              }\n            case 6:\n              {\n                message.sdkVersion = reader.string();\n                break;\n              }\n            case 7:\n              {\n                message.protocolVersion = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return LegacyDevice;\n    }();\n    $root.Voice = function () {\n      /**\n       * Properties of a Voice.\n       * @exports IVoice\n       * @interface IVoice\n       * @property {Uint8Array|null} [data] Voice data\n       */\n\n      /**\n       * Constructs a new Voice.\n       * @exports Voice\n       * @classdesc Represents a Voice.\n       * @implements IVoice\n       * @constructor\n       * @param {IVoice=} [properties] Properties to set\n       */\n      function Voice(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Voice data.\n       * @member {Uint8Array} data\n       * @memberof Voice\n       * @instance\n       */\n      Voice.prototype.data = $util.newBuffer([]);\n\n      /**\n       * Creates a new Voice instance using the specified properties.\n       * @function create\n       * @memberof Voice\n       * @static\n       * @param {IVoice=} [properties] Properties to set\n       * @returns {Voice} Voice instance\n       */\n      Voice.create = function create(properties) {\n        return new Voice(properties);\n      };\n\n      /**\n       * Encodes the specified Voice message. Does not implicitly {@link Voice.verify|verify} messages.\n       * @function encode\n       * @memberof Voice\n       * @static\n       * @param {IVoice} message Voice message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Voice.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.data);\n        return writer;\n      };\n\n      /**\n       * Decodes a Voice message from the specified reader or buffer.\n       * @function decode\n       * @memberof Voice\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Voice} Voice\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Voice.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Voice();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.data = reader.bytes();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Voice;\n    }();\n    $root.Text = function () {\n      /**\n       * Properties of a Text.\n       * @exports IText\n       * @interface IText\n       * @property {string|null} [data] Text data\n       * @property {string|null} [type] Text type\n       */\n\n      /**\n       * Constructs a new Text.\n       * @exports Text\n       * @classdesc Represents a Text.\n       * @implements IText\n       * @constructor\n       * @param {IText=} [properties] Properties to set\n       */\n      function Text(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Text data.\n       * @member {string} data\n       * @memberof Text\n       * @instance\n       */\n      Text.prototype.data = \"\";\n\n      /**\n       * Text type.\n       * @member {string} type\n       * @memberof Text\n       * @instance\n       */\n      Text.prototype.type = \"\";\n\n      /**\n       * Creates a new Text instance using the specified properties.\n       * @function create\n       * @memberof Text\n       * @static\n       * @param {IText=} [properties] Properties to set\n       * @returns {Text} Text instance\n       */\n      Text.create = function create(properties) {\n        return new Text(properties);\n      };\n\n      /**\n       * Encodes the specified Text message. Does not implicitly {@link Text.verify|verify} messages.\n       * @function encode\n       * @memberof Text\n       * @static\n       * @param {IText} message Text message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Text.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.data);\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.type);\n        return writer;\n      };\n\n      /**\n       * Decodes a Text message from the specified reader or buffer.\n       * @function decode\n       * @memberof Text\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Text} Text\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Text.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Text();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.data = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.type = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Text;\n    }();\n    $root.SystemMessage = function () {\n      /**\n       * Properties of a SystemMessage.\n       * @exports ISystemMessage\n       * @interface ISystemMessage\n       * @property {string|null} [data] SystemMessage data\n       */\n\n      /**\n       * Constructs a new SystemMessage.\n       * @exports SystemMessage\n       * @classdesc Represents a SystemMessage.\n       * @implements ISystemMessage\n       * @constructor\n       * @param {ISystemMessage=} [properties] Properties to set\n       */\n      function SystemMessage(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * SystemMessage data.\n       * @member {string} data\n       * @memberof SystemMessage\n       * @instance\n       */\n      SystemMessage.prototype.data = \"\";\n\n      /**\n       * Creates a new SystemMessage instance using the specified properties.\n       * @function create\n       * @memberof SystemMessage\n       * @static\n       * @param {ISystemMessage=} [properties] Properties to set\n       * @returns {SystemMessage} SystemMessage instance\n       */\n      SystemMessage.create = function create(properties) {\n        return new SystemMessage(properties);\n      };\n\n      /**\n       * Encodes the specified SystemMessage message. Does not implicitly {@link SystemMessage.verify|verify} messages.\n       * @function encode\n       * @memberof SystemMessage\n       * @static\n       * @param {ISystemMessage} message SystemMessage message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      SystemMessage.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.data);\n        return writer;\n      };\n\n      /**\n       * Decodes a SystemMessage message from the specified reader or buffer.\n       * @function decode\n       * @memberof SystemMessage\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {SystemMessage} SystemMessage\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      SystemMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.SystemMessage();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.data = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return SystemMessage;\n    }();\n    $root.Status = function () {\n      /**\n       * Properties of a Status.\n       * @exports IStatus\n       * @interface IStatus\n       * @property {number|null} [code] Status code\n       * @property {string|null} [description] Status description\n       * @property {string|null} [technicalDescription] Status technicalDescription\n       */\n\n      /**\n       * Constructs a new Status.\n       * @exports Status\n       * @classdesc Represents a Status.\n       * @implements IStatus\n       * @constructor\n       * @param {IStatus=} [properties] Properties to set\n       */\n      function Status(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Status code.\n       * @member {number} code\n       * @memberof Status\n       * @instance\n       */\n      Status.prototype.code = 0;\n\n      /**\n       * Status description.\n       * @member {string} description\n       * @memberof Status\n       * @instance\n       */\n      Status.prototype.description = \"\";\n\n      /**\n       * Status technicalDescription.\n       * @member {string} technicalDescription\n       * @memberof Status\n       * @instance\n       */\n      Status.prototype.technicalDescription = \"\";\n\n      /**\n       * Creates a new Status instance using the specified properties.\n       * @function create\n       * @memberof Status\n       * @static\n       * @param {IStatus=} [properties] Properties to set\n       * @returns {Status} Status instance\n       */\n      Status.create = function create(properties) {\n        return new Status(properties);\n      };\n\n      /**\n       * Encodes the specified Status message. Does not implicitly {@link Status.verify|verify} messages.\n       * @function encode\n       * @memberof Status\n       * @static\n       * @param {IStatus} message Status message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Status.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.code != null && Object.hasOwnProperty.call(message, \"code\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.code);\n        if (message.description != null && Object.hasOwnProperty.call(message, \"description\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.description);\n        if (message.technicalDescription != null && Object.hasOwnProperty.call(message, \"technicalDescription\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.technicalDescription);\n        return writer;\n      };\n\n      /**\n       * Decodes a Status message from the specified reader or buffer.\n       * @function decode\n       * @memberof Status\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Status} Status\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Status.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Status();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.code = reader.int32();\n                break;\n              }\n            case 2:\n              {\n                message.description = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.technicalDescription = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Status;\n    }();\n    $root.Bytes = function () {\n      /**\n       * Properties of a Bytes.\n       * @exports IBytes\n       * @interface IBytes\n       * @property {Uint8Array|null} [data] Bytes data\n       * @property {string|null} [desc] Bytes desc\n       */\n\n      /**\n       * Constructs a new Bytes.\n       * @exports Bytes\n       * @classdesc Represents a Bytes.\n       * @implements IBytes\n       * @constructor\n       * @param {IBytes=} [properties] Properties to set\n       */\n      function Bytes(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Bytes data.\n       * @member {Uint8Array} data\n       * @memberof Bytes\n       * @instance\n       */\n      Bytes.prototype.data = $util.newBuffer([]);\n\n      /**\n       * Bytes desc.\n       * @member {string} desc\n       * @memberof Bytes\n       * @instance\n       */\n      Bytes.prototype.desc = \"\";\n\n      /**\n       * Creates a new Bytes instance using the specified properties.\n       * @function create\n       * @memberof Bytes\n       * @static\n       * @param {IBytes=} [properties] Properties to set\n       * @returns {Bytes} Bytes instance\n       */\n      Bytes.create = function create(properties) {\n        return new Bytes(properties);\n      };\n\n      /**\n       * Encodes the specified Bytes message. Does not implicitly {@link Bytes.verify|verify} messages.\n       * @function encode\n       * @memberof Bytes\n       * @static\n       * @param {IBytes} message Bytes message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Bytes.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.data);\n        if (message.desc != null && Object.hasOwnProperty.call(message, \"desc\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.desc);\n        return writer;\n      };\n\n      /**\n       * Decodes a Bytes message from the specified reader or buffer.\n       * @function decode\n       * @memberof Bytes\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Bytes} Bytes\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Bytes.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Bytes();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.data = reader.bytes();\n                break;\n              }\n            case 2:\n              {\n                message.desc = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Bytes;\n    }();\n    $root.DevContext = function () {\n      /**\n       * Properties of a DevContext.\n       * @exports IDevContext\n       * @interface IDevContext\n       * @property {string|null} [name] DevContext name\n       * @property {number|Long|null} [timestampMs] DevContext timestampMs\n       * @property {string|null} [data] DevContext data\n       */\n\n      /**\n       * Constructs a new DevContext.\n       * @exports DevContext\n       * @classdesc Represents a DevContext.\n       * @implements IDevContext\n       * @constructor\n       * @param {IDevContext=} [properties] Properties to set\n       */\n      function DevContext(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * DevContext name.\n       * @member {string} name\n       * @memberof DevContext\n       * @instance\n       */\n      DevContext.prototype.name = \"\";\n\n      /**\n       * DevContext timestampMs.\n       * @member {number|Long} timestampMs\n       * @memberof DevContext\n       * @instance\n       */\n      DevContext.prototype.timestampMs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * DevContext data.\n       * @member {string} data\n       * @memberof DevContext\n       * @instance\n       */\n      DevContext.prototype.data = \"\";\n\n      /**\n       * Creates a new DevContext instance using the specified properties.\n       * @function create\n       * @memberof DevContext\n       * @static\n       * @param {IDevContext=} [properties] Properties to set\n       * @returns {DevContext} DevContext instance\n       */\n      DevContext.create = function create(properties) {\n        return new DevContext(properties);\n      };\n\n      /**\n       * Encodes the specified DevContext message. Does not implicitly {@link DevContext.verify|verify} messages.\n       * @function encode\n       * @memberof DevContext\n       * @static\n       * @param {IDevContext} message DevContext message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      DevContext.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name);\n        if (message.timestampMs != null && Object.hasOwnProperty.call(message, \"timestampMs\")) writer.uint32( /* id 2, wireType 0 =*/16).int64(message.timestampMs);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.data);\n        return writer;\n      };\n\n      /**\n       * Decodes a DevContext message from the specified reader or buffer.\n       * @function decode\n       * @memberof DevContext\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {DevContext} DevContext\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      DevContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.DevContext();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.name = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.timestampMs = reader.int64();\n                break;\n              }\n            case 3:\n              {\n                message.data = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return DevContext;\n    }();\n    $root.Cancel = function () {\n      /**\n       * Properties of a Cancel.\n       * @exports ICancel\n       * @interface ICancel\n       */\n\n      /**\n       * Constructs a new Cancel.\n       * @exports Cancel\n       * @classdesc Represents a Cancel.\n       * @implements ICancel\n       * @constructor\n       * @param {ICancel=} [properties] Properties to set\n       */\n      function Cancel(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Creates a new Cancel instance using the specified properties.\n       * @function create\n       * @memberof Cancel\n       * @static\n       * @param {ICancel=} [properties] Properties to set\n       * @returns {Cancel} Cancel instance\n       */\n      Cancel.create = function create(properties) {\n        return new Cancel(properties);\n      };\n\n      /**\n       * Encodes the specified Cancel message. Does not implicitly {@link Cancel.verify|verify} messages.\n       * @function encode\n       * @memberof Cancel\n       * @static\n       * @param {ICancel} message Cancel message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Cancel.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        return writer;\n      };\n\n      /**\n       * Decodes a Cancel message from the specified reader or buffer.\n       * @function decode\n       * @memberof Cancel\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Cancel} Cancel\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Cancel.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Cancel();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Cancel;\n    }();\n    $root.Mute = function () {\n      /**\n       * Properties of a Mute.\n       * @exports IMute\n       * @interface IMute\n       */\n\n      /**\n       * Constructs a new Mute.\n       * @exports Mute\n       * @classdesc Represents a Mute.\n       * @implements IMute\n       * @constructor\n       * @param {IMute=} [properties] Properties to set\n       */\n      function Mute(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Creates a new Mute instance using the specified properties.\n       * @function create\n       * @memberof Mute\n       * @static\n       * @param {IMute=} [properties] Properties to set\n       * @returns {Mute} Mute instance\n       */\n      Mute.create = function create(properties) {\n        return new Mute(properties);\n      };\n\n      /**\n       * Encodes the specified Mute message. Does not implicitly {@link Mute.verify|verify} messages.\n       * @function encode\n       * @memberof Mute\n       * @static\n       * @param {IMute} message Mute message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Mute.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        return writer;\n      };\n\n      /**\n       * Decodes a Mute message from the specified reader or buffer.\n       * @function decode\n       * @memberof Mute\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Mute} Mute\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Mute.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Mute();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Mute;\n    }();\n    $root.GetHistoryRequest = function () {\n      /**\n       * Properties of a GetHistoryRequest.\n       * @exports IGetHistoryRequest\n       * @interface IGetHistoryRequest\n       * @property {Array.<string>|null} [messageTypes] GetHistoryRequest messageTypes\n       * @property {IApp|null} [app] GetHistoryRequest app\n       * @property {IOffset|null} [offset] GetHistoryRequest offset\n       */\n\n      /**\n       * Constructs a new GetHistoryRequest.\n       * @exports GetHistoryRequest\n       * @classdesc Represents a GetHistoryRequest.\n       * @implements IGetHistoryRequest\n       * @constructor\n       * @param {IGetHistoryRequest=} [properties] Properties to set\n       */\n      function GetHistoryRequest(properties) {\n        this.messageTypes = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * GetHistoryRequest messageTypes.\n       * @member {Array.<string>} messageTypes\n       * @memberof GetHistoryRequest\n       * @instance\n       */\n      GetHistoryRequest.prototype.messageTypes = $util.emptyArray;\n\n      /**\n       * GetHistoryRequest app.\n       * @member {IApp|null|undefined} app\n       * @memberof GetHistoryRequest\n       * @instance\n       */\n      GetHistoryRequest.prototype.app = null;\n\n      /**\n       * GetHistoryRequest offset.\n       * @member {IOffset|null|undefined} offset\n       * @memberof GetHistoryRequest\n       * @instance\n       */\n      GetHistoryRequest.prototype.offset = null;\n\n      /**\n       * Creates a new GetHistoryRequest instance using the specified properties.\n       * @function create\n       * @memberof GetHistoryRequest\n       * @static\n       * @param {IGetHistoryRequest=} [properties] Properties to set\n       * @returns {GetHistoryRequest} GetHistoryRequest instance\n       */\n      GetHistoryRequest.create = function create(properties) {\n        return new GetHistoryRequest(properties);\n      };\n\n      /**\n       * Encodes the specified GetHistoryRequest message. Does not implicitly {@link GetHistoryRequest.verify|verify} messages.\n       * @function encode\n       * @memberof GetHistoryRequest\n       * @static\n       * @param {IGetHistoryRequest} message GetHistoryRequest message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      GetHistoryRequest.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.messageTypes != null && message.messageTypes.length) for (var i = 0; i < message.messageTypes.length; ++i) writer.uint32( /* id 1, wireType 2 =*/10).string(message.messageTypes[i]);\n        if (message.app != null && Object.hasOwnProperty.call(message, \"app\")) $root.App.encode(message.app, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.offset != null && Object.hasOwnProperty.call(message, \"offset\")) $root.Offset.encode(message.offset, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes a GetHistoryRequest message from the specified reader or buffer.\n       * @function decode\n       * @memberof GetHistoryRequest\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {GetHistoryRequest} GetHistoryRequest\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      GetHistoryRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.GetHistoryRequest();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                if (!(message.messageTypes && message.messageTypes.length)) message.messageTypes = [];\n                message.messageTypes.push(reader.string());\n                break;\n              }\n            case 2:\n              {\n                message.app = $root.App.decode(reader, reader.uint32());\n                break;\n              }\n            case 3:\n              {\n                message.offset = $root.Offset.decode(reader, reader.uint32());\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return GetHistoryRequest;\n    }();\n    $root.App = function () {\n      /**\n       * Properties of an App.\n       * @exports IApp\n       * @interface IApp\n       * @property {google.protobuf.IStringValue|null} [type] App type\n       * @property {google.protobuf.IStringValue|null} [projectId] App projectId\n       * @property {google.protobuf.IStringValue|null} [systemName] App systemName\n       */\n\n      /**\n       * Constructs a new App.\n       * @exports App\n       * @classdesc Represents an App.\n       * @implements IApp\n       * @constructor\n       * @param {IApp=} [properties] Properties to set\n       */\n      function App(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * App type.\n       * @member {google.protobuf.IStringValue|null|undefined} type\n       * @memberof App\n       * @instance\n       */\n      App.prototype.type = null;\n\n      /**\n       * App projectId.\n       * @member {google.protobuf.IStringValue|null|undefined} projectId\n       * @memberof App\n       * @instance\n       */\n      App.prototype.projectId = null;\n\n      /**\n       * App systemName.\n       * @member {google.protobuf.IStringValue|null|undefined} systemName\n       * @memberof App\n       * @instance\n       */\n      App.prototype.systemName = null;\n\n      /**\n       * Creates a new App instance using the specified properties.\n       * @function create\n       * @memberof App\n       * @static\n       * @param {IApp=} [properties] Properties to set\n       * @returns {App} App instance\n       */\n      App.create = function create(properties) {\n        return new App(properties);\n      };\n\n      /**\n       * Encodes the specified App message. Does not implicitly {@link App.verify|verify} messages.\n       * @function encode\n       * @memberof App\n       * @static\n       * @param {IApp} message App message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      App.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\")) $root.google.protobuf.StringValue.encode(message.type, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.projectId != null && Object.hasOwnProperty.call(message, \"projectId\")) $root.google.protobuf.StringValue.encode(message.projectId, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.systemName != null && Object.hasOwnProperty.call(message, \"systemName\")) $root.google.protobuf.StringValue.encode(message.systemName, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes an App message from the specified reader or buffer.\n       * @function decode\n       * @memberof App\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {App} App\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      App.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.App();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.type = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n                break;\n              }\n            case 2:\n              {\n                message.projectId = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n                break;\n              }\n            case 3:\n              {\n                message.systemName = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return App;\n    }();\n    $root.Offset = function () {\n      /**\n       * Properties of an Offset.\n       * @exports IOffset\n       * @interface IOffset\n       * @property {google.protobuf.IStringValue|null} [limit] Offset limit\n       * @property {google.protobuf.IStringValue|null} [contentId] Offset contentId\n       */\n\n      /**\n       * Constructs a new Offset.\n       * @exports Offset\n       * @classdesc Represents an Offset.\n       * @implements IOffset\n       * @constructor\n       * @param {IOffset=} [properties] Properties to set\n       */\n      function Offset(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Offset limit.\n       * @member {google.protobuf.IStringValue|null|undefined} limit\n       * @memberof Offset\n       * @instance\n       */\n      Offset.prototype.limit = null;\n\n      /**\n       * Offset contentId.\n       * @member {google.protobuf.IStringValue|null|undefined} contentId\n       * @memberof Offset\n       * @instance\n       */\n      Offset.prototype.contentId = null;\n\n      /**\n       * Creates a new Offset instance using the specified properties.\n       * @function create\n       * @memberof Offset\n       * @static\n       * @param {IOffset=} [properties] Properties to set\n       * @returns {Offset} Offset instance\n       */\n      Offset.create = function create(properties) {\n        return new Offset(properties);\n      };\n\n      /**\n       * Encodes the specified Offset message. Does not implicitly {@link Offset.verify|verify} messages.\n       * @function encode\n       * @memberof Offset\n       * @static\n       * @param {IOffset} message Offset message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Offset.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.limit != null && Object.hasOwnProperty.call(message, \"limit\")) $root.google.protobuf.StringValue.encode(message.limit, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.contentId != null && Object.hasOwnProperty.call(message, \"contentId\")) $root.google.protobuf.StringValue.encode(message.contentId, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes an Offset message from the specified reader or buffer.\n       * @function decode\n       * @memberof Offset\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Offset} Offset\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Offset.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Offset();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.limit = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n                break;\n              }\n            case 2:\n              {\n                message.contentId = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Offset;\n    }();\n    $root.ChatHistoryRequest = function () {\n      /**\n       * Properties of a ChatHistoryRequest.\n       * @exports IChatHistoryRequest\n       * @interface IChatHistoryRequest\n       * @property {IUuid|null} [uuid] ChatHistoryRequest uuid\n       * @property {IDevice|null} [device] ChatHistoryRequest device\n       * @property {IGetHistoryRequest|null} [getHistoryRequest] ChatHistoryRequest getHistoryRequest\n       */\n\n      /**\n       * Constructs a new ChatHistoryRequest.\n       * @exports ChatHistoryRequest\n       * @classdesc Represents a ChatHistoryRequest.\n       * @implements IChatHistoryRequest\n       * @constructor\n       * @param {IChatHistoryRequest=} [properties] Properties to set\n       */\n      function ChatHistoryRequest(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * ChatHistoryRequest uuid.\n       * @member {IUuid|null|undefined} uuid\n       * @memberof ChatHistoryRequest\n       * @instance\n       */\n      ChatHistoryRequest.prototype.uuid = null;\n\n      /**\n       * ChatHistoryRequest device.\n       * @member {IDevice|null|undefined} device\n       * @memberof ChatHistoryRequest\n       * @instance\n       */\n      ChatHistoryRequest.prototype.device = null;\n\n      /**\n       * ChatHistoryRequest getHistoryRequest.\n       * @member {IGetHistoryRequest|null|undefined} getHistoryRequest\n       * @memberof ChatHistoryRequest\n       * @instance\n       */\n      ChatHistoryRequest.prototype.getHistoryRequest = null;\n\n      /**\n       * Creates a new ChatHistoryRequest instance using the specified properties.\n       * @function create\n       * @memberof ChatHistoryRequest\n       * @static\n       * @param {IChatHistoryRequest=} [properties] Properties to set\n       * @returns {ChatHistoryRequest} ChatHistoryRequest instance\n       */\n      ChatHistoryRequest.create = function create(properties) {\n        return new ChatHistoryRequest(properties);\n      };\n\n      /**\n       * Encodes the specified ChatHistoryRequest message. Does not implicitly {@link ChatHistoryRequest.verify|verify} messages.\n       * @function encode\n       * @memberof ChatHistoryRequest\n       * @static\n       * @param {IChatHistoryRequest} message ChatHistoryRequest message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ChatHistoryRequest.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.uuid != null && Object.hasOwnProperty.call(message, \"uuid\")) $root.Uuid.encode(message.uuid, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.device != null && Object.hasOwnProperty.call(message, \"device\")) $root.Device.encode(message.device, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.getHistoryRequest != null && Object.hasOwnProperty.call(message, \"getHistoryRequest\")) $root.GetHistoryRequest.encode(message.getHistoryRequest, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes a ChatHistoryRequest message from the specified reader or buffer.\n       * @function decode\n       * @memberof ChatHistoryRequest\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {ChatHistoryRequest} ChatHistoryRequest\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ChatHistoryRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ChatHistoryRequest();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.uuid = $root.Uuid.decode(reader, reader.uint32());\n                break;\n              }\n            case 2:\n              {\n                message.device = $root.Device.decode(reader, reader.uint32());\n                break;\n              }\n            case 4:\n              {\n                message.getHistoryRequest = $root.GetHistoryRequest.decode(reader, reader.uint32());\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return ChatHistoryRequest;\n    }();\n    $root.Uuid = function () {\n      /**\n       * Properties of an Uuid.\n       * @exports IUuid\n       * @interface IUuid\n       * @property {string|null} [userId] Uuid userId\n       * @property {string|null} [userChannel] Uuid userChannel\n       * @property {string|null} [sub] Uuid sub\n       */\n\n      /**\n       * Constructs a new Uuid.\n       * @exports Uuid\n       * @classdesc Represents an Uuid.\n       * @implements IUuid\n       * @constructor\n       * @param {IUuid=} [properties] Properties to set\n       */\n      function Uuid(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Uuid userId.\n       * @member {string} userId\n       * @memberof Uuid\n       * @instance\n       */\n      Uuid.prototype.userId = \"\";\n\n      /**\n       * Uuid userChannel.\n       * @member {string} userChannel\n       * @memberof Uuid\n       * @instance\n       */\n      Uuid.prototype.userChannel = \"\";\n\n      /**\n       * Uuid sub.\n       * @member {string} sub\n       * @memberof Uuid\n       * @instance\n       */\n      Uuid.prototype.sub = \"\";\n\n      /**\n       * Creates a new Uuid instance using the specified properties.\n       * @function create\n       * @memberof Uuid\n       * @static\n       * @param {IUuid=} [properties] Properties to set\n       * @returns {Uuid} Uuid instance\n       */\n      Uuid.create = function create(properties) {\n        return new Uuid(properties);\n      };\n\n      /**\n       * Encodes the specified Uuid message. Does not implicitly {@link Uuid.verify|verify} messages.\n       * @function encode\n       * @memberof Uuid\n       * @static\n       * @param {IUuid} message Uuid message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Uuid.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.userChannel);\n        if (message.sub != null && Object.hasOwnProperty.call(message, \"sub\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.sub);\n        return writer;\n      };\n\n      /**\n       * Decodes an Uuid message from the specified reader or buffer.\n       * @function decode\n       * @memberof Uuid\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Uuid} Uuid\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Uuid.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Uuid();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.userId = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.userChannel = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.sub = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Uuid;\n    }();\n    $root.GetHistoryResponse = function () {\n      /**\n       * Properties of a GetHistoryResponse.\n       * @exports IGetHistoryResponse\n       * @interface IGetHistoryResponse\n       * @property {Array.<IHistoryMessages>|null} [historyMessages] GetHistoryResponse historyMessages\n       */\n\n      /**\n       * Constructs a new GetHistoryResponse.\n       * @exports GetHistoryResponse\n       * @classdesc Represents a GetHistoryResponse.\n       * @implements IGetHistoryResponse\n       * @constructor\n       * @param {IGetHistoryResponse=} [properties] Properties to set\n       */\n      function GetHistoryResponse(properties) {\n        this.historyMessages = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * GetHistoryResponse historyMessages.\n       * @member {Array.<IHistoryMessages>} historyMessages\n       * @memberof GetHistoryResponse\n       * @instance\n       */\n      GetHistoryResponse.prototype.historyMessages = $util.emptyArray;\n\n      /**\n       * Creates a new GetHistoryResponse instance using the specified properties.\n       * @function create\n       * @memberof GetHistoryResponse\n       * @static\n       * @param {IGetHistoryResponse=} [properties] Properties to set\n       * @returns {GetHistoryResponse} GetHistoryResponse instance\n       */\n      GetHistoryResponse.create = function create(properties) {\n        return new GetHistoryResponse(properties);\n      };\n\n      /**\n       * Encodes the specified GetHistoryResponse message. Does not implicitly {@link GetHistoryResponse.verify|verify} messages.\n       * @function encode\n       * @memberof GetHistoryResponse\n       * @static\n       * @param {IGetHistoryResponse} message GetHistoryResponse message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      GetHistoryResponse.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.historyMessages != null && message.historyMessages.length) for (var i = 0; i < message.historyMessages.length; ++i) $root.HistoryMessages.encode(message.historyMessages[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes a GetHistoryResponse message from the specified reader or buffer.\n       * @function decode\n       * @memberof GetHistoryResponse\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {GetHistoryResponse} GetHistoryResponse\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      GetHistoryResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.GetHistoryResponse();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                if (!(message.historyMessages && message.historyMessages.length)) message.historyMessages = [];\n                message.historyMessages.push($root.HistoryMessages.decode(reader, reader.uint32()));\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return GetHistoryResponse;\n    }();\n    $root.HistoryMessages = function () {\n      /**\n       * Properties of a HistoryMessages.\n       * @exports IHistoryMessages\n       * @interface IHistoryMessages\n       * @property {string|null} [content] HistoryMessages content\n       * @property {string|null} [contentId] HistoryMessages contentId\n       * @property {string|null} [timeCreated] HistoryMessages timeCreated\n       */\n\n      /**\n       * Constructs a new HistoryMessages.\n       * @exports HistoryMessages\n       * @classdesc Represents a HistoryMessages.\n       * @implements IHistoryMessages\n       * @constructor\n       * @param {IHistoryMessages=} [properties] Properties to set\n       */\n      function HistoryMessages(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * HistoryMessages content.\n       * @member {string} content\n       * @memberof HistoryMessages\n       * @instance\n       */\n      HistoryMessages.prototype.content = \"\";\n\n      /**\n       * HistoryMessages contentId.\n       * @member {string} contentId\n       * @memberof HistoryMessages\n       * @instance\n       */\n      HistoryMessages.prototype.contentId = \"\";\n\n      /**\n       * HistoryMessages timeCreated.\n       * @member {string} timeCreated\n       * @memberof HistoryMessages\n       * @instance\n       */\n      HistoryMessages.prototype.timeCreated = \"\";\n\n      /**\n       * Creates a new HistoryMessages instance using the specified properties.\n       * @function create\n       * @memberof HistoryMessages\n       * @static\n       * @param {IHistoryMessages=} [properties] Properties to set\n       * @returns {HistoryMessages} HistoryMessages instance\n       */\n      HistoryMessages.create = function create(properties) {\n        return new HistoryMessages(properties);\n      };\n\n      /**\n       * Encodes the specified HistoryMessages message. Does not implicitly {@link HistoryMessages.verify|verify} messages.\n       * @function encode\n       * @memberof HistoryMessages\n       * @static\n       * @param {IHistoryMessages} message HistoryMessages message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      HistoryMessages.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.content);\n        if (message.contentId != null && Object.hasOwnProperty.call(message, \"contentId\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.contentId);\n        if (message.timeCreated != null && Object.hasOwnProperty.call(message, \"timeCreated\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.timeCreated);\n        return writer;\n      };\n\n      /**\n       * Decodes a HistoryMessages message from the specified reader or buffer.\n       * @function decode\n       * @memberof HistoryMessages\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {HistoryMessages} HistoryMessages\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      HistoryMessages.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.HistoryMessages();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.content = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.contentId = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.timeCreated = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return HistoryMessages;\n    }();\n    $root.google = function () {\n      /**\n       * Namespace google.\n       * @exports google\n       * @namespace\n       */\n      var google = {};\n      google.protobuf = function () {\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        var protobuf = {};\n        protobuf.DoubleValue = function () {\n          /**\n           * Properties of a DoubleValue.\n           * @memberof google.protobuf\n           * @interface IDoubleValue\n           * @property {number|null} [value] DoubleValue value\n           */\n\n          /**\n           * Constructs a new DoubleValue.\n           * @memberof google.protobuf\n           * @classdesc Represents a DoubleValue.\n           * @implements IDoubleValue\n           * @constructor\n           * @param {google.protobuf.IDoubleValue=} [properties] Properties to set\n           */\n          function DoubleValue(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * DoubleValue value.\n           * @member {number} value\n           * @memberof google.protobuf.DoubleValue\n           * @instance\n           */\n          DoubleValue.prototype.value = 0;\n\n          /**\n           * Creates a new DoubleValue instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.DoubleValue\n           * @static\n           * @param {google.protobuf.IDoubleValue=} [properties] Properties to set\n           * @returns {google.protobuf.DoubleValue} DoubleValue instance\n           */\n          DoubleValue.create = function create(properties) {\n            return new DoubleValue(properties);\n          };\n\n          /**\n           * Encodes the specified DoubleValue message. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.DoubleValue\n           * @static\n           * @param {google.protobuf.IDoubleValue} message DoubleValue message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          DoubleValue.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 1 =*/9).double(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a DoubleValue message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.DoubleValue\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.DoubleValue} DoubleValue\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          DoubleValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.DoubleValue();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.double();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return DoubleValue;\n        }();\n        protobuf.FloatValue = function () {\n          /**\n           * Properties of a FloatValue.\n           * @memberof google.protobuf\n           * @interface IFloatValue\n           * @property {number|null} [value] FloatValue value\n           */\n\n          /**\n           * Constructs a new FloatValue.\n           * @memberof google.protobuf\n           * @classdesc Represents a FloatValue.\n           * @implements IFloatValue\n           * @constructor\n           * @param {google.protobuf.IFloatValue=} [properties] Properties to set\n           */\n          function FloatValue(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * FloatValue value.\n           * @member {number} value\n           * @memberof google.protobuf.FloatValue\n           * @instance\n           */\n          FloatValue.prototype.value = 0;\n\n          /**\n           * Creates a new FloatValue instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.FloatValue\n           * @static\n           * @param {google.protobuf.IFloatValue=} [properties] Properties to set\n           * @returns {google.protobuf.FloatValue} FloatValue instance\n           */\n          FloatValue.create = function create(properties) {\n            return new FloatValue(properties);\n          };\n\n          /**\n           * Encodes the specified FloatValue message. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.FloatValue\n           * @static\n           * @param {google.protobuf.IFloatValue} message FloatValue message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          FloatValue.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 5 =*/13).float(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a FloatValue message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.FloatValue\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.FloatValue} FloatValue\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          FloatValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.FloatValue();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.float();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return FloatValue;\n        }();\n        protobuf.Int64Value = function () {\n          /**\n           * Properties of an Int64Value.\n           * @memberof google.protobuf\n           * @interface IInt64Value\n           * @property {number|Long|null} [value] Int64Value value\n           */\n\n          /**\n           * Constructs a new Int64Value.\n           * @memberof google.protobuf\n           * @classdesc Represents an Int64Value.\n           * @implements IInt64Value\n           * @constructor\n           * @param {google.protobuf.IInt64Value=} [properties] Properties to set\n           */\n          function Int64Value(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * Int64Value value.\n           * @member {number|Long} value\n           * @memberof google.protobuf.Int64Value\n           * @instance\n           */\n          Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n          /**\n           * Creates a new Int64Value instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.Int64Value\n           * @static\n           * @param {google.protobuf.IInt64Value=} [properties] Properties to set\n           * @returns {google.protobuf.Int64Value} Int64Value instance\n           */\n          Int64Value.create = function create(properties) {\n            return new Int64Value(properties);\n          };\n\n          /**\n           * Encodes the specified Int64Value message. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.Int64Value\n           * @static\n           * @param {google.protobuf.IInt64Value} message Int64Value message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          Int64Value.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 0 =*/8).int64(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes an Int64Value message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.Int64Value\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.Int64Value} Int64Value\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          Int64Value.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.Int64Value();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.int64();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return Int64Value;\n        }();\n        protobuf.UInt64Value = function () {\n          /**\n           * Properties of a UInt64Value.\n           * @memberof google.protobuf\n           * @interface IUInt64Value\n           * @property {number|Long|null} [value] UInt64Value value\n           */\n\n          /**\n           * Constructs a new UInt64Value.\n           * @memberof google.protobuf\n           * @classdesc Represents a UInt64Value.\n           * @implements IUInt64Value\n           * @constructor\n           * @param {google.protobuf.IUInt64Value=} [properties] Properties to set\n           */\n          function UInt64Value(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * UInt64Value value.\n           * @member {number|Long} value\n           * @memberof google.protobuf.UInt64Value\n           * @instance\n           */\n          UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n          /**\n           * Creates a new UInt64Value instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.UInt64Value\n           * @static\n           * @param {google.protobuf.IUInt64Value=} [properties] Properties to set\n           * @returns {google.protobuf.UInt64Value} UInt64Value instance\n           */\n          UInt64Value.create = function create(properties) {\n            return new UInt64Value(properties);\n          };\n\n          /**\n           * Encodes the specified UInt64Value message. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.UInt64Value\n           * @static\n           * @param {google.protobuf.IUInt64Value} message UInt64Value message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          UInt64Value.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 0 =*/8).uint64(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a UInt64Value message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.UInt64Value\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.UInt64Value} UInt64Value\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          UInt64Value.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.UInt64Value();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.uint64();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return UInt64Value;\n        }();\n        protobuf.Int32Value = function () {\n          /**\n           * Properties of an Int32Value.\n           * @memberof google.protobuf\n           * @interface IInt32Value\n           * @property {number|null} [value] Int32Value value\n           */\n\n          /**\n           * Constructs a new Int32Value.\n           * @memberof google.protobuf\n           * @classdesc Represents an Int32Value.\n           * @implements IInt32Value\n           * @constructor\n           * @param {google.protobuf.IInt32Value=} [properties] Properties to set\n           */\n          function Int32Value(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * Int32Value value.\n           * @member {number} value\n           * @memberof google.protobuf.Int32Value\n           * @instance\n           */\n          Int32Value.prototype.value = 0;\n\n          /**\n           * Creates a new Int32Value instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.Int32Value\n           * @static\n           * @param {google.protobuf.IInt32Value=} [properties] Properties to set\n           * @returns {google.protobuf.Int32Value} Int32Value instance\n           */\n          Int32Value.create = function create(properties) {\n            return new Int32Value(properties);\n          };\n\n          /**\n           * Encodes the specified Int32Value message. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.Int32Value\n           * @static\n           * @param {google.protobuf.IInt32Value} message Int32Value message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          Int32Value.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes an Int32Value message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.Int32Value\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.Int32Value} Int32Value\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          Int32Value.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.Int32Value();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.int32();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return Int32Value;\n        }();\n        protobuf.UInt32Value = function () {\n          /**\n           * Properties of a UInt32Value.\n           * @memberof google.protobuf\n           * @interface IUInt32Value\n           * @property {number|null} [value] UInt32Value value\n           */\n\n          /**\n           * Constructs a new UInt32Value.\n           * @memberof google.protobuf\n           * @classdesc Represents a UInt32Value.\n           * @implements IUInt32Value\n           * @constructor\n           * @param {google.protobuf.IUInt32Value=} [properties] Properties to set\n           */\n          function UInt32Value(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * UInt32Value value.\n           * @member {number} value\n           * @memberof google.protobuf.UInt32Value\n           * @instance\n           */\n          UInt32Value.prototype.value = 0;\n\n          /**\n           * Creates a new UInt32Value instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.UInt32Value\n           * @static\n           * @param {google.protobuf.IUInt32Value=} [properties] Properties to set\n           * @returns {google.protobuf.UInt32Value} UInt32Value instance\n           */\n          UInt32Value.create = function create(properties) {\n            return new UInt32Value(properties);\n          };\n\n          /**\n           * Encodes the specified UInt32Value message. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.UInt32Value\n           * @static\n           * @param {google.protobuf.IUInt32Value} message UInt32Value message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          UInt32Value.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 0 =*/8).uint32(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a UInt32Value message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.UInt32Value\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.UInt32Value} UInt32Value\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          UInt32Value.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.UInt32Value();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.uint32();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return UInt32Value;\n        }();\n        protobuf.BoolValue = function () {\n          /**\n           * Properties of a BoolValue.\n           * @memberof google.protobuf\n           * @interface IBoolValue\n           * @property {boolean|null} [value] BoolValue value\n           */\n\n          /**\n           * Constructs a new BoolValue.\n           * @memberof google.protobuf\n           * @classdesc Represents a BoolValue.\n           * @implements IBoolValue\n           * @constructor\n           * @param {google.protobuf.IBoolValue=} [properties] Properties to set\n           */\n          function BoolValue(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * BoolValue value.\n           * @member {boolean} value\n           * @memberof google.protobuf.BoolValue\n           * @instance\n           */\n          BoolValue.prototype.value = false;\n\n          /**\n           * Creates a new BoolValue instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.BoolValue\n           * @static\n           * @param {google.protobuf.IBoolValue=} [properties] Properties to set\n           * @returns {google.protobuf.BoolValue} BoolValue instance\n           */\n          BoolValue.create = function create(properties) {\n            return new BoolValue(properties);\n          };\n\n          /**\n           * Encodes the specified BoolValue message. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.BoolValue\n           * @static\n           * @param {google.protobuf.IBoolValue} message BoolValue message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          BoolValue.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 0 =*/8).bool(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a BoolValue message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.BoolValue\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.BoolValue} BoolValue\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          BoolValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.BoolValue();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.bool();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return BoolValue;\n        }();\n        protobuf.StringValue = function () {\n          /**\n           * Properties of a StringValue.\n           * @memberof google.protobuf\n           * @interface IStringValue\n           * @property {string|null} [value] StringValue value\n           */\n\n          /**\n           * Constructs a new StringValue.\n           * @memberof google.protobuf\n           * @classdesc Represents a StringValue.\n           * @implements IStringValue\n           * @constructor\n           * @param {google.protobuf.IStringValue=} [properties] Properties to set\n           */\n          function StringValue(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * StringValue value.\n           * @member {string} value\n           * @memberof google.protobuf.StringValue\n           * @instance\n           */\n          StringValue.prototype.value = \"\";\n\n          /**\n           * Creates a new StringValue instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.StringValue\n           * @static\n           * @param {google.protobuf.IStringValue=} [properties] Properties to set\n           * @returns {google.protobuf.StringValue} StringValue instance\n           */\n          StringValue.create = function create(properties) {\n            return new StringValue(properties);\n          };\n\n          /**\n           * Encodes the specified StringValue message. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.StringValue\n           * @static\n           * @param {google.protobuf.IStringValue} message StringValue message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          StringValue.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a StringValue message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.StringValue\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.StringValue} StringValue\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          StringValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.StringValue();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.string();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return StringValue;\n        }();\n        protobuf.BytesValue = function () {\n          /**\n           * Properties of a BytesValue.\n           * @memberof google.protobuf\n           * @interface IBytesValue\n           * @property {Uint8Array|null} [value] BytesValue value\n           */\n\n          /**\n           * Constructs a new BytesValue.\n           * @memberof google.protobuf\n           * @classdesc Represents a BytesValue.\n           * @implements IBytesValue\n           * @constructor\n           * @param {google.protobuf.IBytesValue=} [properties] Properties to set\n           */\n          function BytesValue(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * BytesValue value.\n           * @member {Uint8Array} value\n           * @memberof google.protobuf.BytesValue\n           * @instance\n           */\n          BytesValue.prototype.value = $util.newBuffer([]);\n\n          /**\n           * Creates a new BytesValue instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.BytesValue\n           * @static\n           * @param {google.protobuf.IBytesValue=} [properties] Properties to set\n           * @returns {google.protobuf.BytesValue} BytesValue instance\n           */\n          BytesValue.create = function create(properties) {\n            return new BytesValue(properties);\n          };\n\n          /**\n           * Encodes the specified BytesValue message. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.BytesValue\n           * @static\n           * @param {google.protobuf.IBytesValue} message BytesValue message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          BytesValue.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a BytesValue message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.BytesValue\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.BytesValue} BytesValue\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          BytesValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.BytesValue();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.bytes();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return BytesValue;\n        }();\n        return protobuf;\n      }();\n      return google;\n    }();\n    return $root;\n  });\n})(proto);\nvar protoExports = proto.exports;\n\n// eslint-disable-next-line no-shadow\nvar VpsVersion;\n(function (VpsVersion) {\n  VpsVersion[VpsVersion[\"1.0\"] = 1] = \"1.0\";\n  VpsVersion[VpsVersion[\"2.0\"] = 2] = \"2.0\";\n  VpsVersion[VpsVersion[\"3.0\"] = 3] = \"3.0\";\n  VpsVersion[VpsVersion[\"4.0\"] = 4] = \"4.0\";\n  VpsVersion[VpsVersion[\"5.0\"] = 5] = \"5.0\";\n})(VpsVersion || (VpsVersion = {}));\nvar MessageNames = {\n  ANSWER_TO_USER: 'ANSWER_TO_USER',\n  STT: 'STT',\n  MTT: 'MUSIC_RECOGNITION',\n  DO_NOTHING: 'DO_NOTHING'\n};\nvar createClientMethods = function (_a) {\n  var getMessageId = _a.getMessageId,\n    sendMessage = _a.sendMessage;\n  var send = function (_a) {\n    var payload = _a.payload,\n      messageId = _a.messageId,\n      other = __rest(_a, [\"payload\", \"messageId\"]);\n    sendMessage(__assign(__assign(__assign({\n      messageName: ''\n    }, payload), {\n      messageId: messageId\n    }), other));\n  };\n  var sendDevice = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        device: protoExports.Device.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendInitialSettings = function (data, last, messageId, params) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    return send({\n      payload: __assign({\n        initialSettings: protoExports.InitialSettings.create(data),\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var getHistoryRequest = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    var uuid = data.uuid,\n      device = data.device,\n      historyClient = data.history;\n    var historyProto = {\n      messageTypes: historyClient === null || historyClient === void 0 ? void 0 : historyClient.messageTypes\n    };\n    // Мапим объект настроек от пользователя в формат объекта протобафа\n    if (historyClient === null || historyClient === void 0 ? void 0 : historyClient.app) {\n      historyProto.app = Object.entries(historyClient.app).reduce(function (acc, _a) {\n        var _b;\n        var key = _a[0],\n          value = _a[1];\n        return __assign(__assign({}, acc), (_b = {}, _b[key] = {\n          value: value\n        }, _b));\n      }, {});\n    }\n    if (historyClient === null || historyClient === void 0 ? void 0 : historyClient.offset) {\n      historyProto.offset = Object.entries(historyClient.offset).reduce(function (acc, _a) {\n        var _b;\n        var key = _a[0],\n          value = _a[1];\n        return __assign(__assign({}, acc), (_b = {}, _b[key] = {\n          value: value.toString()\n        }, _b));\n      }, {});\n    }\n    return send({\n      payload: __assign(__assign({}, protoExports.ChatHistoryRequest.create({\n        uuid: uuid,\n        device: device,\n        getHistoryRequest: historyProto\n      })), {\n        messageName: 'GET_HISTORY',\n        last: last ? 1 : -1\n      }),\n      messageId: messageId\n    });\n  };\n  var sendCancel = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        cancel: protoExports.Cancel.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendLegacyDevice = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        legacyDevice: protoExports.LegacyDevice.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendMute = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        mute: protoExports.Mute.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendSettings = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        settings: protoExports.Settings.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendText = function (data, params, type, messageId) {\n    var _a;\n    if (params === void 0) {\n      params = {};\n    }\n    if (type === void 0) {\n      type = '';\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    var text = type ? {\n      data: data,\n      type: type\n    } : {\n      data: data\n    };\n    send(__assign({\n      payload: {\n        text: protoExports.Text.create(text),\n        last: (_a = params.last) !== null && _a !== void 0 ? _a : 1\n      },\n      messageId: messageId\n    }, params));\n  };\n  var sendSystemMessage = function (_a, last, messageId, params) {\n    var data = _a.data,\n      _b = _a.messageName,\n      mesName = _b === void 0 ? '' : _b;\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    send({\n      payload: __assign({\n        systemMessage: protoExports.SystemMessage.create({\n          data: JSON.stringify(data)\n        }),\n        messageName: mesName,\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var sendVoice = function (data, last, messageId, mesName, params) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    return send({\n      payload: __assign({\n        voice: protoExports.Voice.create({\n          data: new Uint8Array(data)\n        }),\n        messageName: mesName,\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var batch = function (cb) {\n    var batchingMessageId = getMessageId();\n    var lastMessageSent = false;\n    var checkLastMessageStatus = function (last) {\n      if (lastMessageSent) {\n        if (last) {\n          throw new Error(\"Can't send two last items in batch\");\n        } else {\n          throw new Error(\"Can't send messages in batch after last message have been sent\");\n        }\n      } else if (last) {\n        lastMessageSent = true;\n      }\n    };\n    var upgradedSendText = function () {\n      var _a = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        _a[_i] = arguments[_i];\n      }\n      var data = _a[0],\n        params = _a[1],\n        type = _a[2];\n      checkLastMessageStatus((params === null || params === void 0 ? void 0 : params.last) === 1);\n      return sendText(data, params, type, batchingMessageId);\n    };\n    var upgradedSendSystemMessage = function (data, last, params) {\n      checkLastMessageStatus(last);\n      return sendSystemMessage(data, last, batchingMessageId, params);\n    };\n    var upgradedSendVoice = function (data, last, mesName, params) {\n      checkLastMessageStatus(last);\n      return sendVoice(data, last, batchingMessageId, mesName, params);\n    };\n    var upgradedSendSettings = function (data, last, messageId) {\n      checkLastMessageStatus(last);\n      return sendSettings(data, last, messageId);\n    };\n    return cb({\n      sendText: upgradedSendText,\n      sendSystemMessage: upgradedSendSystemMessage,\n      sendVoice: upgradedSendVoice,\n      sendSettings: upgradedSendSettings,\n      messageId: batchingMessageId\n    });\n  };\n  return {\n    sendDevice: sendDevice,\n    sendInitialSettings: sendInitialSettings,\n    getHistoryRequest: getHistoryRequest,\n    sendCancel: sendCancel,\n    sendLegacyDevice: sendLegacyDevice,\n    sendMute: sendMute,\n    sendSettings: sendSettings,\n    sendText: sendText,\n    sendSystemMessage: sendSystemMessage,\n    sendVoice: sendVoice,\n    batch: batch\n  };\n};\nvar safeJSONParse = function (str, defaultValue) {\n  try {\n    return JSON.parse(str);\n  } catch (err) {\n    return defaultValue;\n  }\n};\nvar compileBasePayload = function (_a) {\n  var userId = _a.userId,\n    token = _a.token,\n    userChannel = _a.userChannel,\n    version = _a.version,\n    messageName = _a.messageName,\n    vpsToken = _a.vpsToken;\n  if (version < 3) {\n    return {\n      userId: userId,\n      token: token,\n      userChannel: userChannel,\n      messageName: messageName,\n      vpsToken: vpsToken,\n      version: version\n    };\n  }\n  return {\n    token: token,\n    messageName: messageName,\n    version: version\n  };\n};\nvar appendHeader = function (uint8Array) {\n  // Добавляем 4 байта в начало с длинной сообщения\n  var arrayBuffer = new ArrayBuffer(4);\n  var dataView = new DataView(arrayBuffer, 0);\n  dataView.setInt32(0, uint8Array.length, true);\n  var newUint8Array = new Uint8Array(4 + uint8Array.length);\n  newUint8Array.set(new Uint8Array(arrayBuffer));\n  newUint8Array.set(uint8Array, 4);\n  return newUint8Array;\n};\nvar removeHeader = function (uint8Array) {\n  // Убираем 4 байта в начале с длинной сообщения\n  var newUint8Array = new Uint8Array(uint8Array).slice(4);\n  return newUint8Array;\n};\nvar createProtocol = function (transport, _a) {\n  var logger = _a.logger,\n    getToken = _a.getToken,\n    getInitialMeta = _a.getInitialMeta,\n    params = __rest(_a, [\"logger\", \"getToken\", \"getInitialMeta\"]);\n  var configuration = __assign(__assign({}, params), {\n    token: ''\n  });\n  var url = configuration.url,\n    userId = configuration.userId,\n    userChannel = configuration.userChannel,\n    locale = configuration.locale,\n    device = configuration.device,\n    settings = configuration.settings,\n    legacyDevice = configuration.legacyDevice,\n    version = configuration.version,\n    messageName = configuration.messageName,\n    vpsToken = configuration.vpsToken;\n  var basePayload = compileBasePayload({\n    userId: userId,\n    token: '',\n    messageName: messageName,\n    vpsToken: vpsToken,\n    userChannel: userChannel,\n    version: version\n  });\n  var _b = createNanoEvents(),\n    on = _b.on,\n    emit = _b.emit;\n  var subscriptions = [];\n  var messageQueue = [];\n  var initMessageId; // ид инициализационного сообщения, отправим мессаджи в неинициализированный протокол\n  var currentSettings = {\n    device: device,\n    legacyDevice: legacyDevice,\n    settings: settings,\n    locale: locale\n  };\n  var currentMessageId = Date.now();\n  var status = 'closed';\n  var destroyed = false;\n  var clearReadyTimer; // ид таймера установки состояния ready\n  var cancelUpdatingSettingsWhenSocketReady = function () {}; // отменяет обновление настроек VPS при готовности сокета\n  var getMessageId = function () {\n    return currentMessageId++;\n  };\n  var send = function (message) {\n    var createdMessage = protoExports.Message.create(__assign(__assign({}, basePayload), message));\n    logger === null || logger === void 0 ? void 0 : logger({\n      type: 'outcoming',\n      message: createdMessage\n    });\n    var encodedMessage = protoExports.Message.encode(createdMessage).finish();\n    var encodedMessageWithHeader = appendHeader(encodedMessage);\n    transport.send(encodedMessageWithHeader);\n    emit('outcoming', createdMessage);\n  };\n  var sendMessage = function (message) {\n    // отправляем инициализационные сообщения или все, когда сессия = ready\n    if (status === 'ready' || typeof initMessageId !== undefined && message.messageId === initMessageId) {\n      send(message);\n      return;\n    }\n    // накапливаем сообщения, отправим после успешного коннекта\n    messageQueue.push(message);\n    if (status === 'closed' && !destroyed) {\n      transport.open(url);\n    }\n  };\n  var _c = createClientMethods({\n      getMessageId: getMessageId,\n      sendMessage: sendMessage\n    }),\n    sendDeviceOriginal = _c.sendDevice,\n    sendInitialSettingsOriginal = _c.sendInitialSettings,\n    getHistoryRequestOriginal = _c.getHistoryRequest,\n    sendCancel = _c.sendCancel,\n    sendLegacyDeviceOriginal = _c.sendLegacyDevice,\n    sendMute = _c.sendMute,\n    sendSettingsOriginal = _c.sendSettings,\n    sendText = _c.sendText,\n    sendSystemMessage = _c.sendSystemMessage,\n    sendVoice = _c.sendVoice,\n    batch = _c.batch;\n  var sendDevice = function (data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    currentSettings = __assign(__assign({}, currentSettings), {\n      device: data\n    });\n    return sendDeviceOriginal.apply(void 0, __spreadArray([data], args));\n  };\n  var sendInitialSettings = function (data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    if (data.device && data.settings) {\n      currentSettings = __assign(__assign({}, currentSettings), {\n        device: data.device,\n        settings: data.settings,\n        locale: data.locale || undefined\n      });\n    }\n    return sendInitialSettingsOriginal.apply(void 0, __spreadArray([data], args));\n  };\n  var getHistoryRequest = function (data) {\n    var _a, _b;\n    if (data === void 0) {\n      data = {};\n    }\n    return getHistoryRequestOriginal({\n      device: currentSettings.device || null,\n      uuid: {\n        userId: ((_a = data.uuid) === null || _a === void 0 ? void 0 : _a.userId) || userId,\n        userChannel: ((_b = data.uuid) === null || _b === void 0 ? void 0 : _b.userChannel) || userChannel\n      },\n      history: __assign({}, data.history || {})\n    });\n  };\n  var sendLegacyDevice = function (data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    currentSettings = __assign(__assign({}, currentSettings), {\n      legacyDevice: data\n    });\n    return sendLegacyDeviceOriginal.apply(void 0, __spreadArray([data], args));\n  };\n  var updateDefaults = function (obj) {\n    Object.assign(basePayload, obj);\n    Object.assign(configuration, obj);\n  };\n  var updateDevice = function (obj) {\n    var _a, _b;\n    if (obj) {\n      var additionalInfo = obj.additionalInfo,\n        deviceOptions = __rest(obj, [\"additionalInfo\"]);\n      var oldInfo = ((_a = currentSettings.device) === null || _a === void 0 ? void 0 : _a.additionalInfo) ? safeJSONParse((_b = currentSettings.device) === null || _b === void 0 ? void 0 : _b.additionalInfo, {}) : {};\n      var newInfo = additionalInfo ? safeJSONParse(additionalInfo, {}) : {};\n      currentSettings.device = __assign(__assign(__assign({}, currentSettings.device), deviceOptions), {\n        additionalInfo: JSON.stringify(__assign(__assign({}, oldInfo), newInfo))\n      });\n    }\n  };\n  var updateSettings = function (obj) {\n    var isSocketReady = status === 'connected' || status === 'ready';\n    cancelUpdatingSettingsWhenSocketReady();\n    Object.assign(currentSettings.settings, obj);\n    if (!isSocketReady) {\n      cancelUpdatingSettingsWhenSocketReady = on('ready', function () {\n        return updateSettings(obj);\n      });\n      return;\n    }\n    sendSettingsOriginal(obj);\n  };\n  subscriptions.push(transport.on('connecting', function () {\n    status = 'connecting';\n  }));\n  subscriptions.push(transport.on('close', function () {\n    status = 'closed';\n  }));\n  subscriptions.push(transport.on('open', function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var _a, _b, _c, _d, e_1, meta, _e;\n      var _f;\n      var _g;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _h.trys.push([0, 3,, 4]);\n            _a = getToken;\n            if (!_a) return [3 /*break*/, 2];\n            _c = (_b = Object).assign;\n            _d = [basePayload];\n            _f = {};\n            return [4 /*yield*/, getToken()];\n          case 1:\n            _a = _c.apply(_b, _d.concat([(_f.token = _h.sent(), _f)]));\n            _h.label = 2;\n          case 2:\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _h.sent();\n            emit('error', {\n              type: 'GET_TOKEN_ERROR',\n              message: (_g = e_1) === null || _g === void 0 ? void 0 : _g.message\n            });\n            return [2 /*return*/];\n          case 4:\n            Object.assign(configuration, {\n              token: basePayload.token\n            });\n            initMessageId = getMessageId();\n            if (!(version < 3)) return [3 /*break*/, 5];\n            if (version === 1 && currentSettings.legacyDevice) {\n              sendLegacyDevice(currentSettings.legacyDevice, false, initMessageId);\n            } else if (version === 2 && currentSettings.device) {\n              sendDevice(currentSettings.device, false, initMessageId);\n            }\n            sendSettingsOriginal(currentSettings.settings, true, initMessageId);\n            return [3 /*break*/, 9];\n          case 5:\n            if (!getInitialMeta) return [3 /*break*/, 7];\n            return [4 /*yield*/, getInitialMeta()];\n          case 6:\n            _e = _h.sent();\n            return [3 /*break*/, 8];\n          case 7:\n            _e = undefined;\n            _h.label = 8;\n          case 8:\n            meta = _e;\n            sendInitialSettings({\n              userId: userId,\n              userChannel: userChannel,\n              device: currentSettings.device,\n              settings: currentSettings.settings,\n              locale: version > 3 ? currentSettings.locale : undefined\n            }, true, initMessageId, {\n              meta: meta\n            });\n            _h.label = 9;\n          case 9:\n            status = 'connected';\n            window.clearTimeout(clearReadyTimer);\n            /// считаем коннект = ready, если по истечении таймаута сокет не был разорван\n            /// т.к бек может разрывать сокет, если с settings что-то не так\n            clearReadyTimer = window.setTimeout(function () {\n              if (status !== 'connected') {\n                return;\n              }\n              while (messageQueue.length > 0) {\n                var message = messageQueue.shift();\n                if (message) {\n                  send(message);\n                }\n              }\n              status = 'ready';\n              emit('ready');\n            }, 250);\n            logger === null || logger === void 0 ? void 0 : logger({\n              type: 'init',\n              params: __assign(__assign({}, configuration), currentSettings)\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  }));\n\n  subscriptions.push(transport.on('message', function (message) {\n    var decodedMessage = protoExports.Message.decode(removeHeader(message));\n    logger === null || logger === void 0 ? void 0 : logger({\n      type: 'incoming',\n      message: decodedMessage\n    });\n    emit('incoming', decodedMessage);\n    if (decodedMessage.status) {\n      transport.close();\n    }\n  }));\n  return {\n    clearQueue: function () {\n      messageQueue.splice(0, messageQueue.length);\n    },\n    destroy: function () {\n      destroyed = true;\n      transport.close();\n      subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) {\n        return unsubscribe();\n      });\n    },\n    on: on,\n    getHistoryRequest: getHistoryRequest,\n    getMessageId: getMessageId,\n    sendCancel: sendCancel,\n    sendMute: sendMute,\n    sendText: sendText,\n    sendSystemMessage: sendSystemMessage,\n    sendVoice: sendVoice,\n    send: sendMessage,\n    batch: batch,\n    changeConfiguration: updateDefaults,\n    changeDevice: updateDevice,\n    changeSettings: updateSettings,\n    reconnect: function () {\n      if (status !== 'closed') {\n        transport.reconnect(url); // даем время случиться close\n      } else {\n        transport.open(url);\n      }\n    },\n    init: function () {\n      // в отличии от reconnect не обрывает коннект если он в порядке\n      if (status === 'ready' && window.navigator.onLine) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        var subs = [];\n        subs.push(on('ready', function () {\n          subs.map(function (sub) {\n            return sub();\n          });\n          resolve();\n        }));\n        subs.push(transport.on('error', function () {\n          subs.map(function (sub) {\n            return sub();\n          });\n          reject(new Error('Network error'));\n        }));\n        transport.reconnect(url);\n      });\n    },\n    get currentMessageId() {\n      return currentMessageId;\n    },\n    get configuration() {\n      return configuration;\n    },\n    get status() {\n      return status;\n    }\n  };\n};\nexport { MessageNames as M, VpsVersion as V, appendHeader as a, commonjsRequire as b, commonjsGlobal as c, createProtocol as d, getDefaultExportFromCjs as g, protoExports as p, requireMinimal as r };","map":{"version":3,"names":["_","__assign","a","__rest","b","__awaiter","c","__generator","d","createNanoEvents","e","__spreadArray","commonjsGlobal","globalThis","window","global","self","getDefaultExportFromCjs","x","__esModule","Object","prototype","hasOwnProperty","call","commonjsRequire","path","Error","proto","exports","indexMinimal","minimal$1","aspromise","hasRequiredAspromise","requireAspromise","asPromise","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","executor","resolve","reject","callback","err","apply","base64","hasRequiredBase64","requireBase64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","parts","chunk","j","t","push","String","fromCharCode","slice","join","invalidEncoding","decode","charCodeAt","undefined","test","eventemitter","hasRequiredEventemitter","requireEventemitter","EventEmitter","_listeners","on","evt","off","listeners","splice","emit","args","float","hasRequiredFloat","requireFloat","factory","Float32Array","f32","f8b","Uint8Array","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","writeFloatLE","writeFloatBE","readFloat_f32_cpy","readFloat_f32_rev","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","log","LN2","mantissa","pow","bind","writeUintLE","writeUintBE","readFloat_ieee754","readUint","uint","NaN","Infinity","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDouble_f64_cpy","readDouble_f64_rev","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire_1","hasRequiredInquire","requireInquire","inquire","moduleName","mod","eval","replace","keys","utf8","hasRequiredUtf8","requireUtf8","utf8_length","len","read","utf8_read","write","utf8_write","c1","c2","pool_1","hasRequiredPool","requirePool","pool","alloc","size","SIZE","MAX","slab","pool_alloc","longbits","hasRequiredLongbits","requireLongbits","LongBits","util","requireMinimal$1","zero","toNumber","zzEncode","zzDecode","zeroHash","fromNumber","value","from","isString","Long","fromString","parseInt","low","high","unsigned","toLong","Boolean","fromHash","hash","toHash","mask","part0","part1","part2","hasRequiredMinimal$1","isNode","process","versions","node","emptyArray","freeze","emptyObject","isInteger","Number","isFinite","isObject","isset","isSet","obj","prop","isArray","Buffer","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","bits","fromBits","merge","dst","src","ifNotSet","lcFirst","str","toLowerCase","substring","newError","name","CustomError","message","properties","defineProperty","get","captureStackTrace","stack","create","constructor","writable","enumerable","configurable","set","toString","ProtocolError","oneOfGetter","getOneOf","fieldNames","fieldMap","oneOfSetter","setOneOf","toJSONOptions","longs","enums","bytes","json","_configure","Buffer_from","encoding","allocUnsafe","Buffer_allocUnsafe","writer","hasRequiredWriter","requireWriter","Writer","BufferWriter","Op","next","noop","State","head","tail","states","create_buffer_setup","create_buffer","create_array","subarray","_push","writeByte","writeVarint32","VarintOp","uint32","write_uint32","int32","write_int32","writeVarint64","sint32","write_sint32","uint64","write_uint64","int64","sint64","write_sint64","bool","write_bool","writeFixed32","fixed32","write_fixed32","sfixed32","fixed64","write_fixed64","sfixed64","write_float","double","write_double","writeBytes","writeBytes_set","writeBytes_for","write_bytes","write_string","fork","reset","ldelim","finish","BufferWriter_","writer_buffer","hasRequiredWriter_buffer","requireWriter_buffer","writeBytesBuffer","writeBytesBuffer_set","writeBytesBuffer_copy","copy","write_bytes_buffer","writeStringBuffer","write_string_buffer","byteLength","reader","hasRequiredReader","requireReader","Reader","BufferReader","indexOutOfRange","writeLength","RangeError","create_typed_array","isBuffer","_slice","read_uint32_setup","read_uint32","read_int32","read_sint32","readLongVarint","read_bool","readFixed32_end","read_fixed32","read_sfixed32","readFixed64","read_float","read_double","read_bytes","read_string","skip","skipType","wireType","BufferReader_","read_int64","read_uint64","read_sint64","read_fixed64","read_sfixed64","reader_buffer","hasRequiredReader_buffer","requireReader_buffer","read_string_buffer","utf8Slice","min","rpc","service","hasRequiredService","requireService","Service","rpcImpl","requestDelimited","responseDelimited","TypeError","rpcCall","method","requestCtor","responseCtor","request","setTimeout","rpcCallback","response","endedByRPC","hasRequiredRpc","requireRpc","roots","hasRequiredRoots","requireRoots","hasRequiredIndexMinimal","requireIndexMinimal","protobuf","build","configure","minimal","hasRequiredMinimal","requireMinimal","module","$protobuf","$Reader","$Writer","$util","$root","Message","devContext","meta","userId","messageId","last","token","userChannel","vpsToken","messageName","version","voice","text","systemMessage","legacyDevice","settings","status","device","initialSettings","cancel","getHistoryRequest","mute","timestamp","$oneOfFields","Voice","Text","SystemMessage","LegacyDevice","Settings","Status","DevContext","Device","Bytes","InitialSettings","Cancel","GetHistoryRequest","Mute","key","tag","end2","tag2","locale","platformType","platformVersion","surface","surfaceVersion","features","capabilities","deviceId","deviceManufacturer","deviceModel","additionalInfo","tenant","dubbing","echo","ttsEngine","asrEngine","asrAutoStop","devMode","authConnector","clientType","channel","channelVersion","platformName","sdkVersion","protocolVersion","data","type","code","description","technicalDescription","desc","timestampMs","messageTypes","app","App","Offset","projectId","systemName","google","StringValue","limit","contentId","ChatHistoryRequest","uuid","Uuid","sub","GetHistoryResponse","historyMessages","HistoryMessages","content","timeCreated","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","BytesValue","protoExports","VpsVersion","MessageNames","ANSWER_TO_USER","STT","MTT","DO_NOTHING","createClientMethods","_a","getMessageId","sendMessage","send","payload","other","sendDevice","sendInitialSettings","historyClient","history","historyProto","entries","reduce","acc","_b","sendCancel","sendLegacyDevice","sendMute","sendSettings","sendText","sendSystemMessage","mesName","JSON","stringify","sendVoice","batch","cb","batchingMessageId","lastMessageSent","checkLastMessageStatus","upgradedSendText","_i","upgradedSendSystemMessage","upgradedSendVoice","upgradedSendSettings","safeJSONParse","defaultValue","parse","compileBasePayload","appendHeader","uint8Array","arrayBuffer","ArrayBuffer","dataView","DataView","setInt32","newUint8Array","removeHeader","createProtocol","transport","logger","getToken","getInitialMeta","configuration","url","basePayload","subscriptions","messageQueue","initMessageId","currentSettings","currentMessageId","Date","now","destroyed","clearReadyTimer","cancelUpdatingSettingsWhenSocketReady","createdMessage","encodedMessage","encodedMessageWithHeader","open","_c","sendDeviceOriginal","sendInitialSettingsOriginal","getHistoryRequestOriginal","sendLegacyDeviceOriginal","sendSettingsOriginal","updateDefaults","assign","updateDevice","deviceOptions","oldInfo","newInfo","updateSettings","isSocketReady","_d","e_1","_e","_f","_g","_h","label","trys","concat","sent","clearTimeout","shift","decodedMessage","close","clearQueue","destroy","map","unsubscribe","changeConfiguration","changeDevice","changeSettings","reconnect","init","navigator","onLine","subs","M","V","g","r"],"sources":["/Users/egor/Documents/GitHub/todo-canvas-app/node_modules/@salutejs/client/esm/sdk-082d96e7.js"],"sourcesContent":["import { _ as __assign, a as __rest, b as __awaiter, c as __generator, d as createNanoEvents, e as __spreadArray } from './common-ba25e019.js';\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction commonjsRequire(path) {\n\tthrow new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\n\nvar proto = {exports: {}};\n\nvar indexMinimal = {};\n\nvar minimal$1 = {};\n\nvar aspromise;\nvar hasRequiredAspromise;\n\nfunction requireAspromise () {\n\tif (hasRequiredAspromise) return aspromise;\n\thasRequiredAspromise = 1;\n\taspromise = asPromise;\r\n\r\n\t/**\r\n\t * Callback as used by {@link util.asPromise}.\r\n\t * @typedef asPromiseCallback\r\n\t * @type {function}\r\n\t * @param {Error|null} error Error, if any\r\n\t * @param {...*} params Additional arguments\r\n\t * @returns {undefined}\r\n\t */\r\n\r\n\t/**\r\n\t * Returns a promise from a node-style callback function.\r\n\t * @memberof util\r\n\t * @param {asPromiseCallback} fn Function to call\r\n\t * @param {*} ctx Function context\r\n\t * @param {...*} params Function arguments\r\n\t * @returns {Promise<*>} Promisified function\r\n\t */\r\n\tfunction asPromise(fn, ctx/*, varargs */) {\r\n\t    var params  = new Array(arguments.length - 1),\r\n\t        offset  = 0,\r\n\t        index   = 2,\r\n\t        pending = true;\r\n\t    while (index < arguments.length)\r\n\t        params[offset++] = arguments[index++];\r\n\t    return new Promise(function executor(resolve, reject) {\r\n\t        params[offset] = function callback(err/*, varargs */) {\r\n\t            if (pending) {\r\n\t                pending = false;\r\n\t                if (err)\r\n\t                    reject(err);\r\n\t                else {\r\n\t                    var params = new Array(arguments.length - 1),\r\n\t                        offset = 0;\r\n\t                    while (offset < params.length)\r\n\t                        params[offset++] = arguments[offset];\r\n\t                    resolve.apply(null, params);\r\n\t                }\r\n\t            }\r\n\t        };\r\n\t        try {\r\n\t            fn.apply(ctx || null, params);\r\n\t        } catch (err) {\r\n\t            if (pending) {\r\n\t                pending = false;\r\n\t                reject(err);\r\n\t            }\r\n\t        }\r\n\t    });\r\n\t}\n\treturn aspromise;\n}\n\nvar base64 = {};\n\nvar hasRequiredBase64;\n\nfunction requireBase64 () {\n\tif (hasRequiredBase64) return base64;\n\thasRequiredBase64 = 1;\n\t(function (exports) {\n\r\n\t\t/**\r\n\t\t * A minimal base64 implementation for number arrays.\r\n\t\t * @memberof util\r\n\t\t * @namespace\r\n\t\t */\r\n\t\tvar base64 = exports;\r\n\r\n\t\t/**\r\n\t\t * Calculates the byte length of a base64 encoded string.\r\n\t\t * @param {string} string Base64 encoded string\r\n\t\t * @returns {number} Byte length\r\n\t\t */\r\n\t\tbase64.length = function length(string) {\r\n\t\t    var p = string.length;\r\n\t\t    if (!p)\r\n\t\t        return 0;\r\n\t\t    var n = 0;\r\n\t\t    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n\t\t        ++n;\r\n\t\t    return Math.ceil(string.length * 3) / 4 - n;\r\n\t\t};\r\n\r\n\t\t// Base64 encoding table\r\n\t\tvar b64 = new Array(64);\r\n\r\n\t\t// Base64 decoding table\r\n\t\tvar s64 = new Array(123);\r\n\r\n\t\t// 65..90, 97..122, 48..57, 43, 47\r\n\t\tfor (var i = 0; i < 64;)\r\n\t\t    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n\t\t/**\r\n\t\t * Encodes a buffer to a base64 encoded string.\r\n\t\t * @param {Uint8Array} buffer Source buffer\r\n\t\t * @param {number} start Source start\r\n\t\t * @param {number} end Source end\r\n\t\t * @returns {string} Base64 encoded string\r\n\t\t */\r\n\t\tbase64.encode = function encode(buffer, start, end) {\r\n\t\t    var parts = null,\r\n\t\t        chunk = [];\r\n\t\t    var i = 0, // output index\r\n\t\t        j = 0, // goto index\r\n\t\t        t;     // temporary\r\n\t\t    while (start < end) {\r\n\t\t        var b = buffer[start++];\r\n\t\t        switch (j) {\r\n\t\t            case 0:\r\n\t\t                chunk[i++] = b64[b >> 2];\r\n\t\t                t = (b & 3) << 4;\r\n\t\t                j = 1;\r\n\t\t                break;\r\n\t\t            case 1:\r\n\t\t                chunk[i++] = b64[t | b >> 4];\r\n\t\t                t = (b & 15) << 2;\r\n\t\t                j = 2;\r\n\t\t                break;\r\n\t\t            case 2:\r\n\t\t                chunk[i++] = b64[t | b >> 6];\r\n\t\t                chunk[i++] = b64[b & 63];\r\n\t\t                j = 0;\r\n\t\t                break;\r\n\t\t        }\r\n\t\t        if (i > 8191) {\r\n\t\t            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n\t\t            i = 0;\r\n\t\t        }\r\n\t\t    }\r\n\t\t    if (j) {\r\n\t\t        chunk[i++] = b64[t];\r\n\t\t        chunk[i++] = 61;\r\n\t\t        if (j === 1)\r\n\t\t            chunk[i++] = 61;\r\n\t\t    }\r\n\t\t    if (parts) {\r\n\t\t        if (i)\r\n\t\t            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n\t\t        return parts.join(\"\");\r\n\t\t    }\r\n\t\t    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n\t\t};\r\n\r\n\t\tvar invalidEncoding = \"invalid encoding\";\r\n\r\n\t\t/**\r\n\t\t * Decodes a base64 encoded string to a buffer.\r\n\t\t * @param {string} string Source string\r\n\t\t * @param {Uint8Array} buffer Destination buffer\r\n\t\t * @param {number} offset Destination offset\r\n\t\t * @returns {number} Number of bytes written\r\n\t\t * @throws {Error} If encoding is invalid\r\n\t\t */\r\n\t\tbase64.decode = function decode(string, buffer, offset) {\r\n\t\t    var start = offset;\r\n\t\t    var j = 0, // goto index\r\n\t\t        t;     // temporary\r\n\t\t    for (var i = 0; i < string.length;) {\r\n\t\t        var c = string.charCodeAt(i++);\r\n\t\t        if (c === 61 && j > 1)\r\n\t\t            break;\r\n\t\t        if ((c = s64[c]) === undefined)\r\n\t\t            throw Error(invalidEncoding);\r\n\t\t        switch (j) {\r\n\t\t            case 0:\r\n\t\t                t = c;\r\n\t\t                j = 1;\r\n\t\t                break;\r\n\t\t            case 1:\r\n\t\t                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n\t\t                t = c;\r\n\t\t                j = 2;\r\n\t\t                break;\r\n\t\t            case 2:\r\n\t\t                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n\t\t                t = c;\r\n\t\t                j = 3;\r\n\t\t                break;\r\n\t\t            case 3:\r\n\t\t                buffer[offset++] = (t & 3) << 6 | c;\r\n\t\t                j = 0;\r\n\t\t                break;\r\n\t\t        }\r\n\t\t    }\r\n\t\t    if (j === 1)\r\n\t\t        throw Error(invalidEncoding);\r\n\t\t    return offset - start;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if the specified string appears to be base64 encoded.\r\n\t\t * @param {string} string String to test\r\n\t\t * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n\t\t */\r\n\t\tbase64.test = function test(string) {\r\n\t\t    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n\t\t}; \n\t} (base64));\n\treturn base64;\n}\n\nvar eventemitter;\nvar hasRequiredEventemitter;\n\nfunction requireEventemitter () {\n\tif (hasRequiredEventemitter) return eventemitter;\n\thasRequiredEventemitter = 1;\n\teventemitter = EventEmitter;\r\n\r\n\t/**\r\n\t * Constructs a new event emitter instance.\r\n\t * @classdesc A minimal event emitter.\r\n\t * @memberof util\r\n\t * @constructor\r\n\t */\r\n\tfunction EventEmitter() {\r\n\r\n\t    /**\r\n\t     * Registered listeners.\r\n\t     * @type {Object.<string,*>}\r\n\t     * @private\r\n\t     */\r\n\t    this._listeners = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Registers an event listener.\r\n\t * @param {string} evt Event name\r\n\t * @param {function} fn Listener\r\n\t * @param {*} [ctx] Listener context\r\n\t * @returns {util.EventEmitter} `this`\r\n\t */\r\n\tEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n\t    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n\t        fn  : fn,\r\n\t        ctx : ctx || this\r\n\t    });\r\n\t    return this;\r\n\t};\r\n\r\n\t/**\r\n\t * Removes an event listener or any matching listeners if arguments are omitted.\r\n\t * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n\t * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n\t * @returns {util.EventEmitter} `this`\r\n\t */\r\n\tEventEmitter.prototype.off = function off(evt, fn) {\r\n\t    if (evt === undefined)\r\n\t        this._listeners = {};\r\n\t    else {\r\n\t        if (fn === undefined)\r\n\t            this._listeners[evt] = [];\r\n\t        else {\r\n\t            var listeners = this._listeners[evt];\r\n\t            for (var i = 0; i < listeners.length;)\r\n\t                if (listeners[i].fn === fn)\r\n\t                    listeners.splice(i, 1);\r\n\t                else\r\n\t                    ++i;\r\n\t        }\r\n\t    }\r\n\t    return this;\r\n\t};\r\n\r\n\t/**\r\n\t * Emits an event by calling its listeners with the specified arguments.\r\n\t * @param {string} evt Event name\r\n\t * @param {...*} args Arguments\r\n\t * @returns {util.EventEmitter} `this`\r\n\t */\r\n\tEventEmitter.prototype.emit = function emit(evt) {\r\n\t    var listeners = this._listeners[evt];\r\n\t    if (listeners) {\r\n\t        var args = [],\r\n\t            i = 1;\r\n\t        for (; i < arguments.length;)\r\n\t            args.push(arguments[i++]);\r\n\t        for (i = 0; i < listeners.length;)\r\n\t            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n\t    }\r\n\t    return this;\r\n\t};\n\treturn eventemitter;\n}\n\nvar float;\nvar hasRequiredFloat;\n\nfunction requireFloat () {\n\tif (hasRequiredFloat) return float;\n\thasRequiredFloat = 1;\n\r\n\tfloat = factory(factory);\r\n\r\n\t/**\r\n\t * Reads / writes floats / doubles from / to buffers.\r\n\t * @name util.float\r\n\t * @namespace\r\n\t */\r\n\r\n\t/**\r\n\t * Writes a 32 bit float to a buffer using little endian byte order.\r\n\t * @name util.float.writeFloatLE\r\n\t * @function\r\n\t * @param {number} val Value to write\r\n\t * @param {Uint8Array} buf Target buffer\r\n\t * @param {number} pos Target buffer offset\r\n\t * @returns {undefined}\r\n\t */\r\n\r\n\t/**\r\n\t * Writes a 32 bit float to a buffer using big endian byte order.\r\n\t * @name util.float.writeFloatBE\r\n\t * @function\r\n\t * @param {number} val Value to write\r\n\t * @param {Uint8Array} buf Target buffer\r\n\t * @param {number} pos Target buffer offset\r\n\t * @returns {undefined}\r\n\t */\r\n\r\n\t/**\r\n\t * Reads a 32 bit float from a buffer using little endian byte order.\r\n\t * @name util.float.readFloatLE\r\n\t * @function\r\n\t * @param {Uint8Array} buf Source buffer\r\n\t * @param {number} pos Source buffer offset\r\n\t * @returns {number} Value read\r\n\t */\r\n\r\n\t/**\r\n\t * Reads a 32 bit float from a buffer using big endian byte order.\r\n\t * @name util.float.readFloatBE\r\n\t * @function\r\n\t * @param {Uint8Array} buf Source buffer\r\n\t * @param {number} pos Source buffer offset\r\n\t * @returns {number} Value read\r\n\t */\r\n\r\n\t/**\r\n\t * Writes a 64 bit double to a buffer using little endian byte order.\r\n\t * @name util.float.writeDoubleLE\r\n\t * @function\r\n\t * @param {number} val Value to write\r\n\t * @param {Uint8Array} buf Target buffer\r\n\t * @param {number} pos Target buffer offset\r\n\t * @returns {undefined}\r\n\t */\r\n\r\n\t/**\r\n\t * Writes a 64 bit double to a buffer using big endian byte order.\r\n\t * @name util.float.writeDoubleBE\r\n\t * @function\r\n\t * @param {number} val Value to write\r\n\t * @param {Uint8Array} buf Target buffer\r\n\t * @param {number} pos Target buffer offset\r\n\t * @returns {undefined}\r\n\t */\r\n\r\n\t/**\r\n\t * Reads a 64 bit double from a buffer using little endian byte order.\r\n\t * @name util.float.readDoubleLE\r\n\t * @function\r\n\t * @param {Uint8Array} buf Source buffer\r\n\t * @param {number} pos Source buffer offset\r\n\t * @returns {number} Value read\r\n\t */\r\n\r\n\t/**\r\n\t * Reads a 64 bit double from a buffer using big endian byte order.\r\n\t * @name util.float.readDoubleBE\r\n\t * @function\r\n\t * @param {Uint8Array} buf Source buffer\r\n\t * @param {number} pos Source buffer offset\r\n\t * @returns {number} Value read\r\n\t */\r\n\r\n\t// Factory function for the purpose of node-based testing in modified global environments\r\n\tfunction factory(exports) {\r\n\r\n\t    // float: typed array\r\n\t    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n\t        var f32 = new Float32Array([ -0 ]),\r\n\t            f8b = new Uint8Array(f32.buffer),\r\n\t            le  = f8b[3] === 128;\r\n\r\n\t        function writeFloat_f32_cpy(val, buf, pos) {\r\n\t            f32[0] = val;\r\n\t            buf[pos    ] = f8b[0];\r\n\t            buf[pos + 1] = f8b[1];\r\n\t            buf[pos + 2] = f8b[2];\r\n\t            buf[pos + 3] = f8b[3];\r\n\t        }\r\n\r\n\t        function writeFloat_f32_rev(val, buf, pos) {\r\n\t            f32[0] = val;\r\n\t            buf[pos    ] = f8b[3];\r\n\t            buf[pos + 1] = f8b[2];\r\n\t            buf[pos + 2] = f8b[1];\r\n\t            buf[pos + 3] = f8b[0];\r\n\t        }\r\n\r\n\t        /* istanbul ignore next */\r\n\t        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n\t        /* istanbul ignore next */\r\n\t        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n\t        function readFloat_f32_cpy(buf, pos) {\r\n\t            f8b[0] = buf[pos    ];\r\n\t            f8b[1] = buf[pos + 1];\r\n\t            f8b[2] = buf[pos + 2];\r\n\t            f8b[3] = buf[pos + 3];\r\n\t            return f32[0];\r\n\t        }\r\n\r\n\t        function readFloat_f32_rev(buf, pos) {\r\n\t            f8b[3] = buf[pos    ];\r\n\t            f8b[2] = buf[pos + 1];\r\n\t            f8b[1] = buf[pos + 2];\r\n\t            f8b[0] = buf[pos + 3];\r\n\t            return f32[0];\r\n\t        }\r\n\r\n\t        /* istanbul ignore next */\r\n\t        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n\t        /* istanbul ignore next */\r\n\t        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n\t    // float: ieee754\r\n\t    })(); else (function() {\r\n\r\n\t        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n\t            var sign = val < 0 ? 1 : 0;\r\n\t            if (sign)\r\n\t                val = -val;\r\n\t            if (val === 0)\r\n\t                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n\t            else if (isNaN(val))\r\n\t                writeUint(2143289344, buf, pos);\r\n\t            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n\t                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n\t            else if (val < 1.1754943508222875e-38) // denormal\r\n\t                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n\t            else {\r\n\t                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n\t                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n\t                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n\t            }\r\n\t        }\r\n\r\n\t        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n\t        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n\t        function readFloat_ieee754(readUint, buf, pos) {\r\n\t            var uint = readUint(buf, pos),\r\n\t                sign = (uint >> 31) * 2 + 1,\r\n\t                exponent = uint >>> 23 & 255,\r\n\t                mantissa = uint & 8388607;\r\n\t            return exponent === 255\r\n\t                ? mantissa\r\n\t                ? NaN\r\n\t                : sign * Infinity\r\n\t                : exponent === 0 // denormal\r\n\t                ? sign * 1.401298464324817e-45 * mantissa\r\n\t                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n\t        }\r\n\r\n\t        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n\t        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n\t    })();\r\n\r\n\t    // double: typed array\r\n\t    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n\t        var f64 = new Float64Array([-0]),\r\n\t            f8b = new Uint8Array(f64.buffer),\r\n\t            le  = f8b[7] === 128;\r\n\r\n\t        function writeDouble_f64_cpy(val, buf, pos) {\r\n\t            f64[0] = val;\r\n\t            buf[pos    ] = f8b[0];\r\n\t            buf[pos + 1] = f8b[1];\r\n\t            buf[pos + 2] = f8b[2];\r\n\t            buf[pos + 3] = f8b[3];\r\n\t            buf[pos + 4] = f8b[4];\r\n\t            buf[pos + 5] = f8b[5];\r\n\t            buf[pos + 6] = f8b[6];\r\n\t            buf[pos + 7] = f8b[7];\r\n\t        }\r\n\r\n\t        function writeDouble_f64_rev(val, buf, pos) {\r\n\t            f64[0] = val;\r\n\t            buf[pos    ] = f8b[7];\r\n\t            buf[pos + 1] = f8b[6];\r\n\t            buf[pos + 2] = f8b[5];\r\n\t            buf[pos + 3] = f8b[4];\r\n\t            buf[pos + 4] = f8b[3];\r\n\t            buf[pos + 5] = f8b[2];\r\n\t            buf[pos + 6] = f8b[1];\r\n\t            buf[pos + 7] = f8b[0];\r\n\t        }\r\n\r\n\t        /* istanbul ignore next */\r\n\t        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n\t        /* istanbul ignore next */\r\n\t        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n\t        function readDouble_f64_cpy(buf, pos) {\r\n\t            f8b[0] = buf[pos    ];\r\n\t            f8b[1] = buf[pos + 1];\r\n\t            f8b[2] = buf[pos + 2];\r\n\t            f8b[3] = buf[pos + 3];\r\n\t            f8b[4] = buf[pos + 4];\r\n\t            f8b[5] = buf[pos + 5];\r\n\t            f8b[6] = buf[pos + 6];\r\n\t            f8b[7] = buf[pos + 7];\r\n\t            return f64[0];\r\n\t        }\r\n\r\n\t        function readDouble_f64_rev(buf, pos) {\r\n\t            f8b[7] = buf[pos    ];\r\n\t            f8b[6] = buf[pos + 1];\r\n\t            f8b[5] = buf[pos + 2];\r\n\t            f8b[4] = buf[pos + 3];\r\n\t            f8b[3] = buf[pos + 4];\r\n\t            f8b[2] = buf[pos + 5];\r\n\t            f8b[1] = buf[pos + 6];\r\n\t            f8b[0] = buf[pos + 7];\r\n\t            return f64[0];\r\n\t        }\r\n\r\n\t        /* istanbul ignore next */\r\n\t        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n\t        /* istanbul ignore next */\r\n\t        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n\t    // double: ieee754\r\n\t    })(); else (function() {\r\n\r\n\t        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n\t            var sign = val < 0 ? 1 : 0;\r\n\t            if (sign)\r\n\t                val = -val;\r\n\t            if (val === 0) {\r\n\t                writeUint(0, buf, pos + off0);\r\n\t                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n\t            } else if (isNaN(val)) {\r\n\t                writeUint(0, buf, pos + off0);\r\n\t                writeUint(2146959360, buf, pos + off1);\r\n\t            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n\t                writeUint(0, buf, pos + off0);\r\n\t                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n\t            } else {\r\n\t                var mantissa;\r\n\t                if (val < 2.2250738585072014e-308) { // denormal\r\n\t                    mantissa = val / 5e-324;\r\n\t                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n\t                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n\t                } else {\r\n\t                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n\t                    if (exponent === 1024)\r\n\t                        exponent = 1023;\r\n\t                    mantissa = val * Math.pow(2, -exponent);\r\n\t                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n\t                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\r\n\t        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n\t        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n\t        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n\t            var lo = readUint(buf, pos + off0),\r\n\t                hi = readUint(buf, pos + off1);\r\n\t            var sign = (hi >> 31) * 2 + 1,\r\n\t                exponent = hi >>> 20 & 2047,\r\n\t                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n\t            return exponent === 2047\r\n\t                ? mantissa\r\n\t                ? NaN\r\n\t                : sign * Infinity\r\n\t                : exponent === 0 // denormal\r\n\t                ? sign * 5e-324 * mantissa\r\n\t                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n\t        }\r\n\r\n\t        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n\t        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n\t    })();\r\n\r\n\t    return exports;\r\n\t}\r\n\r\n\t// uint helpers\r\n\r\n\tfunction writeUintLE(val, buf, pos) {\r\n\t    buf[pos    ] =  val        & 255;\r\n\t    buf[pos + 1] =  val >>> 8  & 255;\r\n\t    buf[pos + 2] =  val >>> 16 & 255;\r\n\t    buf[pos + 3] =  val >>> 24;\r\n\t}\r\n\r\n\tfunction writeUintBE(val, buf, pos) {\r\n\t    buf[pos    ] =  val >>> 24;\r\n\t    buf[pos + 1] =  val >>> 16 & 255;\r\n\t    buf[pos + 2] =  val >>> 8  & 255;\r\n\t    buf[pos + 3] =  val        & 255;\r\n\t}\r\n\r\n\tfunction readUintLE(buf, pos) {\r\n\t    return (buf[pos    ]\r\n\t          | buf[pos + 1] << 8\r\n\t          | buf[pos + 2] << 16\r\n\t          | buf[pos + 3] << 24) >>> 0;\r\n\t}\r\n\r\n\tfunction readUintBE(buf, pos) {\r\n\t    return (buf[pos    ] << 24\r\n\t          | buf[pos + 1] << 16\r\n\t          | buf[pos + 2] << 8\r\n\t          | buf[pos + 3]) >>> 0;\r\n\t}\n\treturn float;\n}\n\nvar inquire_1;\nvar hasRequiredInquire;\n\nfunction requireInquire () {\n\tif (hasRequiredInquire) return inquire_1;\n\thasRequiredInquire = 1;\n\tinquire_1 = inquire;\r\n\r\n\t/**\r\n\t * Requires a module only if available.\r\n\t * @memberof util\r\n\t * @param {string} moduleName Module to require\r\n\t * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n\t */\r\n\tfunction inquire(moduleName) {\r\n\t    try {\r\n\t        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n\t        if (mod && (mod.length || Object.keys(mod).length))\r\n\t            return mod;\r\n\t    } catch (e) {} // eslint-disable-line no-empty\r\n\t    return null;\r\n\t}\n\treturn inquire_1;\n}\n\nvar utf8 = {};\n\nvar hasRequiredUtf8;\n\nfunction requireUtf8 () {\n\tif (hasRequiredUtf8) return utf8;\n\thasRequiredUtf8 = 1;\n\t(function (exports) {\n\r\n\t\t/**\r\n\t\t * A minimal UTF8 implementation for number arrays.\r\n\t\t * @memberof util\r\n\t\t * @namespace\r\n\t\t */\r\n\t\tvar utf8 = exports;\r\n\r\n\t\t/**\r\n\t\t * Calculates the UTF8 byte length of a string.\r\n\t\t * @param {string} string String\r\n\t\t * @returns {number} Byte length\r\n\t\t */\r\n\t\tutf8.length = function utf8_length(string) {\r\n\t\t    var len = 0,\r\n\t\t        c = 0;\r\n\t\t    for (var i = 0; i < string.length; ++i) {\r\n\t\t        c = string.charCodeAt(i);\r\n\t\t        if (c < 128)\r\n\t\t            len += 1;\r\n\t\t        else if (c < 2048)\r\n\t\t            len += 2;\r\n\t\t        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n\t\t            ++i;\r\n\t\t            len += 4;\r\n\t\t        } else\r\n\t\t            len += 3;\r\n\t\t    }\r\n\t\t    return len;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reads UTF8 bytes as a string.\r\n\t\t * @param {Uint8Array} buffer Source buffer\r\n\t\t * @param {number} start Source start\r\n\t\t * @param {number} end Source end\r\n\t\t * @returns {string} String read\r\n\t\t */\r\n\t\tutf8.read = function utf8_read(buffer, start, end) {\r\n\t\t    var len = end - start;\r\n\t\t    if (len < 1)\r\n\t\t        return \"\";\r\n\t\t    var parts = null,\r\n\t\t        chunk = [],\r\n\t\t        i = 0, // char offset\r\n\t\t        t;     // temporary\r\n\t\t    while (start < end) {\r\n\t\t        t = buffer[start++];\r\n\t\t        if (t < 128)\r\n\t\t            chunk[i++] = t;\r\n\t\t        else if (t > 191 && t < 224)\r\n\t\t            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n\t\t        else if (t > 239 && t < 365) {\r\n\t\t            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n\t\t            chunk[i++] = 0xD800 + (t >> 10);\r\n\t\t            chunk[i++] = 0xDC00 + (t & 1023);\r\n\t\t        } else\r\n\t\t            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n\t\t        if (i > 8191) {\r\n\t\t            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n\t\t            i = 0;\r\n\t\t        }\r\n\t\t    }\r\n\t\t    if (parts) {\r\n\t\t        if (i)\r\n\t\t            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n\t\t        return parts.join(\"\");\r\n\t\t    }\r\n\t\t    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Writes a string as UTF8 bytes.\r\n\t\t * @param {string} string Source string\r\n\t\t * @param {Uint8Array} buffer Destination buffer\r\n\t\t * @param {number} offset Destination offset\r\n\t\t * @returns {number} Bytes written\r\n\t\t */\r\n\t\tutf8.write = function utf8_write(string, buffer, offset) {\r\n\t\t    var start = offset,\r\n\t\t        c1, // character 1\r\n\t\t        c2; // character 2\r\n\t\t    for (var i = 0; i < string.length; ++i) {\r\n\t\t        c1 = string.charCodeAt(i);\r\n\t\t        if (c1 < 128) {\r\n\t\t            buffer[offset++] = c1;\r\n\t\t        } else if (c1 < 2048) {\r\n\t\t            buffer[offset++] = c1 >> 6       | 192;\r\n\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n\t\t            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n\t\t            ++i;\r\n\t\t            buffer[offset++] = c1 >> 18      | 240;\r\n\t\t            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n\t\t            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t        } else {\r\n\t\t            buffer[offset++] = c1 >> 12      | 224;\r\n\t\t            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t        }\r\n\t\t    }\r\n\t\t    return offset - start;\r\n\t\t}; \n\t} (utf8));\n\treturn utf8;\n}\n\nvar pool_1;\nvar hasRequiredPool;\n\nfunction requirePool () {\n\tif (hasRequiredPool) return pool_1;\n\thasRequiredPool = 1;\n\tpool_1 = pool;\r\n\r\n\t/**\r\n\t * An allocator as used by {@link util.pool}.\r\n\t * @typedef PoolAllocator\r\n\t * @type {function}\r\n\t * @param {number} size Buffer size\r\n\t * @returns {Uint8Array} Buffer\r\n\t */\r\n\r\n\t/**\r\n\t * A slicer as used by {@link util.pool}.\r\n\t * @typedef PoolSlicer\r\n\t * @type {function}\r\n\t * @param {number} start Start offset\r\n\t * @param {number} end End offset\r\n\t * @returns {Uint8Array} Buffer slice\r\n\t * @this {Uint8Array}\r\n\t */\r\n\r\n\t/**\r\n\t * A general purpose buffer pool.\r\n\t * @memberof util\r\n\t * @function\r\n\t * @param {PoolAllocator} alloc Allocator\r\n\t * @param {PoolSlicer} slice Slicer\r\n\t * @param {number} [size=8192] Slab size\r\n\t * @returns {PoolAllocator} Pooled allocator\r\n\t */\r\n\tfunction pool(alloc, slice, size) {\r\n\t    var SIZE   = size || 8192;\r\n\t    var MAX    = SIZE >>> 1;\r\n\t    var slab   = null;\r\n\t    var offset = SIZE;\r\n\t    return function pool_alloc(size) {\r\n\t        if (size < 1 || size > MAX)\r\n\t            return alloc(size);\r\n\t        if (offset + size > SIZE) {\r\n\t            slab = alloc(SIZE);\r\n\t            offset = 0;\r\n\t        }\r\n\t        var buf = slice.call(slab, offset, offset += size);\r\n\t        if (offset & 7) // align to 32 bit\r\n\t            offset = (offset | 7) + 1;\r\n\t        return buf;\r\n\t    };\r\n\t}\n\treturn pool_1;\n}\n\nvar longbits;\nvar hasRequiredLongbits;\n\nfunction requireLongbits () {\n\tif (hasRequiredLongbits) return longbits;\n\thasRequiredLongbits = 1;\n\tlongbits = LongBits;\n\n\tvar util = requireMinimal$1();\n\n\t/**\n\t * Constructs new long bits.\n\t * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n\t * @memberof util\n\t * @constructor\n\t * @param {number} lo Low 32 bits, unsigned\n\t * @param {number} hi High 32 bits, unsigned\n\t */\n\tfunction LongBits(lo, hi) {\n\n\t    // note that the casts below are theoretically unnecessary as of today, but older statically\n\t    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n\t    /**\n\t     * Low bits.\n\t     * @type {number}\n\t     */\n\t    this.lo = lo >>> 0;\n\n\t    /**\n\t     * High bits.\n\t     * @type {number}\n\t     */\n\t    this.hi = hi >>> 0;\n\t}\n\n\t/**\n\t * Zero bits.\n\t * @memberof util.LongBits\n\t * @type {util.LongBits}\n\t */\n\tvar zero = LongBits.zero = new LongBits(0, 0);\n\n\tzero.toNumber = function() { return 0; };\n\tzero.zzEncode = zero.zzDecode = function() { return this; };\n\tzero.length = function() { return 1; };\n\n\t/**\n\t * Zero hash.\n\t * @memberof util.LongBits\n\t * @type {string}\n\t */\n\tvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n\t/**\n\t * Constructs new long bits from the specified number.\n\t * @param {number} value Value\n\t * @returns {util.LongBits} Instance\n\t */\n\tLongBits.fromNumber = function fromNumber(value) {\n\t    if (value === 0)\n\t        return zero;\n\t    var sign = value < 0;\n\t    if (sign)\n\t        value = -value;\n\t    var lo = value >>> 0,\n\t        hi = (value - lo) / 4294967296 >>> 0;\n\t    if (sign) {\n\t        hi = ~hi >>> 0;\n\t        lo = ~lo >>> 0;\n\t        if (++lo > 4294967295) {\n\t            lo = 0;\n\t            if (++hi > 4294967295)\n\t                hi = 0;\n\t        }\n\t    }\n\t    return new LongBits(lo, hi);\n\t};\n\n\t/**\n\t * Constructs new long bits from a number, long or string.\n\t * @param {Long|number|string} value Value\n\t * @returns {util.LongBits} Instance\n\t */\n\tLongBits.from = function from(value) {\n\t    if (typeof value === \"number\")\n\t        return LongBits.fromNumber(value);\n\t    if (util.isString(value)) {\n\t        /* istanbul ignore else */\n\t        if (util.Long)\n\t            value = util.Long.fromString(value);\n\t        else\n\t            return LongBits.fromNumber(parseInt(value, 10));\n\t    }\n\t    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n\t};\n\n\t/**\n\t * Converts this long bits to a possibly unsafe JavaScript number.\n\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t * @returns {number} Possibly unsafe number\n\t */\n\tLongBits.prototype.toNumber = function toNumber(unsigned) {\n\t    if (!unsigned && this.hi >>> 31) {\n\t        var lo = ~this.lo + 1 >>> 0,\n\t            hi = ~this.hi     >>> 0;\n\t        if (!lo)\n\t            hi = hi + 1 >>> 0;\n\t        return -(lo + hi * 4294967296);\n\t    }\n\t    return this.lo + this.hi * 4294967296;\n\t};\n\n\t/**\n\t * Converts this long bits to a long.\n\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t * @returns {Long} Long\n\t */\n\tLongBits.prototype.toLong = function toLong(unsigned) {\n\t    return util.Long\n\t        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n\t        /* istanbul ignore next */\n\t        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n\t};\n\n\tvar charCodeAt = String.prototype.charCodeAt;\n\n\t/**\n\t * Constructs new long bits from the specified 8 characters long hash.\n\t * @param {string} hash Hash\n\t * @returns {util.LongBits} Bits\n\t */\n\tLongBits.fromHash = function fromHash(hash) {\n\t    if (hash === zeroHash)\n\t        return zero;\n\t    return new LongBits(\n\t        ( charCodeAt.call(hash, 0)\n\t        | charCodeAt.call(hash, 1) << 8\n\t        | charCodeAt.call(hash, 2) << 16\n\t        | charCodeAt.call(hash, 3) << 24) >>> 0\n\t    ,\n\t        ( charCodeAt.call(hash, 4)\n\t        | charCodeAt.call(hash, 5) << 8\n\t        | charCodeAt.call(hash, 6) << 16\n\t        | charCodeAt.call(hash, 7) << 24) >>> 0\n\t    );\n\t};\n\n\t/**\n\t * Converts this long bits to a 8 characters long hash.\n\t * @returns {string} Hash\n\t */\n\tLongBits.prototype.toHash = function toHash() {\n\t    return String.fromCharCode(\n\t        this.lo        & 255,\n\t        this.lo >>> 8  & 255,\n\t        this.lo >>> 16 & 255,\n\t        this.lo >>> 24      ,\n\t        this.hi        & 255,\n\t        this.hi >>> 8  & 255,\n\t        this.hi >>> 16 & 255,\n\t        this.hi >>> 24\n\t    );\n\t};\n\n\t/**\n\t * Zig-zag encodes this long bits.\n\t * @returns {util.LongBits} `this`\n\t */\n\tLongBits.prototype.zzEncode = function zzEncode() {\n\t    var mask =   this.hi >> 31;\n\t    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n\t    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n\t    return this;\n\t};\n\n\t/**\n\t * Zig-zag decodes this long bits.\n\t * @returns {util.LongBits} `this`\n\t */\n\tLongBits.prototype.zzDecode = function zzDecode() {\n\t    var mask = -(this.lo & 1);\n\t    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n\t    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n\t    return this;\n\t};\n\n\t/**\n\t * Calculates the length of this longbits when encoded as a varint.\n\t * @returns {number} Length\n\t */\n\tLongBits.prototype.length = function length() {\n\t    var part0 =  this.lo,\n\t        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n\t        part2 =  this.hi >>> 24;\n\t    return part2 === 0\n\t         ? part1 === 0\n\t           ? part0 < 16384\n\t             ? part0 < 128 ? 1 : 2\n\t             : part0 < 2097152 ? 3 : 4\n\t           : part1 < 16384\n\t             ? part1 < 128 ? 5 : 6\n\t             : part1 < 2097152 ? 7 : 8\n\t         : part2 < 128 ? 9 : 10;\n\t};\n\treturn longbits;\n}\n\nvar hasRequiredMinimal$1;\n\nfunction requireMinimal$1 () {\n\tif (hasRequiredMinimal$1) return minimal$1;\n\thasRequiredMinimal$1 = 1;\n\t(function (exports) {\n\t\tvar util = exports;\n\n\t\t// used to return a Promise where callback is omitted\n\t\tutil.asPromise = requireAspromise();\n\n\t\t// converts to / from base64 encoded strings\n\t\tutil.base64 = requireBase64();\n\n\t\t// base class of rpc.Service\n\t\tutil.EventEmitter = requireEventemitter();\n\n\t\t// float handling accross browsers\n\t\tutil.float = requireFloat();\n\n\t\t// requires modules optionally and hides the call from bundlers\n\t\tutil.inquire = requireInquire();\n\n\t\t// converts to / from utf8 encoded strings\n\t\tutil.utf8 = requireUtf8();\n\n\t\t// provides a node-like buffer pool in the browser\n\t\tutil.pool = requirePool();\n\n\t\t// utility to work with the low and high bits of a 64 bit value\n\t\tutil.LongBits = requireLongbits();\n\n\t\t/**\n\t\t * Whether running within node or not.\n\t\t * @memberof util\n\t\t * @type {boolean}\n\t\t */\n\t\tutil.isNode = Boolean(typeof commonjsGlobal !== \"undefined\"\n\t\t                   && commonjsGlobal\n\t\t                   && commonjsGlobal.process\n\t\t                   && commonjsGlobal.process.versions\n\t\t                   && commonjsGlobal.process.versions.node);\n\n\t\t/**\n\t\t * Global object reference.\n\t\t * @memberof util\n\t\t * @type {Object}\n\t\t */\n\t\tutil.global = util.isNode && commonjsGlobal\n\t\t           || typeof window !== \"undefined\" && window\n\t\t           || typeof self   !== \"undefined\" && self\n\t\t           || commonjsGlobal; // eslint-disable-line no-invalid-this\n\n\t\t/**\n\t\t * An immuable empty array.\n\t\t * @memberof util\n\t\t * @type {Array.<*>}\n\t\t * @const\n\t\t */\n\t\tutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n\t\t/**\n\t\t * An immutable empty object.\n\t\t * @type {Object}\n\t\t * @const\n\t\t */\n\t\tutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n\t\t/**\n\t\t * Tests if the specified value is an integer.\n\t\t * @function\n\t\t * @param {*} value Value to test\n\t\t * @returns {boolean} `true` if the value is an integer\n\t\t */\n\t\tutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n\t\t    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n\t\t};\n\n\t\t/**\n\t\t * Tests if the specified value is a string.\n\t\t * @param {*} value Value to test\n\t\t * @returns {boolean} `true` if the value is a string\n\t\t */\n\t\tutil.isString = function isString(value) {\n\t\t    return typeof value === \"string\" || value instanceof String;\n\t\t};\n\n\t\t/**\n\t\t * Tests if the specified value is a non-null object.\n\t\t * @param {*} value Value to test\n\t\t * @returns {boolean} `true` if the value is a non-null object\n\t\t */\n\t\tutil.isObject = function isObject(value) {\n\t\t    return value && typeof value === \"object\";\n\t\t};\n\n\t\t/**\n\t\t * Checks if a property on a message is considered to be present.\n\t\t * This is an alias of {@link util.isSet}.\n\t\t * @function\n\t\t * @param {Object} obj Plain object or message instance\n\t\t * @param {string} prop Property name\n\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t */\n\t\tutil.isset =\n\n\t\t/**\n\t\t * Checks if a property on a message is considered to be present.\n\t\t * @param {Object} obj Plain object or message instance\n\t\t * @param {string} prop Property name\n\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t */\n\t\tutil.isSet = function isSet(obj, prop) {\n\t\t    var value = obj[prop];\n\t\t    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n\t\t        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n\t\t    return false;\n\t\t};\n\n\t\t/**\n\t\t * Any compatible Buffer instance.\n\t\t * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n\t\t * @interface Buffer\n\t\t * @extends Uint8Array\n\t\t */\n\n\t\t/**\n\t\t * Node's Buffer class if available.\n\t\t * @type {Constructor<Buffer>}\n\t\t */\n\t\tutil.Buffer = (function() {\n\t\t    try {\n\t\t        var Buffer = util.inquire(\"buffer\").Buffer;\n\t\t        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n\t\t        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n\t\t    } catch (e) {\n\t\t        /* istanbul ignore next */\n\t\t        return null;\n\t\t    }\n\t\t})();\n\n\t\t// Internal alias of or polyfull for Buffer.from.\n\t\tutil._Buffer_from = null;\n\n\t\t// Internal alias of or polyfill for Buffer.allocUnsafe.\n\t\tutil._Buffer_allocUnsafe = null;\n\n\t\t/**\n\t\t * Creates a new buffer of whatever type supported by the environment.\n\t\t * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n\t\t * @returns {Uint8Array|Buffer} Buffer\n\t\t */\n\t\tutil.newBuffer = function newBuffer(sizeOrArray) {\n\t\t    /* istanbul ignore next */\n\t\t    return typeof sizeOrArray === \"number\"\n\t\t        ? util.Buffer\n\t\t            ? util._Buffer_allocUnsafe(sizeOrArray)\n\t\t            : new util.Array(sizeOrArray)\n\t\t        : util.Buffer\n\t\t            ? util._Buffer_from(sizeOrArray)\n\t\t            : typeof Uint8Array === \"undefined\"\n\t\t                ? sizeOrArray\n\t\t                : new Uint8Array(sizeOrArray);\n\t\t};\n\n\t\t/**\n\t\t * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n\t\t * @type {Constructor<Uint8Array>}\n\t\t */\n\t\tutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n\t\t/**\n\t\t * Any compatible Long instance.\n\t\t * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n\t\t * @interface Long\n\t\t * @property {number} low Low bits\n\t\t * @property {number} high High bits\n\t\t * @property {boolean} unsigned Whether unsigned or not\n\t\t */\n\n\t\t/**\n\t\t * Long.js's Long class if available.\n\t\t * @type {Constructor<Long>}\n\t\t */\n\t\tutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n\t\t         || /* istanbul ignore next */ util.global.Long\n\t\t         || util.inquire(\"long\");\n\n\t\t/**\n\t\t * Regular expression used to verify 2 bit (`bool`) map keys.\n\t\t * @type {RegExp}\n\t\t * @const\n\t\t */\n\t\tutil.key2Re = /^true|false|0|1$/;\n\n\t\t/**\n\t\t * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n\t\t * @type {RegExp}\n\t\t * @const\n\t\t */\n\t\tutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n\t\t/**\n\t\t * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n\t\t * @type {RegExp}\n\t\t * @const\n\t\t */\n\t\tutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n\t\t/**\n\t\t * Converts a number or long to an 8 characters long hash string.\n\t\t * @param {Long|number} value Value to convert\n\t\t * @returns {string} Hash\n\t\t */\n\t\tutil.longToHash = function longToHash(value) {\n\t\t    return value\n\t\t        ? util.LongBits.from(value).toHash()\n\t\t        : util.LongBits.zeroHash;\n\t\t};\n\n\t\t/**\n\t\t * Converts an 8 characters long hash string to a long or number.\n\t\t * @param {string} hash Hash\n\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t * @returns {Long|number} Original value\n\t\t */\n\t\tutil.longFromHash = function longFromHash(hash, unsigned) {\n\t\t    var bits = util.LongBits.fromHash(hash);\n\t\t    if (util.Long)\n\t\t        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n\t\t    return bits.toNumber(Boolean(unsigned));\n\t\t};\n\n\t\t/**\n\t\t * Merges the properties of the source object into the destination object.\n\t\t * @memberof util\n\t\t * @param {Object.<string,*>} dst Destination object\n\t\t * @param {Object.<string,*>} src Source object\n\t\t * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n\t\t * @returns {Object.<string,*>} Destination object\n\t\t */\n\t\tfunction merge(dst, src, ifNotSet) { // used by converters\n\t\t    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n\t\t        if (dst[keys[i]] === undefined || !ifNotSet)\n\t\t            dst[keys[i]] = src[keys[i]];\n\t\t    return dst;\n\t\t}\n\n\t\tutil.merge = merge;\n\n\t\t/**\n\t\t * Converts the first character of a string to lower case.\n\t\t * @param {string} str String to convert\n\t\t * @returns {string} Converted string\n\t\t */\n\t\tutil.lcFirst = function lcFirst(str) {\n\t\t    return str.charAt(0).toLowerCase() + str.substring(1);\n\t\t};\n\n\t\t/**\n\t\t * Creates a custom error constructor.\n\t\t * @memberof util\n\t\t * @param {string} name Error name\n\t\t * @returns {Constructor<Error>} Custom error constructor\n\t\t */\n\t\tfunction newError(name) {\n\n\t\t    function CustomError(message, properties) {\n\n\t\t        if (!(this instanceof CustomError))\n\t\t            return new CustomError(message, properties);\n\n\t\t        // Error.call(this, message);\n\t\t        // ^ just returns a new error instance because the ctor can be called as a function\n\n\t\t        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n\t\t        /* istanbul ignore next */\n\t\t        if (Error.captureStackTrace) // node\n\t\t            Error.captureStackTrace(this, CustomError);\n\t\t        else\n\t\t            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n\t\t        if (properties)\n\t\t            merge(this, properties);\n\t\t    }\n\n\t\t    CustomError.prototype = Object.create(Error.prototype, {\n\t\t        constructor: {\n\t\t            value: CustomError,\n\t\t            writable: true,\n\t\t            enumerable: false,\n\t\t            configurable: true,\n\t\t        },\n\t\t        name: {\n\t\t            get: function get() { return name; },\n\t\t            set: undefined,\n\t\t            enumerable: false,\n\t\t            // configurable: false would accurately preserve the behavior of\n\t\t            // the original, but I'm guessing that was not intentional.\n\t\t            // For an actual error subclass, this property would\n\t\t            // be configurable.\n\t\t            configurable: true,\n\t\t        },\n\t\t        toString: {\n\t\t            value: function value() { return this.name + \": \" + this.message; },\n\t\t            writable: true,\n\t\t            enumerable: false,\n\t\t            configurable: true,\n\t\t        },\n\t\t    });\n\n\t\t    return CustomError;\n\t\t}\n\n\t\tutil.newError = newError;\n\n\t\t/**\n\t\t * Constructs a new protocol error.\n\t\t * @classdesc Error subclass indicating a protocol specifc error.\n\t\t * @memberof util\n\t\t * @extends Error\n\t\t * @template T extends Message<T>\n\t\t * @constructor\n\t\t * @param {string} message Error message\n\t\t * @param {Object.<string,*>} [properties] Additional properties\n\t\t * @example\n\t\t * try {\n\t\t *     MyMessage.decode(someBuffer); // throws if required fields are missing\n\t\t * } catch (e) {\n\t\t *     if (e instanceof ProtocolError && e.instance)\n\t\t *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n\t\t * }\n\t\t */\n\t\tutil.ProtocolError = newError(\"ProtocolError\");\n\n\t\t/**\n\t\t * So far decoded message instance.\n\t\t * @name util.ProtocolError#instance\n\t\t * @type {Message<T>}\n\t\t */\n\n\t\t/**\n\t\t * A OneOf getter as returned by {@link util.oneOfGetter}.\n\t\t * @typedef OneOfGetter\n\t\t * @type {function}\n\t\t * @returns {string|undefined} Set field name, if any\n\t\t */\n\n\t\t/**\n\t\t * Builds a getter for a oneof's present field name.\n\t\t * @param {string[]} fieldNames Field names\n\t\t * @returns {OneOfGetter} Unbound getter\n\t\t */\n\t\tutil.oneOfGetter = function getOneOf(fieldNames) {\n\t\t    var fieldMap = {};\n\t\t    for (var i = 0; i < fieldNames.length; ++i)\n\t\t        fieldMap[fieldNames[i]] = 1;\n\n\t\t    /**\n\t\t     * @returns {string|undefined} Set field name, if any\n\t\t     * @this Object\n\t\t     * @ignore\n\t\t     */\n\t\t    return function() { // eslint-disable-line consistent-return\n\t\t        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n\t\t            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n\t\t                return keys[i];\n\t\t    };\n\t\t};\n\n\t\t/**\n\t\t * A OneOf setter as returned by {@link util.oneOfSetter}.\n\t\t * @typedef OneOfSetter\n\t\t * @type {function}\n\t\t * @param {string|undefined} value Field name\n\t\t * @returns {undefined}\n\t\t */\n\n\t\t/**\n\t\t * Builds a setter for a oneof's present field name.\n\t\t * @param {string[]} fieldNames Field names\n\t\t * @returns {OneOfSetter} Unbound setter\n\t\t */\n\t\tutil.oneOfSetter = function setOneOf(fieldNames) {\n\n\t\t    /**\n\t\t     * @param {string} name Field name\n\t\t     * @returns {undefined}\n\t\t     * @this Object\n\t\t     * @ignore\n\t\t     */\n\t\t    return function(name) {\n\t\t        for (var i = 0; i < fieldNames.length; ++i)\n\t\t            if (fieldNames[i] !== name)\n\t\t                delete this[fieldNames[i]];\n\t\t    };\n\t\t};\n\n\t\t/**\n\t\t * Default conversion options used for {@link Message#toJSON} implementations.\n\t\t *\n\t\t * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n\t\t *\n\t\t * - Longs become strings\n\t\t * - Enums become string keys\n\t\t * - Bytes become base64 encoded strings\n\t\t * - (Sub-)Messages become plain objects\n\t\t * - Maps become plain objects with all string keys\n\t\t * - Repeated fields become arrays\n\t\t * - NaN and Infinity for float and double fields become strings\n\t\t *\n\t\t * @type {IConversionOptions}\n\t\t * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n\t\t */\n\t\tutil.toJSONOptions = {\n\t\t    longs: String,\n\t\t    enums: String,\n\t\t    bytes: String,\n\t\t    json: true\n\t\t};\n\n\t\t// Sets up buffer utility according to the environment (called in index-minimal)\n\t\tutil._configure = function() {\n\t\t    var Buffer = util.Buffer;\n\t\t    /* istanbul ignore if */\n\t\t    if (!Buffer) {\n\t\t        util._Buffer_from = util._Buffer_allocUnsafe = null;\n\t\t        return;\n\t\t    }\n\t\t    // because node 4.x buffers are incompatible & immutable\n\t\t    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n\t\t    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n\t\t        /* istanbul ignore next */\n\t\t        function Buffer_from(value, encoding) {\n\t\t            return new Buffer(value, encoding);\n\t\t        };\n\t\t    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n\t\t        /* istanbul ignore next */\n\t\t        function Buffer_allocUnsafe(size) {\n\t\t            return new Buffer(size);\n\t\t        };\n\t\t}; \n\t} (minimal$1));\n\treturn minimal$1;\n}\n\nvar writer;\nvar hasRequiredWriter;\n\nfunction requireWriter () {\n\tif (hasRequiredWriter) return writer;\n\thasRequiredWriter = 1;\n\twriter = Writer;\n\n\tvar util      = requireMinimal$1();\n\n\tvar BufferWriter; // cyclic\n\n\tvar LongBits  = util.LongBits,\n\t    base64    = util.base64,\n\t    utf8      = util.utf8;\n\n\t/**\n\t * Constructs a new writer operation instance.\n\t * @classdesc Scheduled writer operation.\n\t * @constructor\n\t * @param {function(*, Uint8Array, number)} fn Function to call\n\t * @param {number} len Value byte length\n\t * @param {*} val Value to write\n\t * @ignore\n\t */\n\tfunction Op(fn, len, val) {\n\n\t    /**\n\t     * Function to call.\n\t     * @type {function(Uint8Array, number, *)}\n\t     */\n\t    this.fn = fn;\n\n\t    /**\n\t     * Value byte length.\n\t     * @type {number}\n\t     */\n\t    this.len = len;\n\n\t    /**\n\t     * Next operation.\n\t     * @type {Writer.Op|undefined}\n\t     */\n\t    this.next = undefined;\n\n\t    /**\n\t     * Value to write.\n\t     * @type {*}\n\t     */\n\t    this.val = val; // type varies\n\t}\n\n\t/* istanbul ignore next */\n\tfunction noop() {} // eslint-disable-line no-empty-function\n\n\t/**\n\t * Constructs a new writer state instance.\n\t * @classdesc Copied writer state.\n\t * @memberof Writer\n\t * @constructor\n\t * @param {Writer} writer Writer to copy state from\n\t * @ignore\n\t */\n\tfunction State(writer) {\n\n\t    /**\n\t     * Current head.\n\t     * @type {Writer.Op}\n\t     */\n\t    this.head = writer.head;\n\n\t    /**\n\t     * Current tail.\n\t     * @type {Writer.Op}\n\t     */\n\t    this.tail = writer.tail;\n\n\t    /**\n\t     * Current buffer length.\n\t     * @type {number}\n\t     */\n\t    this.len = writer.len;\n\n\t    /**\n\t     * Next state.\n\t     * @type {State|null}\n\t     */\n\t    this.next = writer.states;\n\t}\n\n\t/**\n\t * Constructs a new writer instance.\n\t * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n\t * @constructor\n\t */\n\tfunction Writer() {\n\n\t    /**\n\t     * Current length.\n\t     * @type {number}\n\t     */\n\t    this.len = 0;\n\n\t    /**\n\t     * Operations head.\n\t     * @type {Object}\n\t     */\n\t    this.head = new Op(noop, 0, 0);\n\n\t    /**\n\t     * Operations tail\n\t     * @type {Object}\n\t     */\n\t    this.tail = this.head;\n\n\t    /**\n\t     * Linked forked states.\n\t     * @type {Object|null}\n\t     */\n\t    this.states = null;\n\n\t    // When a value is written, the writer calculates its byte length and puts it into a linked\n\t    // list of operations to perform when finish() is called. This both allows us to allocate\n\t    // buffers of the exact required size and reduces the amount of work we have to do compared\n\t    // to first calculating over objects and then encoding over objects. In our case, the encoding\n\t    // part is just a linked list walk calling operations with already prepared values.\n\t}\n\n\tvar create = function create() {\n\t    return util.Buffer\n\t        ? function create_buffer_setup() {\n\t            return (Writer.create = function create_buffer() {\n\t                return new BufferWriter();\n\t            })();\n\t        }\n\t        /* istanbul ignore next */\n\t        : function create_array() {\n\t            return new Writer();\n\t        };\n\t};\n\n\t/**\n\t * Creates a new writer.\n\t * @function\n\t * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n\t */\n\tWriter.create = create();\n\n\t/**\n\t * Allocates a buffer of the specified size.\n\t * @param {number} size Buffer size\n\t * @returns {Uint8Array} Buffer\n\t */\n\tWriter.alloc = function alloc(size) {\n\t    return new util.Array(size);\n\t};\n\n\t// Use Uint8Array buffer pool in the browser, just like node does with buffers\n\t/* istanbul ignore else */\n\tif (util.Array !== Array)\n\t    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n\t/**\n\t * Pushes a new operation to the queue.\n\t * @param {function(Uint8Array, number, *)} fn Function to call\n\t * @param {number} len Value byte length\n\t * @param {number} val Value to write\n\t * @returns {Writer} `this`\n\t * @private\n\t */\n\tWriter.prototype._push = function push(fn, len, val) {\n\t    this.tail = this.tail.next = new Op(fn, len, val);\n\t    this.len += len;\n\t    return this;\n\t};\n\n\tfunction writeByte(val, buf, pos) {\n\t    buf[pos] = val & 255;\n\t}\n\n\tfunction writeVarint32(val, buf, pos) {\n\t    while (val > 127) {\n\t        buf[pos++] = val & 127 | 128;\n\t        val >>>= 7;\n\t    }\n\t    buf[pos] = val;\n\t}\n\n\t/**\n\t * Constructs a new varint writer operation instance.\n\t * @classdesc Scheduled varint writer operation.\n\t * @extends Op\n\t * @constructor\n\t * @param {number} len Value byte length\n\t * @param {number} val Value to write\n\t * @ignore\n\t */\n\tfunction VarintOp(len, val) {\n\t    this.len = len;\n\t    this.next = undefined;\n\t    this.val = val;\n\t}\n\n\tVarintOp.prototype = Object.create(Op.prototype);\n\tVarintOp.prototype.fn = writeVarint32;\n\n\t/**\n\t * Writes an unsigned 32 bit value as a varint.\n\t * @param {number} value Value to write\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.uint32 = function write_uint32(value) {\n\t    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n\t    // uint32 is by far the most frequently used operation and benefits significantly from this.\n\t    this.len += (this.tail = this.tail.next = new VarintOp(\n\t        (value = value >>> 0)\n\t                < 128       ? 1\n\t        : value < 16384     ? 2\n\t        : value < 2097152   ? 3\n\t        : value < 268435456 ? 4\n\t        :                     5,\n\t    value)).len;\n\t    return this;\n\t};\n\n\t/**\n\t * Writes a signed 32 bit value as a varint.\n\t * @function\n\t * @param {number} value Value to write\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.int32 = function write_int32(value) {\n\t    return value < 0\n\t        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n\t        : this.uint32(value);\n\t};\n\n\t/**\n\t * Writes a 32 bit value as a varint, zig-zag encoded.\n\t * @param {number} value Value to write\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.sint32 = function write_sint32(value) {\n\t    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n\t};\n\n\tfunction writeVarint64(val, buf, pos) {\n\t    while (val.hi) {\n\t        buf[pos++] = val.lo & 127 | 128;\n\t        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n\t        val.hi >>>= 7;\n\t    }\n\t    while (val.lo > 127) {\n\t        buf[pos++] = val.lo & 127 | 128;\n\t        val.lo = val.lo >>> 7;\n\t    }\n\t    buf[pos++] = val.lo;\n\t}\n\n\t/**\n\t * Writes an unsigned 64 bit value as a varint.\n\t * @param {Long|number|string} value Value to write\n\t * @returns {Writer} `this`\n\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t */\n\tWriter.prototype.uint64 = function write_uint64(value) {\n\t    var bits = LongBits.from(value);\n\t    return this._push(writeVarint64, bits.length(), bits);\n\t};\n\n\t/**\n\t * Writes a signed 64 bit value as a varint.\n\t * @function\n\t * @param {Long|number|string} value Value to write\n\t * @returns {Writer} `this`\n\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t */\n\tWriter.prototype.int64 = Writer.prototype.uint64;\n\n\t/**\n\t * Writes a signed 64 bit value as a varint, zig-zag encoded.\n\t * @param {Long|number|string} value Value to write\n\t * @returns {Writer} `this`\n\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t */\n\tWriter.prototype.sint64 = function write_sint64(value) {\n\t    var bits = LongBits.from(value).zzEncode();\n\t    return this._push(writeVarint64, bits.length(), bits);\n\t};\n\n\t/**\n\t * Writes a boolish value as a varint.\n\t * @param {boolean} value Value to write\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.bool = function write_bool(value) {\n\t    return this._push(writeByte, 1, value ? 1 : 0);\n\t};\n\n\tfunction writeFixed32(val, buf, pos) {\n\t    buf[pos    ] =  val         & 255;\n\t    buf[pos + 1] =  val >>> 8   & 255;\n\t    buf[pos + 2] =  val >>> 16  & 255;\n\t    buf[pos + 3] =  val >>> 24;\n\t}\n\n\t/**\n\t * Writes an unsigned 32 bit value as fixed 32 bits.\n\t * @param {number} value Value to write\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.fixed32 = function write_fixed32(value) {\n\t    return this._push(writeFixed32, 4, value >>> 0);\n\t};\n\n\t/**\n\t * Writes a signed 32 bit value as fixed 32 bits.\n\t * @function\n\t * @param {number} value Value to write\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n\t/**\n\t * Writes an unsigned 64 bit value as fixed 64 bits.\n\t * @param {Long|number|string} value Value to write\n\t * @returns {Writer} `this`\n\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t */\n\tWriter.prototype.fixed64 = function write_fixed64(value) {\n\t    var bits = LongBits.from(value);\n\t    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n\t};\n\n\t/**\n\t * Writes a signed 64 bit value as fixed 64 bits.\n\t * @function\n\t * @param {Long|number|string} value Value to write\n\t * @returns {Writer} `this`\n\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t */\n\tWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n\t/**\n\t * Writes a float (32 bit).\n\t * @function\n\t * @param {number} value Value to write\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.float = function write_float(value) {\n\t    return this._push(util.float.writeFloatLE, 4, value);\n\t};\n\n\t/**\n\t * Writes a double (64 bit float).\n\t * @function\n\t * @param {number} value Value to write\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.double = function write_double(value) {\n\t    return this._push(util.float.writeDoubleLE, 8, value);\n\t};\n\n\tvar writeBytes = util.Array.prototype.set\n\t    ? function writeBytes_set(val, buf, pos) {\n\t        buf.set(val, pos); // also works for plain array values\n\t    }\n\t    /* istanbul ignore next */\n\t    : function writeBytes_for(val, buf, pos) {\n\t        for (var i = 0; i < val.length; ++i)\n\t            buf[pos + i] = val[i];\n\t    };\n\n\t/**\n\t * Writes a sequence of bytes.\n\t * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.bytes = function write_bytes(value) {\n\t    var len = value.length >>> 0;\n\t    if (!len)\n\t        return this._push(writeByte, 1, 0);\n\t    if (util.isString(value)) {\n\t        var buf = Writer.alloc(len = base64.length(value));\n\t        base64.decode(value, buf, 0);\n\t        value = buf;\n\t    }\n\t    return this.uint32(len)._push(writeBytes, len, value);\n\t};\n\n\t/**\n\t * Writes a string.\n\t * @param {string} value Value to write\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.string = function write_string(value) {\n\t    var len = utf8.length(value);\n\t    return len\n\t        ? this.uint32(len)._push(utf8.write, len, value)\n\t        : this._push(writeByte, 1, 0);\n\t};\n\n\t/**\n\t * Forks this writer's state by pushing it to a stack.\n\t * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.fork = function fork() {\n\t    this.states = new State(this);\n\t    this.head = this.tail = new Op(noop, 0, 0);\n\t    this.len = 0;\n\t    return this;\n\t};\n\n\t/**\n\t * Resets this instance to the last state.\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.reset = function reset() {\n\t    if (this.states) {\n\t        this.head   = this.states.head;\n\t        this.tail   = this.states.tail;\n\t        this.len    = this.states.len;\n\t        this.states = this.states.next;\n\t    } else {\n\t        this.head = this.tail = new Op(noop, 0, 0);\n\t        this.len  = 0;\n\t    }\n\t    return this;\n\t};\n\n\t/**\n\t * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n\t * @returns {Writer} `this`\n\t */\n\tWriter.prototype.ldelim = function ldelim() {\n\t    var head = this.head,\n\t        tail = this.tail,\n\t        len  = this.len;\n\t    this.reset().uint32(len);\n\t    if (len) {\n\t        this.tail.next = head.next; // skip noop\n\t        this.tail = tail;\n\t        this.len += len;\n\t    }\n\t    return this;\n\t};\n\n\t/**\n\t * Finishes the write operation.\n\t * @returns {Uint8Array} Finished buffer\n\t */\n\tWriter.prototype.finish = function finish() {\n\t    var head = this.head.next, // skip noop\n\t        buf  = this.constructor.alloc(this.len),\n\t        pos  = 0;\n\t    while (head) {\n\t        head.fn(head.val, buf, pos);\n\t        pos += head.len;\n\t        head = head.next;\n\t    }\n\t    // this.head = this.tail = null;\n\t    return buf;\n\t};\n\n\tWriter._configure = function(BufferWriter_) {\n\t    BufferWriter = BufferWriter_;\n\t    Writer.create = create();\n\t    BufferWriter._configure();\n\t};\n\treturn writer;\n}\n\nvar writer_buffer;\nvar hasRequiredWriter_buffer;\n\nfunction requireWriter_buffer () {\n\tif (hasRequiredWriter_buffer) return writer_buffer;\n\thasRequiredWriter_buffer = 1;\n\twriter_buffer = BufferWriter;\n\n\t// extends Writer\n\tvar Writer = requireWriter();\n\t(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\n\tvar util = requireMinimal$1();\n\n\t/**\n\t * Constructs a new buffer writer instance.\n\t * @classdesc Wire format writer using node buffers.\n\t * @extends Writer\n\t * @constructor\n\t */\n\tfunction BufferWriter() {\n\t    Writer.call(this);\n\t}\n\n\tBufferWriter._configure = function () {\n\t    /**\n\t     * Allocates a buffer of the specified size.\n\t     * @function\n\t     * @param {number} size Buffer size\n\t     * @returns {Buffer} Buffer\n\t     */\n\t    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n\t    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n\t        ? function writeBytesBuffer_set(val, buf, pos) {\n\t          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n\t          // also works for plain array values\n\t        }\n\t        /* istanbul ignore next */\n\t        : function writeBytesBuffer_copy(val, buf, pos) {\n\t          if (val.copy) // Buffer values\n\t            val.copy(buf, pos, 0, val.length);\n\t          else for (var i = 0; i < val.length;) // plain array values\n\t            buf[pos++] = val[i++];\n\t        };\n\t};\n\n\n\t/**\n\t * @override\n\t */\n\tBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n\t    if (util.isString(value))\n\t        value = util._Buffer_from(value, \"base64\");\n\t    var len = value.length >>> 0;\n\t    this.uint32(len);\n\t    if (len)\n\t        this._push(BufferWriter.writeBytesBuffer, len, value);\n\t    return this;\n\t};\n\n\tfunction writeStringBuffer(val, buf, pos) {\n\t    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n\t        util.utf8.write(val, buf, pos);\n\t    else if (buf.utf8Write)\n\t        buf.utf8Write(val, pos);\n\t    else\n\t        buf.write(val, pos);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tBufferWriter.prototype.string = function write_string_buffer(value) {\n\t    var len = util.Buffer.byteLength(value);\n\t    this.uint32(len);\n\t    if (len)\n\t        this._push(writeStringBuffer, len, value);\n\t    return this;\n\t};\n\n\n\t/**\n\t * Finishes the write operation.\n\t * @name BufferWriter#finish\n\t * @function\n\t * @returns {Buffer} Finished buffer\n\t */\n\n\tBufferWriter._configure();\n\treturn writer_buffer;\n}\n\nvar reader;\nvar hasRequiredReader;\n\nfunction requireReader () {\n\tif (hasRequiredReader) return reader;\n\thasRequiredReader = 1;\n\treader = Reader;\n\n\tvar util      = requireMinimal$1();\n\n\tvar BufferReader; // cyclic\n\n\tvar LongBits  = util.LongBits,\n\t    utf8      = util.utf8;\n\n\t/* istanbul ignore next */\n\tfunction indexOutOfRange(reader, writeLength) {\n\t    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n\t}\n\n\t/**\n\t * Constructs a new reader instance using the specified buffer.\n\t * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n\t * @constructor\n\t * @param {Uint8Array} buffer Buffer to read from\n\t */\n\tfunction Reader(buffer) {\n\n\t    /**\n\t     * Read buffer.\n\t     * @type {Uint8Array}\n\t     */\n\t    this.buf = buffer;\n\n\t    /**\n\t     * Read buffer position.\n\t     * @type {number}\n\t     */\n\t    this.pos = 0;\n\n\t    /**\n\t     * Read buffer length.\n\t     * @type {number}\n\t     */\n\t    this.len = buffer.length;\n\t}\n\n\tvar create_array = typeof Uint8Array !== \"undefined\"\n\t    ? function create_typed_array(buffer) {\n\t        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n\t            return new Reader(buffer);\n\t        throw Error(\"illegal buffer\");\n\t    }\n\t    /* istanbul ignore next */\n\t    : function create_array(buffer) {\n\t        if (Array.isArray(buffer))\n\t            return new Reader(buffer);\n\t        throw Error(\"illegal buffer\");\n\t    };\n\n\tvar create = function create() {\n\t    return util.Buffer\n\t        ? function create_buffer_setup(buffer) {\n\t            return (Reader.create = function create_buffer(buffer) {\n\t                return util.Buffer.isBuffer(buffer)\n\t                    ? new BufferReader(buffer)\n\t                    /* istanbul ignore next */\n\t                    : create_array(buffer);\n\t            })(buffer);\n\t        }\n\t        /* istanbul ignore next */\n\t        : create_array;\n\t};\n\n\t/**\n\t * Creates a new reader using the specified buffer.\n\t * @function\n\t * @param {Uint8Array|Buffer} buffer Buffer to read from\n\t * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n\t * @throws {Error} If `buffer` is not a valid buffer\n\t */\n\tReader.create = create();\n\n\tReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n\t/**\n\t * Reads a varint as an unsigned 32 bit value.\n\t * @function\n\t * @returns {number} Value read\n\t */\n\tReader.prototype.uint32 = (function read_uint32_setup() {\n\t    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n\t    return function read_uint32() {\n\t        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n\t        /* istanbul ignore if */\n\t        if ((this.pos += 5) > this.len) {\n\t            this.pos = this.len;\n\t            throw indexOutOfRange(this, 10);\n\t        }\n\t        return value;\n\t    };\n\t})();\n\n\t/**\n\t * Reads a varint as a signed 32 bit value.\n\t * @returns {number} Value read\n\t */\n\tReader.prototype.int32 = function read_int32() {\n\t    return this.uint32() | 0;\n\t};\n\n\t/**\n\t * Reads a zig-zag encoded varint as a signed 32 bit value.\n\t * @returns {number} Value read\n\t */\n\tReader.prototype.sint32 = function read_sint32() {\n\t    var value = this.uint32();\n\t    return value >>> 1 ^ -(value & 1) | 0;\n\t};\n\n\t/* eslint-disable no-invalid-this */\n\n\tfunction readLongVarint() {\n\t    // tends to deopt with local vars for octet etc.\n\t    var bits = new LongBits(0, 0);\n\t    var i = 0;\n\t    if (this.len - this.pos > 4) { // fast route (lo)\n\t        for (; i < 4; ++i) {\n\t            // 1st..4th\n\t            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n\t            if (this.buf[this.pos++] < 128)\n\t                return bits;\n\t        }\n\t        // 5th\n\t        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n\t        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n\t        if (this.buf[this.pos++] < 128)\n\t            return bits;\n\t        i = 0;\n\t    } else {\n\t        for (; i < 3; ++i) {\n\t            /* istanbul ignore if */\n\t            if (this.pos >= this.len)\n\t                throw indexOutOfRange(this);\n\t            // 1st..3th\n\t            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n\t            if (this.buf[this.pos++] < 128)\n\t                return bits;\n\t        }\n\t        // 4th\n\t        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n\t        return bits;\n\t    }\n\t    if (this.len - this.pos > 4) { // fast route (hi)\n\t        for (; i < 5; ++i) {\n\t            // 6th..10th\n\t            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n\t            if (this.buf[this.pos++] < 128)\n\t                return bits;\n\t        }\n\t    } else {\n\t        for (; i < 5; ++i) {\n\t            /* istanbul ignore if */\n\t            if (this.pos >= this.len)\n\t                throw indexOutOfRange(this);\n\t            // 6th..10th\n\t            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n\t            if (this.buf[this.pos++] < 128)\n\t                return bits;\n\t        }\n\t    }\n\t    /* istanbul ignore next */\n\t    throw Error(\"invalid varint encoding\");\n\t}\n\n\t/* eslint-enable no-invalid-this */\n\n\t/**\n\t * Reads a varint as a signed 64 bit value.\n\t * @name Reader#int64\n\t * @function\n\t * @returns {Long} Value read\n\t */\n\n\t/**\n\t * Reads a varint as an unsigned 64 bit value.\n\t * @name Reader#uint64\n\t * @function\n\t * @returns {Long} Value read\n\t */\n\n\t/**\n\t * Reads a zig-zag encoded varint as a signed 64 bit value.\n\t * @name Reader#sint64\n\t * @function\n\t * @returns {Long} Value read\n\t */\n\n\t/**\n\t * Reads a varint as a boolean.\n\t * @returns {boolean} Value read\n\t */\n\tReader.prototype.bool = function read_bool() {\n\t    return this.uint32() !== 0;\n\t};\n\n\tfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n\t    return (buf[end - 4]\n\t          | buf[end - 3] << 8\n\t          | buf[end - 2] << 16\n\t          | buf[end - 1] << 24) >>> 0;\n\t}\n\n\t/**\n\t * Reads fixed 32 bits as an unsigned 32 bit integer.\n\t * @returns {number} Value read\n\t */\n\tReader.prototype.fixed32 = function read_fixed32() {\n\n\t    /* istanbul ignore if */\n\t    if (this.pos + 4 > this.len)\n\t        throw indexOutOfRange(this, 4);\n\n\t    return readFixed32_end(this.buf, this.pos += 4);\n\t};\n\n\t/**\n\t * Reads fixed 32 bits as a signed 32 bit integer.\n\t * @returns {number} Value read\n\t */\n\tReader.prototype.sfixed32 = function read_sfixed32() {\n\n\t    /* istanbul ignore if */\n\t    if (this.pos + 4 > this.len)\n\t        throw indexOutOfRange(this, 4);\n\n\t    return readFixed32_end(this.buf, this.pos += 4) | 0;\n\t};\n\n\t/* eslint-disable no-invalid-this */\n\n\tfunction readFixed64(/* this: Reader */) {\n\n\t    /* istanbul ignore if */\n\t    if (this.pos + 8 > this.len)\n\t        throw indexOutOfRange(this, 8);\n\n\t    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n\t}\n\n\t/* eslint-enable no-invalid-this */\n\n\t/**\n\t * Reads fixed 64 bits.\n\t * @name Reader#fixed64\n\t * @function\n\t * @returns {Long} Value read\n\t */\n\n\t/**\n\t * Reads zig-zag encoded fixed 64 bits.\n\t * @name Reader#sfixed64\n\t * @function\n\t * @returns {Long} Value read\n\t */\n\n\t/**\n\t * Reads a float (32 bit) as a number.\n\t * @function\n\t * @returns {number} Value read\n\t */\n\tReader.prototype.float = function read_float() {\n\n\t    /* istanbul ignore if */\n\t    if (this.pos + 4 > this.len)\n\t        throw indexOutOfRange(this, 4);\n\n\t    var value = util.float.readFloatLE(this.buf, this.pos);\n\t    this.pos += 4;\n\t    return value;\n\t};\n\n\t/**\n\t * Reads a double (64 bit float) as a number.\n\t * @function\n\t * @returns {number} Value read\n\t */\n\tReader.prototype.double = function read_double() {\n\n\t    /* istanbul ignore if */\n\t    if (this.pos + 8 > this.len)\n\t        throw indexOutOfRange(this, 4);\n\n\t    var value = util.float.readDoubleLE(this.buf, this.pos);\n\t    this.pos += 8;\n\t    return value;\n\t};\n\n\t/**\n\t * Reads a sequence of bytes preceeded by its length as a varint.\n\t * @returns {Uint8Array} Value read\n\t */\n\tReader.prototype.bytes = function read_bytes() {\n\t    var length = this.uint32(),\n\t        start  = this.pos,\n\t        end    = this.pos + length;\n\n\t    /* istanbul ignore if */\n\t    if (end > this.len)\n\t        throw indexOutOfRange(this, length);\n\n\t    this.pos += length;\n\t    if (Array.isArray(this.buf)) // plain array\n\t        return this.buf.slice(start, end);\n\t    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n\t        ? new this.buf.constructor(0)\n\t        : this._slice.call(this.buf, start, end);\n\t};\n\n\t/**\n\t * Reads a string preceeded by its byte length as a varint.\n\t * @returns {string} Value read\n\t */\n\tReader.prototype.string = function read_string() {\n\t    var bytes = this.bytes();\n\t    return utf8.read(bytes, 0, bytes.length);\n\t};\n\n\t/**\n\t * Skips the specified number of bytes if specified, otherwise skips a varint.\n\t * @param {number} [length] Length if known, otherwise a varint is assumed\n\t * @returns {Reader} `this`\n\t */\n\tReader.prototype.skip = function skip(length) {\n\t    if (typeof length === \"number\") {\n\t        /* istanbul ignore if */\n\t        if (this.pos + length > this.len)\n\t            throw indexOutOfRange(this, length);\n\t        this.pos += length;\n\t    } else {\n\t        do {\n\t            /* istanbul ignore if */\n\t            if (this.pos >= this.len)\n\t                throw indexOutOfRange(this);\n\t        } while (this.buf[this.pos++] & 128);\n\t    }\n\t    return this;\n\t};\n\n\t/**\n\t * Skips the next element of the specified wire type.\n\t * @param {number} wireType Wire type received\n\t * @returns {Reader} `this`\n\t */\n\tReader.prototype.skipType = function(wireType) {\n\t    switch (wireType) {\n\t        case 0:\n\t            this.skip();\n\t            break;\n\t        case 1:\n\t            this.skip(8);\n\t            break;\n\t        case 2:\n\t            this.skip(this.uint32());\n\t            break;\n\t        case 3:\n\t            while ((wireType = this.uint32() & 7) !== 4) {\n\t                this.skipType(wireType);\n\t            }\n\t            break;\n\t        case 5:\n\t            this.skip(4);\n\t            break;\n\n\t        /* istanbul ignore next */\n\t        default:\n\t            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n\t    }\n\t    return this;\n\t};\n\n\tReader._configure = function(BufferReader_) {\n\t    BufferReader = BufferReader_;\n\t    Reader.create = create();\n\t    BufferReader._configure();\n\n\t    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n\t    util.merge(Reader.prototype, {\n\n\t        int64: function read_int64() {\n\t            return readLongVarint.call(this)[fn](false);\n\t        },\n\n\t        uint64: function read_uint64() {\n\t            return readLongVarint.call(this)[fn](true);\n\t        },\n\n\t        sint64: function read_sint64() {\n\t            return readLongVarint.call(this).zzDecode()[fn](false);\n\t        },\n\n\t        fixed64: function read_fixed64() {\n\t            return readFixed64.call(this)[fn](true);\n\t        },\n\n\t        sfixed64: function read_sfixed64() {\n\t            return readFixed64.call(this)[fn](false);\n\t        }\n\n\t    });\n\t};\n\treturn reader;\n}\n\nvar reader_buffer;\nvar hasRequiredReader_buffer;\n\nfunction requireReader_buffer () {\n\tif (hasRequiredReader_buffer) return reader_buffer;\n\thasRequiredReader_buffer = 1;\n\treader_buffer = BufferReader;\n\n\t// extends Reader\n\tvar Reader = requireReader();\n\t(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\n\tvar util = requireMinimal$1();\n\n\t/**\n\t * Constructs a new buffer reader instance.\n\t * @classdesc Wire format reader using node buffers.\n\t * @extends Reader\n\t * @constructor\n\t * @param {Buffer} buffer Buffer to read from\n\t */\n\tfunction BufferReader(buffer) {\n\t    Reader.call(this, buffer);\n\n\t    /**\n\t     * Read buffer.\n\t     * @name BufferReader#buf\n\t     * @type {Buffer}\n\t     */\n\t}\n\n\tBufferReader._configure = function () {\n\t    /* istanbul ignore else */\n\t    if (util.Buffer)\n\t        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\t};\n\n\n\t/**\n\t * @override\n\t */\n\tBufferReader.prototype.string = function read_string_buffer() {\n\t    var len = this.uint32(); // modifies pos\n\t    return this.buf.utf8Slice\n\t        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n\t        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n\t};\n\n\t/**\n\t * Reads a sequence of bytes preceeded by its length as a varint.\n\t * @name BufferReader#bytes\n\t * @function\n\t * @returns {Buffer} Value read\n\t */\n\n\tBufferReader._configure();\n\treturn reader_buffer;\n}\n\nvar rpc = {};\n\nvar service;\nvar hasRequiredService;\n\nfunction requireService () {\n\tif (hasRequiredService) return service;\n\thasRequiredService = 1;\n\tservice = Service;\n\n\tvar util = requireMinimal$1();\n\n\t// Extends EventEmitter\n\t(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n\t/**\n\t * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n\t *\n\t * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n\t * @typedef rpc.ServiceMethodCallback\n\t * @template TRes extends Message<TRes>\n\t * @type {function}\n\t * @param {Error|null} error Error, if any\n\t * @param {TRes} [response] Response message\n\t * @returns {undefined}\n\t */\n\n\t/**\n\t * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n\t * @typedef rpc.ServiceMethod\n\t * @template TReq extends Message<TReq>\n\t * @template TRes extends Message<TRes>\n\t * @type {function}\n\t * @param {TReq|Properties<TReq>} request Request message or plain object\n\t * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n\t * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n\t */\n\n\t/**\n\t * Constructs a new RPC service instance.\n\t * @classdesc An RPC service as returned by {@link Service#create}.\n\t * @exports rpc.Service\n\t * @extends util.EventEmitter\n\t * @constructor\n\t * @param {RPCImpl} rpcImpl RPC implementation\n\t * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n\t * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n\t */\n\tfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n\t    if (typeof rpcImpl !== \"function\")\n\t        throw TypeError(\"rpcImpl must be a function\");\n\n\t    util.EventEmitter.call(this);\n\n\t    /**\n\t     * RPC implementation. Becomes `null` once the service is ended.\n\t     * @type {RPCImpl|null}\n\t     */\n\t    this.rpcImpl = rpcImpl;\n\n\t    /**\n\t     * Whether requests are length-delimited.\n\t     * @type {boolean}\n\t     */\n\t    this.requestDelimited = Boolean(requestDelimited);\n\n\t    /**\n\t     * Whether responses are length-delimited.\n\t     * @type {boolean}\n\t     */\n\t    this.responseDelimited = Boolean(responseDelimited);\n\t}\n\n\t/**\n\t * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n\t * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n\t * @param {Constructor<TReq>} requestCtor Request constructor\n\t * @param {Constructor<TRes>} responseCtor Response constructor\n\t * @param {TReq|Properties<TReq>} request Request message or plain object\n\t * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n\t * @returns {undefined}\n\t * @template TReq extends Message<TReq>\n\t * @template TRes extends Message<TRes>\n\t */\n\tService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n\t    if (!request)\n\t        throw TypeError(\"request must be specified\");\n\n\t    var self = this;\n\t    if (!callback)\n\t        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n\t    if (!self.rpcImpl) {\n\t        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n\t        return undefined;\n\t    }\n\n\t    try {\n\t        return self.rpcImpl(\n\t            method,\n\t            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n\t            function rpcCallback(err, response) {\n\n\t                if (err) {\n\t                    self.emit(\"error\", err, method);\n\t                    return callback(err);\n\t                }\n\n\t                if (response === null) {\n\t                    self.end(/* endedByRPC */ true);\n\t                    return undefined;\n\t                }\n\n\t                if (!(response instanceof responseCtor)) {\n\t                    try {\n\t                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n\t                    } catch (err) {\n\t                        self.emit(\"error\", err, method);\n\t                        return callback(err);\n\t                    }\n\t                }\n\n\t                self.emit(\"data\", response, method);\n\t                return callback(null, response);\n\t            }\n\t        );\n\t    } catch (err) {\n\t        self.emit(\"error\", err, method);\n\t        setTimeout(function() { callback(err); }, 0);\n\t        return undefined;\n\t    }\n\t};\n\n\t/**\n\t * Ends this service and emits the `end` event.\n\t * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n\t * @returns {rpc.Service} `this`\n\t */\n\tService.prototype.end = function end(endedByRPC) {\n\t    if (this.rpcImpl) {\n\t        if (!endedByRPC) // signal end to rpcImpl\n\t            this.rpcImpl(null, null, null);\n\t        this.rpcImpl = null;\n\t        this.emit(\"end\").off();\n\t    }\n\t    return this;\n\t};\n\treturn service;\n}\n\nvar hasRequiredRpc;\n\nfunction requireRpc () {\n\tif (hasRequiredRpc) return rpc;\n\thasRequiredRpc = 1;\n\t(function (exports) {\n\n\t\t/**\n\t\t * Streaming RPC helpers.\n\t\t * @namespace\n\t\t */\n\t\tvar rpc = exports;\n\n\t\t/**\n\t\t * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n\t\t * @typedef RPCImpl\n\t\t * @type {function}\n\t\t * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n\t\t * @param {Uint8Array} requestData Request data\n\t\t * @param {RPCImplCallback} callback Callback function\n\t\t * @returns {undefined}\n\t\t * @example\n\t\t * function rpcImpl(method, requestData, callback) {\n\t\t *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n\t\t *         throw Error(\"no such method\");\n\t\t *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n\t\t *         callback(err, responseData);\n\t\t *     });\n\t\t * }\n\t\t */\n\n\t\t/**\n\t\t * Node-style callback as used by {@link RPCImpl}.\n\t\t * @typedef RPCImplCallback\n\t\t * @type {function}\n\t\t * @param {Error|null} error Error, if any, otherwise `null`\n\t\t * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n\t\t * @returns {undefined}\n\t\t */\n\n\t\trpc.Service = requireService(); \n\t} (rpc));\n\treturn rpc;\n}\n\nvar roots;\nvar hasRequiredRoots;\n\nfunction requireRoots () {\n\tif (hasRequiredRoots) return roots;\n\thasRequiredRoots = 1;\n\troots = {};\n\n\t/**\n\t * Named roots.\n\t * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n\t * Can also be used manually to make roots available across modules.\n\t * @name roots\n\t * @type {Object.<string,Root>}\n\t * @example\n\t * // pbjs -r myroot -o compiled.js ...\n\t *\n\t * // in another module:\n\t * require(\"./compiled.js\");\n\t *\n\t * // in any subsequent module:\n\t * var root = protobuf.roots[\"myroot\"];\n\t */\n\treturn roots;\n}\n\nvar hasRequiredIndexMinimal;\n\nfunction requireIndexMinimal () {\n\tif (hasRequiredIndexMinimal) return indexMinimal;\n\thasRequiredIndexMinimal = 1;\n\t(function (exports) {\n\t\tvar protobuf = exports;\n\n\t\t/**\n\t\t * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n\t\t * @name build\n\t\t * @type {string}\n\t\t * @const\n\t\t */\n\t\tprotobuf.build = \"minimal\";\n\n\t\t// Serialization\n\t\tprotobuf.Writer       = requireWriter();\n\t\tprotobuf.BufferWriter = requireWriter_buffer();\n\t\tprotobuf.Reader       = requireReader();\n\t\tprotobuf.BufferReader = requireReader_buffer();\n\n\t\t// Utility\n\t\tprotobuf.util         = requireMinimal$1();\n\t\tprotobuf.rpc          = requireRpc();\n\t\tprotobuf.roots        = requireRoots();\n\t\tprotobuf.configure    = configure;\n\n\t\t/* istanbul ignore next */\n\t\t/**\n\t\t * Reconfigures the library according to the environment.\n\t\t * @returns {undefined}\n\t\t */\n\t\tfunction configure() {\n\t\t    protobuf.util._configure();\n\t\t    protobuf.Writer._configure(protobuf.BufferWriter);\n\t\t    protobuf.Reader._configure(protobuf.BufferReader);\n\t\t}\n\n\t\t// Set up buffer utility according to the environment\n\t\tconfigure(); \n\t} (indexMinimal));\n\treturn indexMinimal;\n}\n\nvar minimal;\nvar hasRequiredMinimal;\n\nfunction requireMinimal () {\n\tif (hasRequiredMinimal) return minimal;\n\thasRequiredMinimal = 1;\n\tminimal = requireIndexMinimal();\n\treturn minimal;\n}\n\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n(function (module) {\n\t(function(global, factory) { /* global define, require, module */\n\n\t    /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports)\n\t        module.exports = factory(requireMinimal());\n\n\t})(commonjsGlobal, function($protobuf) {\n\n\t    // Common aliases\n\t    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\t    \n\t    // Exported root namespace\n\t    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\t    \n\t    $root.Message = (function() {\n\t    \n\t        /**\n\t         * Properties of a Message.\n\t         * @exports IMessage\n\t         * @interface IMessage\n\t         * @property {string|null} [userId] Message userId\n\t         * @property {number|Long|null} [messageId] Message messageId\n\t         * @property {number|null} [last] Message last\n\t         * @property {string|null} [token] Message token\n\t         * @property {string|null} [userChannel] Message userChannel\n\t         * @property {string|null} [vpsToken] Message vpsToken\n\t         * @property {Array.<IDevContext>|null} [devContext] Устарело с версии 3.\n\t         * @property {string|null} [messageName] Message messageName\n\t         * @property {number|null} [version] Message version\n\t         * @property {IVoice|null} [voice] Message voice\n\t         * @property {IText|null} [text] Message text\n\t         * @property {ISystemMessage|null} [systemMessage] Message systemMessage\n\t         * @property {ILegacyDevice|null} [legacyDevice] Message legacyDevice\n\t         * @property {ISettings|null} [settings] Message settings\n\t         * @property {IStatus|null} [status] Message status\n\t         * @property {IDevice|null} [device] Message device\n\t         * @property {IBytes|null} [bytes] Message bytes\n\t         * @property {IInitialSettings|null} [initialSettings] Message initialSettings\n\t         * @property {ICancel|null} [cancel] Message cancel\n\t         * @property {IGetHistoryRequest|null} [getHistoryRequest] Message getHistoryRequest\n\t         * @property {IMute|null} [mute] Message mute\n\t         * @property {number|Long|null} [timestamp] Message timestamp\n\t         * @property {Object.<string,string>|null} [meta] Message meta\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new Message.\n\t         * @exports Message\n\t         * @classdesc Represents a Message.\n\t         * @implements IMessage\n\t         * @constructor\n\t         * @param {IMessage=} [properties] Properties to set\n\t         */\n\t        function Message(properties) {\n\t            this.devContext = [];\n\t            this.meta = {};\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * Message userId.\n\t         * @member {string} userId\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.userId = \"\";\n\t    \n\t        /**\n\t         * Message messageId.\n\t         * @member {number|Long} messageId\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.messageId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\t    \n\t        /**\n\t         * Message last.\n\t         * @member {number} last\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.last = 0;\n\t    \n\t        /**\n\t         * Message token.\n\t         * @member {string} token\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.token = \"\";\n\t    \n\t        /**\n\t         * Message userChannel.\n\t         * @member {string} userChannel\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.userChannel = \"\";\n\t    \n\t        /**\n\t         * Message vpsToken.\n\t         * @member {string} vpsToken\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.vpsToken = \"\";\n\t    \n\t        /**\n\t         * Устарело с версии 3.\n\t         * @member {Array.<IDevContext>} devContext\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.devContext = $util.emptyArray;\n\t    \n\t        /**\n\t         * Message messageName.\n\t         * @member {string} messageName\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.messageName = \"\";\n\t    \n\t        /**\n\t         * Message version.\n\t         * @member {number} version\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.version = 0;\n\t    \n\t        /**\n\t         * Message voice.\n\t         * @member {IVoice|null|undefined} voice\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.voice = null;\n\t    \n\t        /**\n\t         * Message text.\n\t         * @member {IText|null|undefined} text\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.text = null;\n\t    \n\t        /**\n\t         * Message systemMessage.\n\t         * @member {ISystemMessage|null|undefined} systemMessage\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.systemMessage = null;\n\t    \n\t        /**\n\t         * Message legacyDevice.\n\t         * @member {ILegacyDevice|null|undefined} legacyDevice\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.legacyDevice = null;\n\t    \n\t        /**\n\t         * Message settings.\n\t         * @member {ISettings|null|undefined} settings\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.settings = null;\n\t    \n\t        /**\n\t         * Message status.\n\t         * @member {IStatus|null|undefined} status\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.status = null;\n\t    \n\t        /**\n\t         * Message device.\n\t         * @member {IDevice|null|undefined} device\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.device = null;\n\t    \n\t        /**\n\t         * Message bytes.\n\t         * @member {IBytes|null|undefined} bytes\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.bytes = null;\n\t    \n\t        /**\n\t         * Message initialSettings.\n\t         * @member {IInitialSettings|null|undefined} initialSettings\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.initialSettings = null;\n\t    \n\t        /**\n\t         * Message cancel.\n\t         * @member {ICancel|null|undefined} cancel\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.cancel = null;\n\t    \n\t        /**\n\t         * Message getHistoryRequest.\n\t         * @member {IGetHistoryRequest|null|undefined} getHistoryRequest\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.getHistoryRequest = null;\n\t    \n\t        /**\n\t         * Message mute.\n\t         * @member {IMute|null|undefined} mute\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.mute = null;\n\t    \n\t        /**\n\t         * Message timestamp.\n\t         * @member {number|Long} timestamp\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\t    \n\t        /**\n\t         * Message meta.\n\t         * @member {Object.<string,string>} meta\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Message.prototype.meta = $util.emptyObject;\n\t    \n\t        // OneOf field names bound to virtual getters and setters\n\t        var $oneOfFields;\n\t    \n\t        /**\n\t         * Message content.\n\t         * @member {\"voice\"|\"text\"|\"systemMessage\"|\"legacyDevice\"|\"settings\"|\"status\"|\"device\"|\"bytes\"|\"initialSettings\"|\"cancel\"|\"getHistoryRequest\"|\"mute\"|undefined} content\n\t         * @memberof Message\n\t         * @instance\n\t         */\n\t        Object.defineProperty(Message.prototype, \"content\", {\n\t            get: $util.oneOfGetter($oneOfFields = [\"voice\", \"text\", \"systemMessage\", \"legacyDevice\", \"settings\", \"status\", \"device\", \"bytes\", \"initialSettings\", \"cancel\", \"getHistoryRequest\", \"mute\"]),\n\t            set: $util.oneOfSetter($oneOfFields)\n\t        });\n\t    \n\t        /**\n\t         * Creates a new Message instance using the specified properties.\n\t         * @function create\n\t         * @memberof Message\n\t         * @static\n\t         * @param {IMessage=} [properties] Properties to set\n\t         * @returns {Message} Message instance\n\t         */\n\t        Message.create = function create(properties) {\n\t            return new Message(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof Message\n\t         * @static\n\t         * @param {IMessage} message Message message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        Message.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n\t                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n\t            if (message.messageId != null && Object.hasOwnProperty.call(message, \"messageId\"))\n\t                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.messageId);\n\t            if (message.last != null && Object.hasOwnProperty.call(message, \"last\"))\n\t                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.last);\n\t            if (message.token != null && Object.hasOwnProperty.call(message, \"token\"))\n\t                writer.uint32(/* id 4, wireType 2 =*/34).string(message.token);\n\t            if (message.voice != null && Object.hasOwnProperty.call(message, \"voice\"))\n\t                $root.Voice.encode(message.voice, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n\t            if (message.text != null && Object.hasOwnProperty.call(message, \"text\"))\n\t                $root.Text.encode(message.text, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n\t            if (message.systemMessage != null && Object.hasOwnProperty.call(message, \"systemMessage\"))\n\t                $root.SystemMessage.encode(message.systemMessage, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n\t            if (message.legacyDevice != null && Object.hasOwnProperty.call(message, \"legacyDevice\"))\n\t                $root.LegacyDevice.encode(message.legacyDevice, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n\t            if (message.settings != null && Object.hasOwnProperty.call(message, \"settings\"))\n\t                $root.Settings.encode(message.settings, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n\t            if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n\t                $root.Status.encode(message.status, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n\t            if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\"))\n\t                writer.uint32(/* id 11, wireType 2 =*/90).string(message.userChannel);\n\t            if (message.vpsToken != null && Object.hasOwnProperty.call(message, \"vpsToken\"))\n\t                writer.uint32(/* id 12, wireType 2 =*/98).string(message.vpsToken);\n\t            if (message.devContext != null && message.devContext.length)\n\t                for (var i = 0; i < message.devContext.length; ++i)\n\t                    $root.DevContext.encode(message.devContext[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n\t            if (message.messageName != null && Object.hasOwnProperty.call(message, \"messageName\"))\n\t                writer.uint32(/* id 14, wireType 2 =*/114).string(message.messageName);\n\t            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n\t                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.version);\n\t            if (message.device != null && Object.hasOwnProperty.call(message, \"device\"))\n\t                $root.Device.encode(message.device, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();\n\t            if (message.bytes != null && Object.hasOwnProperty.call(message, \"bytes\"))\n\t                $root.Bytes.encode(message.bytes, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n\t            if (message.initialSettings != null && Object.hasOwnProperty.call(message, \"initialSettings\"))\n\t                $root.InitialSettings.encode(message.initialSettings, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n\t            if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\"))\n\t                writer.uint32(/* id 19, wireType 0 =*/152).int64(message.timestamp);\n\t            if (message.meta != null && Object.hasOwnProperty.call(message, \"meta\"))\n\t                for (var keys = Object.keys(message.meta), i = 0; i < keys.length; ++i)\n\t                    writer.uint32(/* id 20, wireType 2 =*/162).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.meta[keys[i]]).ldelim();\n\t            if (message.cancel != null && Object.hasOwnProperty.call(message, \"cancel\"))\n\t                $root.Cancel.encode(message.cancel, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n\t            if (message.getHistoryRequest != null && Object.hasOwnProperty.call(message, \"getHistoryRequest\"))\n\t                $root.GetHistoryRequest.encode(message.getHistoryRequest, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n\t            if (message.mute != null && Object.hasOwnProperty.call(message, \"mute\"))\n\t                $root.Mute.encode(message.mute, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a Message message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof Message\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {Message} Message\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        Message.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Message(), key, value;\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.userId = reader.string();\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.messageId = reader.int64();\n\t                        break;\n\t                    }\n\t                case 3: {\n\t                        message.last = reader.int32();\n\t                        break;\n\t                    }\n\t                case 4: {\n\t                        message.token = reader.string();\n\t                        break;\n\t                    }\n\t                case 11: {\n\t                        message.userChannel = reader.string();\n\t                        break;\n\t                    }\n\t                case 12: {\n\t                        message.vpsToken = reader.string();\n\t                        break;\n\t                    }\n\t                case 13: {\n\t                        if (!(message.devContext && message.devContext.length))\n\t                            message.devContext = [];\n\t                        message.devContext.push($root.DevContext.decode(reader, reader.uint32()));\n\t                        break;\n\t                    }\n\t                case 14: {\n\t                        message.messageName = reader.string();\n\t                        break;\n\t                    }\n\t                case 15: {\n\t                        message.version = reader.int32();\n\t                        break;\n\t                    }\n\t                case 5: {\n\t                        message.voice = $root.Voice.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 6: {\n\t                        message.text = $root.Text.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 7: {\n\t                        message.systemMessage = $root.SystemMessage.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 8: {\n\t                        message.legacyDevice = $root.LegacyDevice.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 9: {\n\t                        message.settings = $root.Settings.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 10: {\n\t                        message.status = $root.Status.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 16: {\n\t                        message.device = $root.Device.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 17: {\n\t                        message.bytes = $root.Bytes.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 18: {\n\t                        message.initialSettings = $root.InitialSettings.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 21: {\n\t                        message.cancel = $root.Cancel.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 22: {\n\t                        message.getHistoryRequest = $root.GetHistoryRequest.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 23: {\n\t                        message.mute = $root.Mute.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 19: {\n\t                        message.timestamp = reader.int64();\n\t                        break;\n\t                    }\n\t                case 20: {\n\t                        if (message.meta === $util.emptyObject)\n\t                            message.meta = {};\n\t                        var end2 = reader.uint32() + reader.pos;\n\t                        key = \"\";\n\t                        value = \"\";\n\t                        while (reader.pos < end2) {\n\t                            var tag2 = reader.uint32();\n\t                            switch (tag2 >>> 3) {\n\t                            case 1:\n\t                                key = reader.string();\n\t                                break;\n\t                            case 2:\n\t                                value = reader.string();\n\t                                break;\n\t                            default:\n\t                                reader.skipType(tag2 & 7);\n\t                                break;\n\t                            }\n\t                        }\n\t                        message.meta[key] = value;\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return Message;\n\t    })();\n\t    \n\t    $root.InitialSettings = (function() {\n\t    \n\t        /**\n\t         * Properties of an InitialSettings.\n\t         * @exports IInitialSettings\n\t         * @interface IInitialSettings\n\t         * @property {string|null} [userId] InitialSettings userId\n\t         * @property {string|null} [userChannel] InitialSettings userChannel\n\t         * @property {IDevice|null} [device] InitialSettings device\n\t         * @property {ISettings|null} [settings] InitialSettings settings\n\t         * @property {string|null} [locale] InitialSettings locale\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new InitialSettings.\n\t         * @exports InitialSettings\n\t         * @classdesc Represents an InitialSettings.\n\t         * @implements IInitialSettings\n\t         * @constructor\n\t         * @param {IInitialSettings=} [properties] Properties to set\n\t         */\n\t        function InitialSettings(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * InitialSettings userId.\n\t         * @member {string} userId\n\t         * @memberof InitialSettings\n\t         * @instance\n\t         */\n\t        InitialSettings.prototype.userId = \"\";\n\t    \n\t        /**\n\t         * InitialSettings userChannel.\n\t         * @member {string} userChannel\n\t         * @memberof InitialSettings\n\t         * @instance\n\t         */\n\t        InitialSettings.prototype.userChannel = \"\";\n\t    \n\t        /**\n\t         * InitialSettings device.\n\t         * @member {IDevice|null|undefined} device\n\t         * @memberof InitialSettings\n\t         * @instance\n\t         */\n\t        InitialSettings.prototype.device = null;\n\t    \n\t        /**\n\t         * InitialSettings settings.\n\t         * @member {ISettings|null|undefined} settings\n\t         * @memberof InitialSettings\n\t         * @instance\n\t         */\n\t        InitialSettings.prototype.settings = null;\n\t    \n\t        /**\n\t         * InitialSettings locale.\n\t         * @member {string} locale\n\t         * @memberof InitialSettings\n\t         * @instance\n\t         */\n\t        InitialSettings.prototype.locale = \"\";\n\t    \n\t        /**\n\t         * Creates a new InitialSettings instance using the specified properties.\n\t         * @function create\n\t         * @memberof InitialSettings\n\t         * @static\n\t         * @param {IInitialSettings=} [properties] Properties to set\n\t         * @returns {InitialSettings} InitialSettings instance\n\t         */\n\t        InitialSettings.create = function create(properties) {\n\t            return new InitialSettings(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified InitialSettings message. Does not implicitly {@link InitialSettings.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof InitialSettings\n\t         * @static\n\t         * @param {IInitialSettings} message InitialSettings message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        InitialSettings.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n\t                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n\t            if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\"))\n\t                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userChannel);\n\t            if (message.device != null && Object.hasOwnProperty.call(message, \"device\"))\n\t                $root.Device.encode(message.device, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n\t            if (message.settings != null && Object.hasOwnProperty.call(message, \"settings\"))\n\t                $root.Settings.encode(message.settings, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n\t            if (message.locale != null && Object.hasOwnProperty.call(message, \"locale\"))\n\t                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locale);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes an InitialSettings message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof InitialSettings\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {InitialSettings} InitialSettings\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        InitialSettings.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.InitialSettings();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.userId = reader.string();\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.userChannel = reader.string();\n\t                        break;\n\t                    }\n\t                case 3: {\n\t                        message.device = $root.Device.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 4: {\n\t                        message.settings = $root.Settings.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 5: {\n\t                        message.locale = reader.string();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return InitialSettings;\n\t    })();\n\t    \n\t    $root.Device = (function() {\n\t    \n\t        /**\n\t         * Properties of a Device.\n\t         * @exports IDevice\n\t         * @interface IDevice\n\t         * @property {string|null} [platformType] Device platformType\n\t         * @property {string|null} [platformVersion] Device platformVersion\n\t         * @property {string|null} [surface] Обязательно. Пример, SBERBOX\n\t         * @property {string|null} [surfaceVersion] Device surfaceVersion\n\t         * @property {string|null} [features] Device features\n\t         * @property {string|null} [capabilities] Device capabilities\n\t         * @property {string|null} [deviceId] Device deviceId\n\t         * @property {string|null} [deviceManufacturer] Device deviceManufacturer\n\t         * @property {string|null} [deviceModel] Device deviceModel\n\t         * @property {string|null} [additionalInfo] Device additionalInfo\n\t         * @property {string|null} [tenant] Device tenant\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new Device.\n\t         * @exports Device\n\t         * @classdesc Represents a Device.\n\t         * @implements IDevice\n\t         * @constructor\n\t         * @param {IDevice=} [properties] Properties to set\n\t         */\n\t        function Device(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * Device platformType.\n\t         * @member {string} platformType\n\t         * @memberof Device\n\t         * @instance\n\t         */\n\t        Device.prototype.platformType = \"\";\n\t    \n\t        /**\n\t         * Device platformVersion.\n\t         * @member {string} platformVersion\n\t         * @memberof Device\n\t         * @instance\n\t         */\n\t        Device.prototype.platformVersion = \"\";\n\t    \n\t        /**\n\t         * Обязательно. Пример, SBERBOX\n\t         * @member {string} surface\n\t         * @memberof Device\n\t         * @instance\n\t         */\n\t        Device.prototype.surface = \"\";\n\t    \n\t        /**\n\t         * Device surfaceVersion.\n\t         * @member {string} surfaceVersion\n\t         * @memberof Device\n\t         * @instance\n\t         */\n\t        Device.prototype.surfaceVersion = \"\";\n\t    \n\t        /**\n\t         * Device features.\n\t         * @member {string} features\n\t         * @memberof Device\n\t         * @instance\n\t         */\n\t        Device.prototype.features = \"\";\n\t    \n\t        /**\n\t         * Device capabilities.\n\t         * @member {string} capabilities\n\t         * @memberof Device\n\t         * @instance\n\t         */\n\t        Device.prototype.capabilities = \"\";\n\t    \n\t        /**\n\t         * Device deviceId.\n\t         * @member {string} deviceId\n\t         * @memberof Device\n\t         * @instance\n\t         */\n\t        Device.prototype.deviceId = \"\";\n\t    \n\t        /**\n\t         * Device deviceManufacturer.\n\t         * @member {string} deviceManufacturer\n\t         * @memberof Device\n\t         * @instance\n\t         */\n\t        Device.prototype.deviceManufacturer = \"\";\n\t    \n\t        /**\n\t         * Device deviceModel.\n\t         * @member {string} deviceModel\n\t         * @memberof Device\n\t         * @instance\n\t         */\n\t        Device.prototype.deviceModel = \"\";\n\t    \n\t        /**\n\t         * Device additionalInfo.\n\t         * @member {string} additionalInfo\n\t         * @memberof Device\n\t         * @instance\n\t         */\n\t        Device.prototype.additionalInfo = \"\";\n\t    \n\t        /**\n\t         * Device tenant.\n\t         * @member {string} tenant\n\t         * @memberof Device\n\t         * @instance\n\t         */\n\t        Device.prototype.tenant = \"\";\n\t    \n\t        /**\n\t         * Creates a new Device instance using the specified properties.\n\t         * @function create\n\t         * @memberof Device\n\t         * @static\n\t         * @param {IDevice=} [properties] Properties to set\n\t         * @returns {Device} Device instance\n\t         */\n\t        Device.create = function create(properties) {\n\t            return new Device(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified Device message. Does not implicitly {@link Device.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof Device\n\t         * @static\n\t         * @param {IDevice} message Device message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        Device.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.platformType != null && Object.hasOwnProperty.call(message, \"platformType\"))\n\t                writer.uint32(/* id 1, wireType 2 =*/10).string(message.platformType);\n\t            if (message.platformVersion != null && Object.hasOwnProperty.call(message, \"platformVersion\"))\n\t                writer.uint32(/* id 2, wireType 2 =*/18).string(message.platformVersion);\n\t            if (message.surface != null && Object.hasOwnProperty.call(message, \"surface\"))\n\t                writer.uint32(/* id 3, wireType 2 =*/26).string(message.surface);\n\t            if (message.surfaceVersion != null && Object.hasOwnProperty.call(message, \"surfaceVersion\"))\n\t                writer.uint32(/* id 4, wireType 2 =*/34).string(message.surfaceVersion);\n\t            if (message.features != null && Object.hasOwnProperty.call(message, \"features\"))\n\t                writer.uint32(/* id 5, wireType 2 =*/42).string(message.features);\n\t            if (message.capabilities != null && Object.hasOwnProperty.call(message, \"capabilities\"))\n\t                writer.uint32(/* id 6, wireType 2 =*/50).string(message.capabilities);\n\t            if (message.deviceId != null && Object.hasOwnProperty.call(message, \"deviceId\"))\n\t                writer.uint32(/* id 7, wireType 2 =*/58).string(message.deviceId);\n\t            if (message.deviceManufacturer != null && Object.hasOwnProperty.call(message, \"deviceManufacturer\"))\n\t                writer.uint32(/* id 8, wireType 2 =*/66).string(message.deviceManufacturer);\n\t            if (message.deviceModel != null && Object.hasOwnProperty.call(message, \"deviceModel\"))\n\t                writer.uint32(/* id 9, wireType 2 =*/74).string(message.deviceModel);\n\t            if (message.additionalInfo != null && Object.hasOwnProperty.call(message, \"additionalInfo\"))\n\t                writer.uint32(/* id 10, wireType 2 =*/82).string(message.additionalInfo);\n\t            if (message.tenant != null && Object.hasOwnProperty.call(message, \"tenant\"))\n\t                writer.uint32(/* id 11, wireType 2 =*/90).string(message.tenant);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a Device message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof Device\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {Device} Device\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        Device.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Device();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.platformType = reader.string();\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.platformVersion = reader.string();\n\t                        break;\n\t                    }\n\t                case 3: {\n\t                        message.surface = reader.string();\n\t                        break;\n\t                    }\n\t                case 4: {\n\t                        message.surfaceVersion = reader.string();\n\t                        break;\n\t                    }\n\t                case 5: {\n\t                        message.features = reader.string();\n\t                        break;\n\t                    }\n\t                case 6: {\n\t                        message.capabilities = reader.string();\n\t                        break;\n\t                    }\n\t                case 7: {\n\t                        message.deviceId = reader.string();\n\t                        break;\n\t                    }\n\t                case 8: {\n\t                        message.deviceManufacturer = reader.string();\n\t                        break;\n\t                    }\n\t                case 9: {\n\t                        message.deviceModel = reader.string();\n\t                        break;\n\t                    }\n\t                case 10: {\n\t                        message.additionalInfo = reader.string();\n\t                        break;\n\t                    }\n\t                case 11: {\n\t                        message.tenant = reader.string();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return Device;\n\t    })();\n\t    \n\t    $root.Settings = (function() {\n\t    \n\t        /**\n\t         * Properties of a Settings.\n\t         * @exports ISettings\n\t         * @interface ISettings\n\t         * @property {number|null} [dubbing] Settings dubbing\n\t         * @property {number|null} [echo] Settings echo\n\t         * @property {string|null} [ttsEngine] Settings ttsEngine\n\t         * @property {string|null} [asrEngine] Settings asrEngine\n\t         * @property {number|null} [asrAutoStop] Settings asrAutoStop\n\t         * @property {number|null} [devMode] Settings devMode\n\t         * @property {string|null} [authConnector] Settings authConnector\n\t         * @property {string|null} [surface] Settings surface\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new Settings.\n\t         * @exports Settings\n\t         * @classdesc Represents a Settings.\n\t         * @implements ISettings\n\t         * @constructor\n\t         * @param {ISettings=} [properties] Properties to set\n\t         */\n\t        function Settings(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * Settings dubbing.\n\t         * @member {number} dubbing\n\t         * @memberof Settings\n\t         * @instance\n\t         */\n\t        Settings.prototype.dubbing = 0;\n\t    \n\t        /**\n\t         * Settings echo.\n\t         * @member {number} echo\n\t         * @memberof Settings\n\t         * @instance\n\t         */\n\t        Settings.prototype.echo = 0;\n\t    \n\t        /**\n\t         * Settings ttsEngine.\n\t         * @member {string} ttsEngine\n\t         * @memberof Settings\n\t         * @instance\n\t         */\n\t        Settings.prototype.ttsEngine = \"\";\n\t    \n\t        /**\n\t         * Settings asrEngine.\n\t         * @member {string} asrEngine\n\t         * @memberof Settings\n\t         * @instance\n\t         */\n\t        Settings.prototype.asrEngine = \"\";\n\t    \n\t        /**\n\t         * Settings asrAutoStop.\n\t         * @member {number} asrAutoStop\n\t         * @memberof Settings\n\t         * @instance\n\t         */\n\t        Settings.prototype.asrAutoStop = 0;\n\t    \n\t        /**\n\t         * Settings devMode.\n\t         * @member {number} devMode\n\t         * @memberof Settings\n\t         * @instance\n\t         */\n\t        Settings.prototype.devMode = 0;\n\t    \n\t        /**\n\t         * Settings authConnector.\n\t         * @member {string} authConnector\n\t         * @memberof Settings\n\t         * @instance\n\t         */\n\t        Settings.prototype.authConnector = \"\";\n\t    \n\t        /**\n\t         * Settings surface.\n\t         * @member {string} surface\n\t         * @memberof Settings\n\t         * @instance\n\t         */\n\t        Settings.prototype.surface = \"\";\n\t    \n\t        /**\n\t         * Creates a new Settings instance using the specified properties.\n\t         * @function create\n\t         * @memberof Settings\n\t         * @static\n\t         * @param {ISettings=} [properties] Properties to set\n\t         * @returns {Settings} Settings instance\n\t         */\n\t        Settings.create = function create(properties) {\n\t            return new Settings(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified Settings message. Does not implicitly {@link Settings.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof Settings\n\t         * @static\n\t         * @param {ISettings} message Settings message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        Settings.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.dubbing != null && Object.hasOwnProperty.call(message, \"dubbing\"))\n\t                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.dubbing);\n\t            if (message.echo != null && Object.hasOwnProperty.call(message, \"echo\"))\n\t                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.echo);\n\t            if (message.ttsEngine != null && Object.hasOwnProperty.call(message, \"ttsEngine\"))\n\t                writer.uint32(/* id 3, wireType 2 =*/26).string(message.ttsEngine);\n\t            if (message.asrEngine != null && Object.hasOwnProperty.call(message, \"asrEngine\"))\n\t                writer.uint32(/* id 4, wireType 2 =*/34).string(message.asrEngine);\n\t            if (message.asrAutoStop != null && Object.hasOwnProperty.call(message, \"asrAutoStop\"))\n\t                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.asrAutoStop);\n\t            if (message.devMode != null && Object.hasOwnProperty.call(message, \"devMode\"))\n\t                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.devMode);\n\t            if (message.authConnector != null && Object.hasOwnProperty.call(message, \"authConnector\"))\n\t                writer.uint32(/* id 7, wireType 2 =*/58).string(message.authConnector);\n\t            if (message.surface != null && Object.hasOwnProperty.call(message, \"surface\"))\n\t                writer.uint32(/* id 8, wireType 2 =*/66).string(message.surface);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a Settings message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof Settings\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {Settings} Settings\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        Settings.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Settings();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.dubbing = reader.int32();\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.echo = reader.int32();\n\t                        break;\n\t                    }\n\t                case 3: {\n\t                        message.ttsEngine = reader.string();\n\t                        break;\n\t                    }\n\t                case 4: {\n\t                        message.asrEngine = reader.string();\n\t                        break;\n\t                    }\n\t                case 5: {\n\t                        message.asrAutoStop = reader.int32();\n\t                        break;\n\t                    }\n\t                case 6: {\n\t                        message.devMode = reader.int32();\n\t                        break;\n\t                    }\n\t                case 7: {\n\t                        message.authConnector = reader.string();\n\t                        break;\n\t                    }\n\t                case 8: {\n\t                        message.surface = reader.string();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return Settings;\n\t    })();\n\t    \n\t    $root.LegacyDevice = (function() {\n\t    \n\t        /**\n\t         * Properties of a LegacyDevice.\n\t         * @exports ILegacyDevice\n\t         * @interface ILegacyDevice\n\t         * @property {string|null} [clientType] LegacyDevice clientType\n\t         * @property {string|null} [channel] LegacyDevice channel\n\t         * @property {string|null} [channelVersion] LegacyDevice channelVersion\n\t         * @property {string|null} [platformName] LegacyDevice platformName\n\t         * @property {string|null} [platformVersion] LegacyDevice platformVersion\n\t         * @property {string|null} [sdkVersion] LegacyDevice sdkVersion\n\t         * @property {string|null} [protocolVersion] LegacyDevice protocolVersion\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new LegacyDevice.\n\t         * @exports LegacyDevice\n\t         * @classdesc Represents a LegacyDevice.\n\t         * @implements ILegacyDevice\n\t         * @constructor\n\t         * @param {ILegacyDevice=} [properties] Properties to set\n\t         */\n\t        function LegacyDevice(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * LegacyDevice clientType.\n\t         * @member {string} clientType\n\t         * @memberof LegacyDevice\n\t         * @instance\n\t         */\n\t        LegacyDevice.prototype.clientType = \"\";\n\t    \n\t        /**\n\t         * LegacyDevice channel.\n\t         * @member {string} channel\n\t         * @memberof LegacyDevice\n\t         * @instance\n\t         */\n\t        LegacyDevice.prototype.channel = \"\";\n\t    \n\t        /**\n\t         * LegacyDevice channelVersion.\n\t         * @member {string} channelVersion\n\t         * @memberof LegacyDevice\n\t         * @instance\n\t         */\n\t        LegacyDevice.prototype.channelVersion = \"\";\n\t    \n\t        /**\n\t         * LegacyDevice platformName.\n\t         * @member {string} platformName\n\t         * @memberof LegacyDevice\n\t         * @instance\n\t         */\n\t        LegacyDevice.prototype.platformName = \"\";\n\t    \n\t        /**\n\t         * LegacyDevice platformVersion.\n\t         * @member {string} platformVersion\n\t         * @memberof LegacyDevice\n\t         * @instance\n\t         */\n\t        LegacyDevice.prototype.platformVersion = \"\";\n\t    \n\t        /**\n\t         * LegacyDevice sdkVersion.\n\t         * @member {string} sdkVersion\n\t         * @memberof LegacyDevice\n\t         * @instance\n\t         */\n\t        LegacyDevice.prototype.sdkVersion = \"\";\n\t    \n\t        /**\n\t         * LegacyDevice protocolVersion.\n\t         * @member {string} protocolVersion\n\t         * @memberof LegacyDevice\n\t         * @instance\n\t         */\n\t        LegacyDevice.prototype.protocolVersion = \"\";\n\t    \n\t        /**\n\t         * Creates a new LegacyDevice instance using the specified properties.\n\t         * @function create\n\t         * @memberof LegacyDevice\n\t         * @static\n\t         * @param {ILegacyDevice=} [properties] Properties to set\n\t         * @returns {LegacyDevice} LegacyDevice instance\n\t         */\n\t        LegacyDevice.create = function create(properties) {\n\t            return new LegacyDevice(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified LegacyDevice message. Does not implicitly {@link LegacyDevice.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof LegacyDevice\n\t         * @static\n\t         * @param {ILegacyDevice} message LegacyDevice message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        LegacyDevice.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.clientType != null && Object.hasOwnProperty.call(message, \"clientType\"))\n\t                writer.uint32(/* id 1, wireType 2 =*/10).string(message.clientType);\n\t            if (message.channel != null && Object.hasOwnProperty.call(message, \"channel\"))\n\t                writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel);\n\t            if (message.channelVersion != null && Object.hasOwnProperty.call(message, \"channelVersion\"))\n\t                writer.uint32(/* id 3, wireType 2 =*/26).string(message.channelVersion);\n\t            if (message.platformName != null && Object.hasOwnProperty.call(message, \"platformName\"))\n\t                writer.uint32(/* id 4, wireType 2 =*/34).string(message.platformName);\n\t            if (message.platformVersion != null && Object.hasOwnProperty.call(message, \"platformVersion\"))\n\t                writer.uint32(/* id 5, wireType 2 =*/42).string(message.platformVersion);\n\t            if (message.sdkVersion != null && Object.hasOwnProperty.call(message, \"sdkVersion\"))\n\t                writer.uint32(/* id 6, wireType 2 =*/50).string(message.sdkVersion);\n\t            if (message.protocolVersion != null && Object.hasOwnProperty.call(message, \"protocolVersion\"))\n\t                writer.uint32(/* id 7, wireType 2 =*/58).string(message.protocolVersion);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a LegacyDevice message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof LegacyDevice\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {LegacyDevice} LegacyDevice\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        LegacyDevice.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LegacyDevice();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.clientType = reader.string();\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.channel = reader.string();\n\t                        break;\n\t                    }\n\t                case 3: {\n\t                        message.channelVersion = reader.string();\n\t                        break;\n\t                    }\n\t                case 4: {\n\t                        message.platformName = reader.string();\n\t                        break;\n\t                    }\n\t                case 5: {\n\t                        message.platformVersion = reader.string();\n\t                        break;\n\t                    }\n\t                case 6: {\n\t                        message.sdkVersion = reader.string();\n\t                        break;\n\t                    }\n\t                case 7: {\n\t                        message.protocolVersion = reader.string();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return LegacyDevice;\n\t    })();\n\t    \n\t    $root.Voice = (function() {\n\t    \n\t        /**\n\t         * Properties of a Voice.\n\t         * @exports IVoice\n\t         * @interface IVoice\n\t         * @property {Uint8Array|null} [data] Voice data\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new Voice.\n\t         * @exports Voice\n\t         * @classdesc Represents a Voice.\n\t         * @implements IVoice\n\t         * @constructor\n\t         * @param {IVoice=} [properties] Properties to set\n\t         */\n\t        function Voice(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * Voice data.\n\t         * @member {Uint8Array} data\n\t         * @memberof Voice\n\t         * @instance\n\t         */\n\t        Voice.prototype.data = $util.newBuffer([]);\n\t    \n\t        /**\n\t         * Creates a new Voice instance using the specified properties.\n\t         * @function create\n\t         * @memberof Voice\n\t         * @static\n\t         * @param {IVoice=} [properties] Properties to set\n\t         * @returns {Voice} Voice instance\n\t         */\n\t        Voice.create = function create(properties) {\n\t            return new Voice(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified Voice message. Does not implicitly {@link Voice.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof Voice\n\t         * @static\n\t         * @param {IVoice} message Voice message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        Voice.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n\t                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a Voice message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof Voice\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {Voice} Voice\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        Voice.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Voice();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.data = reader.bytes();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return Voice;\n\t    })();\n\t    \n\t    $root.Text = (function() {\n\t    \n\t        /**\n\t         * Properties of a Text.\n\t         * @exports IText\n\t         * @interface IText\n\t         * @property {string|null} [data] Text data\n\t         * @property {string|null} [type] Text type\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new Text.\n\t         * @exports Text\n\t         * @classdesc Represents a Text.\n\t         * @implements IText\n\t         * @constructor\n\t         * @param {IText=} [properties] Properties to set\n\t         */\n\t        function Text(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * Text data.\n\t         * @member {string} data\n\t         * @memberof Text\n\t         * @instance\n\t         */\n\t        Text.prototype.data = \"\";\n\t    \n\t        /**\n\t         * Text type.\n\t         * @member {string} type\n\t         * @memberof Text\n\t         * @instance\n\t         */\n\t        Text.prototype.type = \"\";\n\t    \n\t        /**\n\t         * Creates a new Text instance using the specified properties.\n\t         * @function create\n\t         * @memberof Text\n\t         * @static\n\t         * @param {IText=} [properties] Properties to set\n\t         * @returns {Text} Text instance\n\t         */\n\t        Text.create = function create(properties) {\n\t            return new Text(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified Text message. Does not implicitly {@link Text.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof Text\n\t         * @static\n\t         * @param {IText} message Text message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        Text.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n\t                writer.uint32(/* id 1, wireType 2 =*/10).string(message.data);\n\t            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n\t                writer.uint32(/* id 2, wireType 2 =*/18).string(message.type);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a Text message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof Text\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {Text} Text\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        Text.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Text();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.data = reader.string();\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.type = reader.string();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return Text;\n\t    })();\n\t    \n\t    $root.SystemMessage = (function() {\n\t    \n\t        /**\n\t         * Properties of a SystemMessage.\n\t         * @exports ISystemMessage\n\t         * @interface ISystemMessage\n\t         * @property {string|null} [data] SystemMessage data\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new SystemMessage.\n\t         * @exports SystemMessage\n\t         * @classdesc Represents a SystemMessage.\n\t         * @implements ISystemMessage\n\t         * @constructor\n\t         * @param {ISystemMessage=} [properties] Properties to set\n\t         */\n\t        function SystemMessage(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * SystemMessage data.\n\t         * @member {string} data\n\t         * @memberof SystemMessage\n\t         * @instance\n\t         */\n\t        SystemMessage.prototype.data = \"\";\n\t    \n\t        /**\n\t         * Creates a new SystemMessage instance using the specified properties.\n\t         * @function create\n\t         * @memberof SystemMessage\n\t         * @static\n\t         * @param {ISystemMessage=} [properties] Properties to set\n\t         * @returns {SystemMessage} SystemMessage instance\n\t         */\n\t        SystemMessage.create = function create(properties) {\n\t            return new SystemMessage(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified SystemMessage message. Does not implicitly {@link SystemMessage.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof SystemMessage\n\t         * @static\n\t         * @param {ISystemMessage} message SystemMessage message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        SystemMessage.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n\t                writer.uint32(/* id 1, wireType 2 =*/10).string(message.data);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a SystemMessage message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof SystemMessage\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {SystemMessage} SystemMessage\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        SystemMessage.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SystemMessage();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.data = reader.string();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return SystemMessage;\n\t    })();\n\t    \n\t    $root.Status = (function() {\n\t    \n\t        /**\n\t         * Properties of a Status.\n\t         * @exports IStatus\n\t         * @interface IStatus\n\t         * @property {number|null} [code] Status code\n\t         * @property {string|null} [description] Status description\n\t         * @property {string|null} [technicalDescription] Status technicalDescription\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new Status.\n\t         * @exports Status\n\t         * @classdesc Represents a Status.\n\t         * @implements IStatus\n\t         * @constructor\n\t         * @param {IStatus=} [properties] Properties to set\n\t         */\n\t        function Status(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * Status code.\n\t         * @member {number} code\n\t         * @memberof Status\n\t         * @instance\n\t         */\n\t        Status.prototype.code = 0;\n\t    \n\t        /**\n\t         * Status description.\n\t         * @member {string} description\n\t         * @memberof Status\n\t         * @instance\n\t         */\n\t        Status.prototype.description = \"\";\n\t    \n\t        /**\n\t         * Status technicalDescription.\n\t         * @member {string} technicalDescription\n\t         * @memberof Status\n\t         * @instance\n\t         */\n\t        Status.prototype.technicalDescription = \"\";\n\t    \n\t        /**\n\t         * Creates a new Status instance using the specified properties.\n\t         * @function create\n\t         * @memberof Status\n\t         * @static\n\t         * @param {IStatus=} [properties] Properties to set\n\t         * @returns {Status} Status instance\n\t         */\n\t        Status.create = function create(properties) {\n\t            return new Status(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified Status message. Does not implicitly {@link Status.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof Status\n\t         * @static\n\t         * @param {IStatus} message Status message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        Status.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n\t                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);\n\t            if (message.description != null && Object.hasOwnProperty.call(message, \"description\"))\n\t                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);\n\t            if (message.technicalDescription != null && Object.hasOwnProperty.call(message, \"technicalDescription\"))\n\t                writer.uint32(/* id 3, wireType 2 =*/26).string(message.technicalDescription);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a Status message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof Status\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {Status} Status\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        Status.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Status();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.code = reader.int32();\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.description = reader.string();\n\t                        break;\n\t                    }\n\t                case 3: {\n\t                        message.technicalDescription = reader.string();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return Status;\n\t    })();\n\t    \n\t    $root.Bytes = (function() {\n\t    \n\t        /**\n\t         * Properties of a Bytes.\n\t         * @exports IBytes\n\t         * @interface IBytes\n\t         * @property {Uint8Array|null} [data] Bytes data\n\t         * @property {string|null} [desc] Bytes desc\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new Bytes.\n\t         * @exports Bytes\n\t         * @classdesc Represents a Bytes.\n\t         * @implements IBytes\n\t         * @constructor\n\t         * @param {IBytes=} [properties] Properties to set\n\t         */\n\t        function Bytes(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * Bytes data.\n\t         * @member {Uint8Array} data\n\t         * @memberof Bytes\n\t         * @instance\n\t         */\n\t        Bytes.prototype.data = $util.newBuffer([]);\n\t    \n\t        /**\n\t         * Bytes desc.\n\t         * @member {string} desc\n\t         * @memberof Bytes\n\t         * @instance\n\t         */\n\t        Bytes.prototype.desc = \"\";\n\t    \n\t        /**\n\t         * Creates a new Bytes instance using the specified properties.\n\t         * @function create\n\t         * @memberof Bytes\n\t         * @static\n\t         * @param {IBytes=} [properties] Properties to set\n\t         * @returns {Bytes} Bytes instance\n\t         */\n\t        Bytes.create = function create(properties) {\n\t            return new Bytes(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified Bytes message. Does not implicitly {@link Bytes.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof Bytes\n\t         * @static\n\t         * @param {IBytes} message Bytes message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        Bytes.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n\t                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);\n\t            if (message.desc != null && Object.hasOwnProperty.call(message, \"desc\"))\n\t                writer.uint32(/* id 2, wireType 2 =*/18).string(message.desc);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a Bytes message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof Bytes\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {Bytes} Bytes\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        Bytes.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Bytes();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.data = reader.bytes();\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.desc = reader.string();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return Bytes;\n\t    })();\n\t    \n\t    $root.DevContext = (function() {\n\t    \n\t        /**\n\t         * Properties of a DevContext.\n\t         * @exports IDevContext\n\t         * @interface IDevContext\n\t         * @property {string|null} [name] DevContext name\n\t         * @property {number|Long|null} [timestampMs] DevContext timestampMs\n\t         * @property {string|null} [data] DevContext data\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new DevContext.\n\t         * @exports DevContext\n\t         * @classdesc Represents a DevContext.\n\t         * @implements IDevContext\n\t         * @constructor\n\t         * @param {IDevContext=} [properties] Properties to set\n\t         */\n\t        function DevContext(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * DevContext name.\n\t         * @member {string} name\n\t         * @memberof DevContext\n\t         * @instance\n\t         */\n\t        DevContext.prototype.name = \"\";\n\t    \n\t        /**\n\t         * DevContext timestampMs.\n\t         * @member {number|Long} timestampMs\n\t         * @memberof DevContext\n\t         * @instance\n\t         */\n\t        DevContext.prototype.timestampMs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\t    \n\t        /**\n\t         * DevContext data.\n\t         * @member {string} data\n\t         * @memberof DevContext\n\t         * @instance\n\t         */\n\t        DevContext.prototype.data = \"\";\n\t    \n\t        /**\n\t         * Creates a new DevContext instance using the specified properties.\n\t         * @function create\n\t         * @memberof DevContext\n\t         * @static\n\t         * @param {IDevContext=} [properties] Properties to set\n\t         * @returns {DevContext} DevContext instance\n\t         */\n\t        DevContext.create = function create(properties) {\n\t            return new DevContext(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified DevContext message. Does not implicitly {@link DevContext.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof DevContext\n\t         * @static\n\t         * @param {IDevContext} message DevContext message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        DevContext.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n\t                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n\t            if (message.timestampMs != null && Object.hasOwnProperty.call(message, \"timestampMs\"))\n\t                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timestampMs);\n\t            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n\t                writer.uint32(/* id 3, wireType 2 =*/26).string(message.data);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a DevContext message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof DevContext\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {DevContext} DevContext\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        DevContext.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DevContext();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.name = reader.string();\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.timestampMs = reader.int64();\n\t                        break;\n\t                    }\n\t                case 3: {\n\t                        message.data = reader.string();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return DevContext;\n\t    })();\n\t    \n\t    $root.Cancel = (function() {\n\t    \n\t        /**\n\t         * Properties of a Cancel.\n\t         * @exports ICancel\n\t         * @interface ICancel\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new Cancel.\n\t         * @exports Cancel\n\t         * @classdesc Represents a Cancel.\n\t         * @implements ICancel\n\t         * @constructor\n\t         * @param {ICancel=} [properties] Properties to set\n\t         */\n\t        function Cancel(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * Creates a new Cancel instance using the specified properties.\n\t         * @function create\n\t         * @memberof Cancel\n\t         * @static\n\t         * @param {ICancel=} [properties] Properties to set\n\t         * @returns {Cancel} Cancel instance\n\t         */\n\t        Cancel.create = function create(properties) {\n\t            return new Cancel(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified Cancel message. Does not implicitly {@link Cancel.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof Cancel\n\t         * @static\n\t         * @param {ICancel} message Cancel message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        Cancel.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a Cancel message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof Cancel\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {Cancel} Cancel\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        Cancel.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Cancel();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return Cancel;\n\t    })();\n\t    \n\t    $root.Mute = (function() {\n\t    \n\t        /**\n\t         * Properties of a Mute.\n\t         * @exports IMute\n\t         * @interface IMute\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new Mute.\n\t         * @exports Mute\n\t         * @classdesc Represents a Mute.\n\t         * @implements IMute\n\t         * @constructor\n\t         * @param {IMute=} [properties] Properties to set\n\t         */\n\t        function Mute(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * Creates a new Mute instance using the specified properties.\n\t         * @function create\n\t         * @memberof Mute\n\t         * @static\n\t         * @param {IMute=} [properties] Properties to set\n\t         * @returns {Mute} Mute instance\n\t         */\n\t        Mute.create = function create(properties) {\n\t            return new Mute(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified Mute message. Does not implicitly {@link Mute.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof Mute\n\t         * @static\n\t         * @param {IMute} message Mute message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        Mute.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a Mute message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof Mute\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {Mute} Mute\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        Mute.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Mute();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return Mute;\n\t    })();\n\t    \n\t    $root.GetHistoryRequest = (function() {\n\t    \n\t        /**\n\t         * Properties of a GetHistoryRequest.\n\t         * @exports IGetHistoryRequest\n\t         * @interface IGetHistoryRequest\n\t         * @property {Array.<string>|null} [messageTypes] GetHistoryRequest messageTypes\n\t         * @property {IApp|null} [app] GetHistoryRequest app\n\t         * @property {IOffset|null} [offset] GetHistoryRequest offset\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new GetHistoryRequest.\n\t         * @exports GetHistoryRequest\n\t         * @classdesc Represents a GetHistoryRequest.\n\t         * @implements IGetHistoryRequest\n\t         * @constructor\n\t         * @param {IGetHistoryRequest=} [properties] Properties to set\n\t         */\n\t        function GetHistoryRequest(properties) {\n\t            this.messageTypes = [];\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * GetHistoryRequest messageTypes.\n\t         * @member {Array.<string>} messageTypes\n\t         * @memberof GetHistoryRequest\n\t         * @instance\n\t         */\n\t        GetHistoryRequest.prototype.messageTypes = $util.emptyArray;\n\t    \n\t        /**\n\t         * GetHistoryRequest app.\n\t         * @member {IApp|null|undefined} app\n\t         * @memberof GetHistoryRequest\n\t         * @instance\n\t         */\n\t        GetHistoryRequest.prototype.app = null;\n\t    \n\t        /**\n\t         * GetHistoryRequest offset.\n\t         * @member {IOffset|null|undefined} offset\n\t         * @memberof GetHistoryRequest\n\t         * @instance\n\t         */\n\t        GetHistoryRequest.prototype.offset = null;\n\t    \n\t        /**\n\t         * Creates a new GetHistoryRequest instance using the specified properties.\n\t         * @function create\n\t         * @memberof GetHistoryRequest\n\t         * @static\n\t         * @param {IGetHistoryRequest=} [properties] Properties to set\n\t         * @returns {GetHistoryRequest} GetHistoryRequest instance\n\t         */\n\t        GetHistoryRequest.create = function create(properties) {\n\t            return new GetHistoryRequest(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified GetHistoryRequest message. Does not implicitly {@link GetHistoryRequest.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof GetHistoryRequest\n\t         * @static\n\t         * @param {IGetHistoryRequest} message GetHistoryRequest message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        GetHistoryRequest.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.messageTypes != null && message.messageTypes.length)\n\t                for (var i = 0; i < message.messageTypes.length; ++i)\n\t                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.messageTypes[i]);\n\t            if (message.app != null && Object.hasOwnProperty.call(message, \"app\"))\n\t                $root.App.encode(message.app, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n\t            if (message.offset != null && Object.hasOwnProperty.call(message, \"offset\"))\n\t                $root.Offset.encode(message.offset, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a GetHistoryRequest message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof GetHistoryRequest\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {GetHistoryRequest} GetHistoryRequest\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        GetHistoryRequest.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetHistoryRequest();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        if (!(message.messageTypes && message.messageTypes.length))\n\t                            message.messageTypes = [];\n\t                        message.messageTypes.push(reader.string());\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.app = $root.App.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 3: {\n\t                        message.offset = $root.Offset.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return GetHistoryRequest;\n\t    })();\n\t    \n\t    $root.App = (function() {\n\t    \n\t        /**\n\t         * Properties of an App.\n\t         * @exports IApp\n\t         * @interface IApp\n\t         * @property {google.protobuf.IStringValue|null} [type] App type\n\t         * @property {google.protobuf.IStringValue|null} [projectId] App projectId\n\t         * @property {google.protobuf.IStringValue|null} [systemName] App systemName\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new App.\n\t         * @exports App\n\t         * @classdesc Represents an App.\n\t         * @implements IApp\n\t         * @constructor\n\t         * @param {IApp=} [properties] Properties to set\n\t         */\n\t        function App(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * App type.\n\t         * @member {google.protobuf.IStringValue|null|undefined} type\n\t         * @memberof App\n\t         * @instance\n\t         */\n\t        App.prototype.type = null;\n\t    \n\t        /**\n\t         * App projectId.\n\t         * @member {google.protobuf.IStringValue|null|undefined} projectId\n\t         * @memberof App\n\t         * @instance\n\t         */\n\t        App.prototype.projectId = null;\n\t    \n\t        /**\n\t         * App systemName.\n\t         * @member {google.protobuf.IStringValue|null|undefined} systemName\n\t         * @memberof App\n\t         * @instance\n\t         */\n\t        App.prototype.systemName = null;\n\t    \n\t        /**\n\t         * Creates a new App instance using the specified properties.\n\t         * @function create\n\t         * @memberof App\n\t         * @static\n\t         * @param {IApp=} [properties] Properties to set\n\t         * @returns {App} App instance\n\t         */\n\t        App.create = function create(properties) {\n\t            return new App(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified App message. Does not implicitly {@link App.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof App\n\t         * @static\n\t         * @param {IApp} message App message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        App.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n\t                $root.google.protobuf.StringValue.encode(message.type, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n\t            if (message.projectId != null && Object.hasOwnProperty.call(message, \"projectId\"))\n\t                $root.google.protobuf.StringValue.encode(message.projectId, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n\t            if (message.systemName != null && Object.hasOwnProperty.call(message, \"systemName\"))\n\t                $root.google.protobuf.StringValue.encode(message.systemName, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes an App message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof App\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {App} App\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        App.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.App();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.type = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.projectId = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 3: {\n\t                        message.systemName = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return App;\n\t    })();\n\t    \n\t    $root.Offset = (function() {\n\t    \n\t        /**\n\t         * Properties of an Offset.\n\t         * @exports IOffset\n\t         * @interface IOffset\n\t         * @property {google.protobuf.IStringValue|null} [limit] Offset limit\n\t         * @property {google.protobuf.IStringValue|null} [contentId] Offset contentId\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new Offset.\n\t         * @exports Offset\n\t         * @classdesc Represents an Offset.\n\t         * @implements IOffset\n\t         * @constructor\n\t         * @param {IOffset=} [properties] Properties to set\n\t         */\n\t        function Offset(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * Offset limit.\n\t         * @member {google.protobuf.IStringValue|null|undefined} limit\n\t         * @memberof Offset\n\t         * @instance\n\t         */\n\t        Offset.prototype.limit = null;\n\t    \n\t        /**\n\t         * Offset contentId.\n\t         * @member {google.protobuf.IStringValue|null|undefined} contentId\n\t         * @memberof Offset\n\t         * @instance\n\t         */\n\t        Offset.prototype.contentId = null;\n\t    \n\t        /**\n\t         * Creates a new Offset instance using the specified properties.\n\t         * @function create\n\t         * @memberof Offset\n\t         * @static\n\t         * @param {IOffset=} [properties] Properties to set\n\t         * @returns {Offset} Offset instance\n\t         */\n\t        Offset.create = function create(properties) {\n\t            return new Offset(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified Offset message. Does not implicitly {@link Offset.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof Offset\n\t         * @static\n\t         * @param {IOffset} message Offset message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        Offset.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.limit != null && Object.hasOwnProperty.call(message, \"limit\"))\n\t                $root.google.protobuf.StringValue.encode(message.limit, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n\t            if (message.contentId != null && Object.hasOwnProperty.call(message, \"contentId\"))\n\t                $root.google.protobuf.StringValue.encode(message.contentId, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes an Offset message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof Offset\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {Offset} Offset\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        Offset.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Offset();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.limit = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.contentId = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return Offset;\n\t    })();\n\t    \n\t    $root.ChatHistoryRequest = (function() {\n\t    \n\t        /**\n\t         * Properties of a ChatHistoryRequest.\n\t         * @exports IChatHistoryRequest\n\t         * @interface IChatHistoryRequest\n\t         * @property {IUuid|null} [uuid] ChatHistoryRequest uuid\n\t         * @property {IDevice|null} [device] ChatHistoryRequest device\n\t         * @property {IGetHistoryRequest|null} [getHistoryRequest] ChatHistoryRequest getHistoryRequest\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new ChatHistoryRequest.\n\t         * @exports ChatHistoryRequest\n\t         * @classdesc Represents a ChatHistoryRequest.\n\t         * @implements IChatHistoryRequest\n\t         * @constructor\n\t         * @param {IChatHistoryRequest=} [properties] Properties to set\n\t         */\n\t        function ChatHistoryRequest(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * ChatHistoryRequest uuid.\n\t         * @member {IUuid|null|undefined} uuid\n\t         * @memberof ChatHistoryRequest\n\t         * @instance\n\t         */\n\t        ChatHistoryRequest.prototype.uuid = null;\n\t    \n\t        /**\n\t         * ChatHistoryRequest device.\n\t         * @member {IDevice|null|undefined} device\n\t         * @memberof ChatHistoryRequest\n\t         * @instance\n\t         */\n\t        ChatHistoryRequest.prototype.device = null;\n\t    \n\t        /**\n\t         * ChatHistoryRequest getHistoryRequest.\n\t         * @member {IGetHistoryRequest|null|undefined} getHistoryRequest\n\t         * @memberof ChatHistoryRequest\n\t         * @instance\n\t         */\n\t        ChatHistoryRequest.prototype.getHistoryRequest = null;\n\t    \n\t        /**\n\t         * Creates a new ChatHistoryRequest instance using the specified properties.\n\t         * @function create\n\t         * @memberof ChatHistoryRequest\n\t         * @static\n\t         * @param {IChatHistoryRequest=} [properties] Properties to set\n\t         * @returns {ChatHistoryRequest} ChatHistoryRequest instance\n\t         */\n\t        ChatHistoryRequest.create = function create(properties) {\n\t            return new ChatHistoryRequest(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified ChatHistoryRequest message. Does not implicitly {@link ChatHistoryRequest.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof ChatHistoryRequest\n\t         * @static\n\t         * @param {IChatHistoryRequest} message ChatHistoryRequest message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        ChatHistoryRequest.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.uuid != null && Object.hasOwnProperty.call(message, \"uuid\"))\n\t                $root.Uuid.encode(message.uuid, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n\t            if (message.device != null && Object.hasOwnProperty.call(message, \"device\"))\n\t                $root.Device.encode(message.device, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n\t            if (message.getHistoryRequest != null && Object.hasOwnProperty.call(message, \"getHistoryRequest\"))\n\t                $root.GetHistoryRequest.encode(message.getHistoryRequest, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a ChatHistoryRequest message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof ChatHistoryRequest\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {ChatHistoryRequest} ChatHistoryRequest\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        ChatHistoryRequest.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ChatHistoryRequest();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.uuid = $root.Uuid.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.device = $root.Device.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                case 4: {\n\t                        message.getHistoryRequest = $root.GetHistoryRequest.decode(reader, reader.uint32());\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return ChatHistoryRequest;\n\t    })();\n\t    \n\t    $root.Uuid = (function() {\n\t    \n\t        /**\n\t         * Properties of an Uuid.\n\t         * @exports IUuid\n\t         * @interface IUuid\n\t         * @property {string|null} [userId] Uuid userId\n\t         * @property {string|null} [userChannel] Uuid userChannel\n\t         * @property {string|null} [sub] Uuid sub\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new Uuid.\n\t         * @exports Uuid\n\t         * @classdesc Represents an Uuid.\n\t         * @implements IUuid\n\t         * @constructor\n\t         * @param {IUuid=} [properties] Properties to set\n\t         */\n\t        function Uuid(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * Uuid userId.\n\t         * @member {string} userId\n\t         * @memberof Uuid\n\t         * @instance\n\t         */\n\t        Uuid.prototype.userId = \"\";\n\t    \n\t        /**\n\t         * Uuid userChannel.\n\t         * @member {string} userChannel\n\t         * @memberof Uuid\n\t         * @instance\n\t         */\n\t        Uuid.prototype.userChannel = \"\";\n\t    \n\t        /**\n\t         * Uuid sub.\n\t         * @member {string} sub\n\t         * @memberof Uuid\n\t         * @instance\n\t         */\n\t        Uuid.prototype.sub = \"\";\n\t    \n\t        /**\n\t         * Creates a new Uuid instance using the specified properties.\n\t         * @function create\n\t         * @memberof Uuid\n\t         * @static\n\t         * @param {IUuid=} [properties] Properties to set\n\t         * @returns {Uuid} Uuid instance\n\t         */\n\t        Uuid.create = function create(properties) {\n\t            return new Uuid(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified Uuid message. Does not implicitly {@link Uuid.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof Uuid\n\t         * @static\n\t         * @param {IUuid} message Uuid message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        Uuid.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n\t                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n\t            if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\"))\n\t                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userChannel);\n\t            if (message.sub != null && Object.hasOwnProperty.call(message, \"sub\"))\n\t                writer.uint32(/* id 3, wireType 2 =*/26).string(message.sub);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes an Uuid message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof Uuid\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {Uuid} Uuid\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        Uuid.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Uuid();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.userId = reader.string();\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.userChannel = reader.string();\n\t                        break;\n\t                    }\n\t                case 3: {\n\t                        message.sub = reader.string();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return Uuid;\n\t    })();\n\t    \n\t    $root.GetHistoryResponse = (function() {\n\t    \n\t        /**\n\t         * Properties of a GetHistoryResponse.\n\t         * @exports IGetHistoryResponse\n\t         * @interface IGetHistoryResponse\n\t         * @property {Array.<IHistoryMessages>|null} [historyMessages] GetHistoryResponse historyMessages\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new GetHistoryResponse.\n\t         * @exports GetHistoryResponse\n\t         * @classdesc Represents a GetHistoryResponse.\n\t         * @implements IGetHistoryResponse\n\t         * @constructor\n\t         * @param {IGetHistoryResponse=} [properties] Properties to set\n\t         */\n\t        function GetHistoryResponse(properties) {\n\t            this.historyMessages = [];\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * GetHistoryResponse historyMessages.\n\t         * @member {Array.<IHistoryMessages>} historyMessages\n\t         * @memberof GetHistoryResponse\n\t         * @instance\n\t         */\n\t        GetHistoryResponse.prototype.historyMessages = $util.emptyArray;\n\t    \n\t        /**\n\t         * Creates a new GetHistoryResponse instance using the specified properties.\n\t         * @function create\n\t         * @memberof GetHistoryResponse\n\t         * @static\n\t         * @param {IGetHistoryResponse=} [properties] Properties to set\n\t         * @returns {GetHistoryResponse} GetHistoryResponse instance\n\t         */\n\t        GetHistoryResponse.create = function create(properties) {\n\t            return new GetHistoryResponse(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified GetHistoryResponse message. Does not implicitly {@link GetHistoryResponse.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof GetHistoryResponse\n\t         * @static\n\t         * @param {IGetHistoryResponse} message GetHistoryResponse message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        GetHistoryResponse.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.historyMessages != null && message.historyMessages.length)\n\t                for (var i = 0; i < message.historyMessages.length; ++i)\n\t                    $root.HistoryMessages.encode(message.historyMessages[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a GetHistoryResponse message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof GetHistoryResponse\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {GetHistoryResponse} GetHistoryResponse\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        GetHistoryResponse.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetHistoryResponse();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        if (!(message.historyMessages && message.historyMessages.length))\n\t                            message.historyMessages = [];\n\t                        message.historyMessages.push($root.HistoryMessages.decode(reader, reader.uint32()));\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return GetHistoryResponse;\n\t    })();\n\t    \n\t    $root.HistoryMessages = (function() {\n\t    \n\t        /**\n\t         * Properties of a HistoryMessages.\n\t         * @exports IHistoryMessages\n\t         * @interface IHistoryMessages\n\t         * @property {string|null} [content] HistoryMessages content\n\t         * @property {string|null} [contentId] HistoryMessages contentId\n\t         * @property {string|null} [timeCreated] HistoryMessages timeCreated\n\t         */\n\t    \n\t        /**\n\t         * Constructs a new HistoryMessages.\n\t         * @exports HistoryMessages\n\t         * @classdesc Represents a HistoryMessages.\n\t         * @implements IHistoryMessages\n\t         * @constructor\n\t         * @param {IHistoryMessages=} [properties] Properties to set\n\t         */\n\t        function HistoryMessages(properties) {\n\t            if (properties)\n\t                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                    if (properties[keys[i]] != null)\n\t                        this[keys[i]] = properties[keys[i]];\n\t        }\n\t    \n\t        /**\n\t         * HistoryMessages content.\n\t         * @member {string} content\n\t         * @memberof HistoryMessages\n\t         * @instance\n\t         */\n\t        HistoryMessages.prototype.content = \"\";\n\t    \n\t        /**\n\t         * HistoryMessages contentId.\n\t         * @member {string} contentId\n\t         * @memberof HistoryMessages\n\t         * @instance\n\t         */\n\t        HistoryMessages.prototype.contentId = \"\";\n\t    \n\t        /**\n\t         * HistoryMessages timeCreated.\n\t         * @member {string} timeCreated\n\t         * @memberof HistoryMessages\n\t         * @instance\n\t         */\n\t        HistoryMessages.prototype.timeCreated = \"\";\n\t    \n\t        /**\n\t         * Creates a new HistoryMessages instance using the specified properties.\n\t         * @function create\n\t         * @memberof HistoryMessages\n\t         * @static\n\t         * @param {IHistoryMessages=} [properties] Properties to set\n\t         * @returns {HistoryMessages} HistoryMessages instance\n\t         */\n\t        HistoryMessages.create = function create(properties) {\n\t            return new HistoryMessages(properties);\n\t        };\n\t    \n\t        /**\n\t         * Encodes the specified HistoryMessages message. Does not implicitly {@link HistoryMessages.verify|verify} messages.\n\t         * @function encode\n\t         * @memberof HistoryMessages\n\t         * @static\n\t         * @param {IHistoryMessages} message HistoryMessages message or plain object to encode\n\t         * @param {$protobuf.Writer} [writer] Writer to encode to\n\t         * @returns {$protobuf.Writer} Writer\n\t         */\n\t        HistoryMessages.encode = function encode(message, writer) {\n\t            if (!writer)\n\t                writer = $Writer.create();\n\t            if (message.content != null && Object.hasOwnProperty.call(message, \"content\"))\n\t                writer.uint32(/* id 1, wireType 2 =*/10).string(message.content);\n\t            if (message.contentId != null && Object.hasOwnProperty.call(message, \"contentId\"))\n\t                writer.uint32(/* id 2, wireType 2 =*/18).string(message.contentId);\n\t            if (message.timeCreated != null && Object.hasOwnProperty.call(message, \"timeCreated\"))\n\t                writer.uint32(/* id 3, wireType 2 =*/26).string(message.timeCreated);\n\t            return writer;\n\t        };\n\t    \n\t        /**\n\t         * Decodes a HistoryMessages message from the specified reader or buffer.\n\t         * @function decode\n\t         * @memberof HistoryMessages\n\t         * @static\n\t         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t         * @param {number} [length] Message length if known beforehand\n\t         * @returns {HistoryMessages} HistoryMessages\n\t         * @throws {Error} If the payload is not a reader or valid buffer\n\t         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t         */\n\t        HistoryMessages.decode = function decode(reader, length) {\n\t            if (!(reader instanceof $Reader))\n\t                reader = $Reader.create(reader);\n\t            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HistoryMessages();\n\t            while (reader.pos < end) {\n\t                var tag = reader.uint32();\n\t                switch (tag >>> 3) {\n\t                case 1: {\n\t                        message.content = reader.string();\n\t                        break;\n\t                    }\n\t                case 2: {\n\t                        message.contentId = reader.string();\n\t                        break;\n\t                    }\n\t                case 3: {\n\t                        message.timeCreated = reader.string();\n\t                        break;\n\t                    }\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t                }\n\t            }\n\t            return message;\n\t        };\n\t    \n\t        return HistoryMessages;\n\t    })();\n\t    \n\t    $root.google = (function() {\n\t    \n\t        /**\n\t         * Namespace google.\n\t         * @exports google\n\t         * @namespace\n\t         */\n\t        var google = {};\n\t    \n\t        google.protobuf = (function() {\n\t    \n\t            /**\n\t             * Namespace protobuf.\n\t             * @memberof google\n\t             * @namespace\n\t             */\n\t            var protobuf = {};\n\t    \n\t            protobuf.DoubleValue = (function() {\n\t    \n\t                /**\n\t                 * Properties of a DoubleValue.\n\t                 * @memberof google.protobuf\n\t                 * @interface IDoubleValue\n\t                 * @property {number|null} [value] DoubleValue value\n\t                 */\n\t    \n\t                /**\n\t                 * Constructs a new DoubleValue.\n\t                 * @memberof google.protobuf\n\t                 * @classdesc Represents a DoubleValue.\n\t                 * @implements IDoubleValue\n\t                 * @constructor\n\t                 * @param {google.protobuf.IDoubleValue=} [properties] Properties to set\n\t                 */\n\t                function DoubleValue(properties) {\n\t                    if (properties)\n\t                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                            if (properties[keys[i]] != null)\n\t                                this[keys[i]] = properties[keys[i]];\n\t                }\n\t    \n\t                /**\n\t                 * DoubleValue value.\n\t                 * @member {number} value\n\t                 * @memberof google.protobuf.DoubleValue\n\t                 * @instance\n\t                 */\n\t                DoubleValue.prototype.value = 0;\n\t    \n\t                /**\n\t                 * Creates a new DoubleValue instance using the specified properties.\n\t                 * @function create\n\t                 * @memberof google.protobuf.DoubleValue\n\t                 * @static\n\t                 * @param {google.protobuf.IDoubleValue=} [properties] Properties to set\n\t                 * @returns {google.protobuf.DoubleValue} DoubleValue instance\n\t                 */\n\t                DoubleValue.create = function create(properties) {\n\t                    return new DoubleValue(properties);\n\t                };\n\t    \n\t                /**\n\t                 * Encodes the specified DoubleValue message. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.\n\t                 * @function encode\n\t                 * @memberof google.protobuf.DoubleValue\n\t                 * @static\n\t                 * @param {google.protobuf.IDoubleValue} message DoubleValue message or plain object to encode\n\t                 * @param {$protobuf.Writer} [writer] Writer to encode to\n\t                 * @returns {$protobuf.Writer} Writer\n\t                 */\n\t                DoubleValue.encode = function encode(message, writer) {\n\t                    if (!writer)\n\t                        writer = $Writer.create();\n\t                    if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n\t                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.value);\n\t                    return writer;\n\t                };\n\t    \n\t                /**\n\t                 * Decodes a DoubleValue message from the specified reader or buffer.\n\t                 * @function decode\n\t                 * @memberof google.protobuf.DoubleValue\n\t                 * @static\n\t                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t                 * @param {number} [length] Message length if known beforehand\n\t                 * @returns {google.protobuf.DoubleValue} DoubleValue\n\t                 * @throws {Error} If the payload is not a reader or valid buffer\n\t                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t                 */\n\t                DoubleValue.decode = function decode(reader, length) {\n\t                    if (!(reader instanceof $Reader))\n\t                        reader = $Reader.create(reader);\n\t                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DoubleValue();\n\t                    while (reader.pos < end) {\n\t                        var tag = reader.uint32();\n\t                        switch (tag >>> 3) {\n\t                        case 1: {\n\t                                message.value = reader.double();\n\t                                break;\n\t                            }\n\t                        default:\n\t                            reader.skipType(tag & 7);\n\t                            break;\n\t                        }\n\t                    }\n\t                    return message;\n\t                };\n\t    \n\t                return DoubleValue;\n\t            })();\n\t    \n\t            protobuf.FloatValue = (function() {\n\t    \n\t                /**\n\t                 * Properties of a FloatValue.\n\t                 * @memberof google.protobuf\n\t                 * @interface IFloatValue\n\t                 * @property {number|null} [value] FloatValue value\n\t                 */\n\t    \n\t                /**\n\t                 * Constructs a new FloatValue.\n\t                 * @memberof google.protobuf\n\t                 * @classdesc Represents a FloatValue.\n\t                 * @implements IFloatValue\n\t                 * @constructor\n\t                 * @param {google.protobuf.IFloatValue=} [properties] Properties to set\n\t                 */\n\t                function FloatValue(properties) {\n\t                    if (properties)\n\t                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                            if (properties[keys[i]] != null)\n\t                                this[keys[i]] = properties[keys[i]];\n\t                }\n\t    \n\t                /**\n\t                 * FloatValue value.\n\t                 * @member {number} value\n\t                 * @memberof google.protobuf.FloatValue\n\t                 * @instance\n\t                 */\n\t                FloatValue.prototype.value = 0;\n\t    \n\t                /**\n\t                 * Creates a new FloatValue instance using the specified properties.\n\t                 * @function create\n\t                 * @memberof google.protobuf.FloatValue\n\t                 * @static\n\t                 * @param {google.protobuf.IFloatValue=} [properties] Properties to set\n\t                 * @returns {google.protobuf.FloatValue} FloatValue instance\n\t                 */\n\t                FloatValue.create = function create(properties) {\n\t                    return new FloatValue(properties);\n\t                };\n\t    \n\t                /**\n\t                 * Encodes the specified FloatValue message. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.\n\t                 * @function encode\n\t                 * @memberof google.protobuf.FloatValue\n\t                 * @static\n\t                 * @param {google.protobuf.IFloatValue} message FloatValue message or plain object to encode\n\t                 * @param {$protobuf.Writer} [writer] Writer to encode to\n\t                 * @returns {$protobuf.Writer} Writer\n\t                 */\n\t                FloatValue.encode = function encode(message, writer) {\n\t                    if (!writer)\n\t                        writer = $Writer.create();\n\t                    if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n\t                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.value);\n\t                    return writer;\n\t                };\n\t    \n\t                /**\n\t                 * Decodes a FloatValue message from the specified reader or buffer.\n\t                 * @function decode\n\t                 * @memberof google.protobuf.FloatValue\n\t                 * @static\n\t                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t                 * @param {number} [length] Message length if known beforehand\n\t                 * @returns {google.protobuf.FloatValue} FloatValue\n\t                 * @throws {Error} If the payload is not a reader or valid buffer\n\t                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t                 */\n\t                FloatValue.decode = function decode(reader, length) {\n\t                    if (!(reader instanceof $Reader))\n\t                        reader = $Reader.create(reader);\n\t                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FloatValue();\n\t                    while (reader.pos < end) {\n\t                        var tag = reader.uint32();\n\t                        switch (tag >>> 3) {\n\t                        case 1: {\n\t                                message.value = reader.float();\n\t                                break;\n\t                            }\n\t                        default:\n\t                            reader.skipType(tag & 7);\n\t                            break;\n\t                        }\n\t                    }\n\t                    return message;\n\t                };\n\t    \n\t                return FloatValue;\n\t            })();\n\t    \n\t            protobuf.Int64Value = (function() {\n\t    \n\t                /**\n\t                 * Properties of an Int64Value.\n\t                 * @memberof google.protobuf\n\t                 * @interface IInt64Value\n\t                 * @property {number|Long|null} [value] Int64Value value\n\t                 */\n\t    \n\t                /**\n\t                 * Constructs a new Int64Value.\n\t                 * @memberof google.protobuf\n\t                 * @classdesc Represents an Int64Value.\n\t                 * @implements IInt64Value\n\t                 * @constructor\n\t                 * @param {google.protobuf.IInt64Value=} [properties] Properties to set\n\t                 */\n\t                function Int64Value(properties) {\n\t                    if (properties)\n\t                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                            if (properties[keys[i]] != null)\n\t                                this[keys[i]] = properties[keys[i]];\n\t                }\n\t    \n\t                /**\n\t                 * Int64Value value.\n\t                 * @member {number|Long} value\n\t                 * @memberof google.protobuf.Int64Value\n\t                 * @instance\n\t                 */\n\t                Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\t    \n\t                /**\n\t                 * Creates a new Int64Value instance using the specified properties.\n\t                 * @function create\n\t                 * @memberof google.protobuf.Int64Value\n\t                 * @static\n\t                 * @param {google.protobuf.IInt64Value=} [properties] Properties to set\n\t                 * @returns {google.protobuf.Int64Value} Int64Value instance\n\t                 */\n\t                Int64Value.create = function create(properties) {\n\t                    return new Int64Value(properties);\n\t                };\n\t    \n\t                /**\n\t                 * Encodes the specified Int64Value message. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.\n\t                 * @function encode\n\t                 * @memberof google.protobuf.Int64Value\n\t                 * @static\n\t                 * @param {google.protobuf.IInt64Value} message Int64Value message or plain object to encode\n\t                 * @param {$protobuf.Writer} [writer] Writer to encode to\n\t                 * @returns {$protobuf.Writer} Writer\n\t                 */\n\t                Int64Value.encode = function encode(message, writer) {\n\t                    if (!writer)\n\t                        writer = $Writer.create();\n\t                    if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n\t                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.value);\n\t                    return writer;\n\t                };\n\t    \n\t                /**\n\t                 * Decodes an Int64Value message from the specified reader or buffer.\n\t                 * @function decode\n\t                 * @memberof google.protobuf.Int64Value\n\t                 * @static\n\t                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t                 * @param {number} [length] Message length if known beforehand\n\t                 * @returns {google.protobuf.Int64Value} Int64Value\n\t                 * @throws {Error} If the payload is not a reader or valid buffer\n\t                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t                 */\n\t                Int64Value.decode = function decode(reader, length) {\n\t                    if (!(reader instanceof $Reader))\n\t                        reader = $Reader.create(reader);\n\t                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Int64Value();\n\t                    while (reader.pos < end) {\n\t                        var tag = reader.uint32();\n\t                        switch (tag >>> 3) {\n\t                        case 1: {\n\t                                message.value = reader.int64();\n\t                                break;\n\t                            }\n\t                        default:\n\t                            reader.skipType(tag & 7);\n\t                            break;\n\t                        }\n\t                    }\n\t                    return message;\n\t                };\n\t    \n\t                return Int64Value;\n\t            })();\n\t    \n\t            protobuf.UInt64Value = (function() {\n\t    \n\t                /**\n\t                 * Properties of a UInt64Value.\n\t                 * @memberof google.protobuf\n\t                 * @interface IUInt64Value\n\t                 * @property {number|Long|null} [value] UInt64Value value\n\t                 */\n\t    \n\t                /**\n\t                 * Constructs a new UInt64Value.\n\t                 * @memberof google.protobuf\n\t                 * @classdesc Represents a UInt64Value.\n\t                 * @implements IUInt64Value\n\t                 * @constructor\n\t                 * @param {google.protobuf.IUInt64Value=} [properties] Properties to set\n\t                 */\n\t                function UInt64Value(properties) {\n\t                    if (properties)\n\t                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                            if (properties[keys[i]] != null)\n\t                                this[keys[i]] = properties[keys[i]];\n\t                }\n\t    \n\t                /**\n\t                 * UInt64Value value.\n\t                 * @member {number|Long} value\n\t                 * @memberof google.protobuf.UInt64Value\n\t                 * @instance\n\t                 */\n\t                UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\t    \n\t                /**\n\t                 * Creates a new UInt64Value instance using the specified properties.\n\t                 * @function create\n\t                 * @memberof google.protobuf.UInt64Value\n\t                 * @static\n\t                 * @param {google.protobuf.IUInt64Value=} [properties] Properties to set\n\t                 * @returns {google.protobuf.UInt64Value} UInt64Value instance\n\t                 */\n\t                UInt64Value.create = function create(properties) {\n\t                    return new UInt64Value(properties);\n\t                };\n\t    \n\t                /**\n\t                 * Encodes the specified UInt64Value message. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.\n\t                 * @function encode\n\t                 * @memberof google.protobuf.UInt64Value\n\t                 * @static\n\t                 * @param {google.protobuf.IUInt64Value} message UInt64Value message or plain object to encode\n\t                 * @param {$protobuf.Writer} [writer] Writer to encode to\n\t                 * @returns {$protobuf.Writer} Writer\n\t                 */\n\t                UInt64Value.encode = function encode(message, writer) {\n\t                    if (!writer)\n\t                        writer = $Writer.create();\n\t                    if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n\t                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.value);\n\t                    return writer;\n\t                };\n\t    \n\t                /**\n\t                 * Decodes a UInt64Value message from the specified reader or buffer.\n\t                 * @function decode\n\t                 * @memberof google.protobuf.UInt64Value\n\t                 * @static\n\t                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t                 * @param {number} [length] Message length if known beforehand\n\t                 * @returns {google.protobuf.UInt64Value} UInt64Value\n\t                 * @throws {Error} If the payload is not a reader or valid buffer\n\t                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t                 */\n\t                UInt64Value.decode = function decode(reader, length) {\n\t                    if (!(reader instanceof $Reader))\n\t                        reader = $Reader.create(reader);\n\t                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UInt64Value();\n\t                    while (reader.pos < end) {\n\t                        var tag = reader.uint32();\n\t                        switch (tag >>> 3) {\n\t                        case 1: {\n\t                                message.value = reader.uint64();\n\t                                break;\n\t                            }\n\t                        default:\n\t                            reader.skipType(tag & 7);\n\t                            break;\n\t                        }\n\t                    }\n\t                    return message;\n\t                };\n\t    \n\t                return UInt64Value;\n\t            })();\n\t    \n\t            protobuf.Int32Value = (function() {\n\t    \n\t                /**\n\t                 * Properties of an Int32Value.\n\t                 * @memberof google.protobuf\n\t                 * @interface IInt32Value\n\t                 * @property {number|null} [value] Int32Value value\n\t                 */\n\t    \n\t                /**\n\t                 * Constructs a new Int32Value.\n\t                 * @memberof google.protobuf\n\t                 * @classdesc Represents an Int32Value.\n\t                 * @implements IInt32Value\n\t                 * @constructor\n\t                 * @param {google.protobuf.IInt32Value=} [properties] Properties to set\n\t                 */\n\t                function Int32Value(properties) {\n\t                    if (properties)\n\t                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                            if (properties[keys[i]] != null)\n\t                                this[keys[i]] = properties[keys[i]];\n\t                }\n\t    \n\t                /**\n\t                 * Int32Value value.\n\t                 * @member {number} value\n\t                 * @memberof google.protobuf.Int32Value\n\t                 * @instance\n\t                 */\n\t                Int32Value.prototype.value = 0;\n\t    \n\t                /**\n\t                 * Creates a new Int32Value instance using the specified properties.\n\t                 * @function create\n\t                 * @memberof google.protobuf.Int32Value\n\t                 * @static\n\t                 * @param {google.protobuf.IInt32Value=} [properties] Properties to set\n\t                 * @returns {google.protobuf.Int32Value} Int32Value instance\n\t                 */\n\t                Int32Value.create = function create(properties) {\n\t                    return new Int32Value(properties);\n\t                };\n\t    \n\t                /**\n\t                 * Encodes the specified Int32Value message. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.\n\t                 * @function encode\n\t                 * @memberof google.protobuf.Int32Value\n\t                 * @static\n\t                 * @param {google.protobuf.IInt32Value} message Int32Value message or plain object to encode\n\t                 * @param {$protobuf.Writer} [writer] Writer to encode to\n\t                 * @returns {$protobuf.Writer} Writer\n\t                 */\n\t                Int32Value.encode = function encode(message, writer) {\n\t                    if (!writer)\n\t                        writer = $Writer.create();\n\t                    if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n\t                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);\n\t                    return writer;\n\t                };\n\t    \n\t                /**\n\t                 * Decodes an Int32Value message from the specified reader or buffer.\n\t                 * @function decode\n\t                 * @memberof google.protobuf.Int32Value\n\t                 * @static\n\t                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t                 * @param {number} [length] Message length if known beforehand\n\t                 * @returns {google.protobuf.Int32Value} Int32Value\n\t                 * @throws {Error} If the payload is not a reader or valid buffer\n\t                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t                 */\n\t                Int32Value.decode = function decode(reader, length) {\n\t                    if (!(reader instanceof $Reader))\n\t                        reader = $Reader.create(reader);\n\t                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Int32Value();\n\t                    while (reader.pos < end) {\n\t                        var tag = reader.uint32();\n\t                        switch (tag >>> 3) {\n\t                        case 1: {\n\t                                message.value = reader.int32();\n\t                                break;\n\t                            }\n\t                        default:\n\t                            reader.skipType(tag & 7);\n\t                            break;\n\t                        }\n\t                    }\n\t                    return message;\n\t                };\n\t    \n\t                return Int32Value;\n\t            })();\n\t    \n\t            protobuf.UInt32Value = (function() {\n\t    \n\t                /**\n\t                 * Properties of a UInt32Value.\n\t                 * @memberof google.protobuf\n\t                 * @interface IUInt32Value\n\t                 * @property {number|null} [value] UInt32Value value\n\t                 */\n\t    \n\t                /**\n\t                 * Constructs a new UInt32Value.\n\t                 * @memberof google.protobuf\n\t                 * @classdesc Represents a UInt32Value.\n\t                 * @implements IUInt32Value\n\t                 * @constructor\n\t                 * @param {google.protobuf.IUInt32Value=} [properties] Properties to set\n\t                 */\n\t                function UInt32Value(properties) {\n\t                    if (properties)\n\t                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                            if (properties[keys[i]] != null)\n\t                                this[keys[i]] = properties[keys[i]];\n\t                }\n\t    \n\t                /**\n\t                 * UInt32Value value.\n\t                 * @member {number} value\n\t                 * @memberof google.protobuf.UInt32Value\n\t                 * @instance\n\t                 */\n\t                UInt32Value.prototype.value = 0;\n\t    \n\t                /**\n\t                 * Creates a new UInt32Value instance using the specified properties.\n\t                 * @function create\n\t                 * @memberof google.protobuf.UInt32Value\n\t                 * @static\n\t                 * @param {google.protobuf.IUInt32Value=} [properties] Properties to set\n\t                 * @returns {google.protobuf.UInt32Value} UInt32Value instance\n\t                 */\n\t                UInt32Value.create = function create(properties) {\n\t                    return new UInt32Value(properties);\n\t                };\n\t    \n\t                /**\n\t                 * Encodes the specified UInt32Value message. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.\n\t                 * @function encode\n\t                 * @memberof google.protobuf.UInt32Value\n\t                 * @static\n\t                 * @param {google.protobuf.IUInt32Value} message UInt32Value message or plain object to encode\n\t                 * @param {$protobuf.Writer} [writer] Writer to encode to\n\t                 * @returns {$protobuf.Writer} Writer\n\t                 */\n\t                UInt32Value.encode = function encode(message, writer) {\n\t                    if (!writer)\n\t                        writer = $Writer.create();\n\t                    if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n\t                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);\n\t                    return writer;\n\t                };\n\t    \n\t                /**\n\t                 * Decodes a UInt32Value message from the specified reader or buffer.\n\t                 * @function decode\n\t                 * @memberof google.protobuf.UInt32Value\n\t                 * @static\n\t                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t                 * @param {number} [length] Message length if known beforehand\n\t                 * @returns {google.protobuf.UInt32Value} UInt32Value\n\t                 * @throws {Error} If the payload is not a reader or valid buffer\n\t                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t                 */\n\t                UInt32Value.decode = function decode(reader, length) {\n\t                    if (!(reader instanceof $Reader))\n\t                        reader = $Reader.create(reader);\n\t                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UInt32Value();\n\t                    while (reader.pos < end) {\n\t                        var tag = reader.uint32();\n\t                        switch (tag >>> 3) {\n\t                        case 1: {\n\t                                message.value = reader.uint32();\n\t                                break;\n\t                            }\n\t                        default:\n\t                            reader.skipType(tag & 7);\n\t                            break;\n\t                        }\n\t                    }\n\t                    return message;\n\t                };\n\t    \n\t                return UInt32Value;\n\t            })();\n\t    \n\t            protobuf.BoolValue = (function() {\n\t    \n\t                /**\n\t                 * Properties of a BoolValue.\n\t                 * @memberof google.protobuf\n\t                 * @interface IBoolValue\n\t                 * @property {boolean|null} [value] BoolValue value\n\t                 */\n\t    \n\t                /**\n\t                 * Constructs a new BoolValue.\n\t                 * @memberof google.protobuf\n\t                 * @classdesc Represents a BoolValue.\n\t                 * @implements IBoolValue\n\t                 * @constructor\n\t                 * @param {google.protobuf.IBoolValue=} [properties] Properties to set\n\t                 */\n\t                function BoolValue(properties) {\n\t                    if (properties)\n\t                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                            if (properties[keys[i]] != null)\n\t                                this[keys[i]] = properties[keys[i]];\n\t                }\n\t    \n\t                /**\n\t                 * BoolValue value.\n\t                 * @member {boolean} value\n\t                 * @memberof google.protobuf.BoolValue\n\t                 * @instance\n\t                 */\n\t                BoolValue.prototype.value = false;\n\t    \n\t                /**\n\t                 * Creates a new BoolValue instance using the specified properties.\n\t                 * @function create\n\t                 * @memberof google.protobuf.BoolValue\n\t                 * @static\n\t                 * @param {google.protobuf.IBoolValue=} [properties] Properties to set\n\t                 * @returns {google.protobuf.BoolValue} BoolValue instance\n\t                 */\n\t                BoolValue.create = function create(properties) {\n\t                    return new BoolValue(properties);\n\t                };\n\t    \n\t                /**\n\t                 * Encodes the specified BoolValue message. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.\n\t                 * @function encode\n\t                 * @memberof google.protobuf.BoolValue\n\t                 * @static\n\t                 * @param {google.protobuf.IBoolValue} message BoolValue message or plain object to encode\n\t                 * @param {$protobuf.Writer} [writer] Writer to encode to\n\t                 * @returns {$protobuf.Writer} Writer\n\t                 */\n\t                BoolValue.encode = function encode(message, writer) {\n\t                    if (!writer)\n\t                        writer = $Writer.create();\n\t                    if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n\t                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);\n\t                    return writer;\n\t                };\n\t    \n\t                /**\n\t                 * Decodes a BoolValue message from the specified reader or buffer.\n\t                 * @function decode\n\t                 * @memberof google.protobuf.BoolValue\n\t                 * @static\n\t                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t                 * @param {number} [length] Message length if known beforehand\n\t                 * @returns {google.protobuf.BoolValue} BoolValue\n\t                 * @throws {Error} If the payload is not a reader or valid buffer\n\t                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t                 */\n\t                BoolValue.decode = function decode(reader, length) {\n\t                    if (!(reader instanceof $Reader))\n\t                        reader = $Reader.create(reader);\n\t                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.BoolValue();\n\t                    while (reader.pos < end) {\n\t                        var tag = reader.uint32();\n\t                        switch (tag >>> 3) {\n\t                        case 1: {\n\t                                message.value = reader.bool();\n\t                                break;\n\t                            }\n\t                        default:\n\t                            reader.skipType(tag & 7);\n\t                            break;\n\t                        }\n\t                    }\n\t                    return message;\n\t                };\n\t    \n\t                return BoolValue;\n\t            })();\n\t    \n\t            protobuf.StringValue = (function() {\n\t    \n\t                /**\n\t                 * Properties of a StringValue.\n\t                 * @memberof google.protobuf\n\t                 * @interface IStringValue\n\t                 * @property {string|null} [value] StringValue value\n\t                 */\n\t    \n\t                /**\n\t                 * Constructs a new StringValue.\n\t                 * @memberof google.protobuf\n\t                 * @classdesc Represents a StringValue.\n\t                 * @implements IStringValue\n\t                 * @constructor\n\t                 * @param {google.protobuf.IStringValue=} [properties] Properties to set\n\t                 */\n\t                function StringValue(properties) {\n\t                    if (properties)\n\t                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                            if (properties[keys[i]] != null)\n\t                                this[keys[i]] = properties[keys[i]];\n\t                }\n\t    \n\t                /**\n\t                 * StringValue value.\n\t                 * @member {string} value\n\t                 * @memberof google.protobuf.StringValue\n\t                 * @instance\n\t                 */\n\t                StringValue.prototype.value = \"\";\n\t    \n\t                /**\n\t                 * Creates a new StringValue instance using the specified properties.\n\t                 * @function create\n\t                 * @memberof google.protobuf.StringValue\n\t                 * @static\n\t                 * @param {google.protobuf.IStringValue=} [properties] Properties to set\n\t                 * @returns {google.protobuf.StringValue} StringValue instance\n\t                 */\n\t                StringValue.create = function create(properties) {\n\t                    return new StringValue(properties);\n\t                };\n\t    \n\t                /**\n\t                 * Encodes the specified StringValue message. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.\n\t                 * @function encode\n\t                 * @memberof google.protobuf.StringValue\n\t                 * @static\n\t                 * @param {google.protobuf.IStringValue} message StringValue message or plain object to encode\n\t                 * @param {$protobuf.Writer} [writer] Writer to encode to\n\t                 * @returns {$protobuf.Writer} Writer\n\t                 */\n\t                StringValue.encode = function encode(message, writer) {\n\t                    if (!writer)\n\t                        writer = $Writer.create();\n\t                    if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n\t                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);\n\t                    return writer;\n\t                };\n\t    \n\t                /**\n\t                 * Decodes a StringValue message from the specified reader or buffer.\n\t                 * @function decode\n\t                 * @memberof google.protobuf.StringValue\n\t                 * @static\n\t                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t                 * @param {number} [length] Message length if known beforehand\n\t                 * @returns {google.protobuf.StringValue} StringValue\n\t                 * @throws {Error} If the payload is not a reader or valid buffer\n\t                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t                 */\n\t                StringValue.decode = function decode(reader, length) {\n\t                    if (!(reader instanceof $Reader))\n\t                        reader = $Reader.create(reader);\n\t                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.StringValue();\n\t                    while (reader.pos < end) {\n\t                        var tag = reader.uint32();\n\t                        switch (tag >>> 3) {\n\t                        case 1: {\n\t                                message.value = reader.string();\n\t                                break;\n\t                            }\n\t                        default:\n\t                            reader.skipType(tag & 7);\n\t                            break;\n\t                        }\n\t                    }\n\t                    return message;\n\t                };\n\t    \n\t                return StringValue;\n\t            })();\n\t    \n\t            protobuf.BytesValue = (function() {\n\t    \n\t                /**\n\t                 * Properties of a BytesValue.\n\t                 * @memberof google.protobuf\n\t                 * @interface IBytesValue\n\t                 * @property {Uint8Array|null} [value] BytesValue value\n\t                 */\n\t    \n\t                /**\n\t                 * Constructs a new BytesValue.\n\t                 * @memberof google.protobuf\n\t                 * @classdesc Represents a BytesValue.\n\t                 * @implements IBytesValue\n\t                 * @constructor\n\t                 * @param {google.protobuf.IBytesValue=} [properties] Properties to set\n\t                 */\n\t                function BytesValue(properties) {\n\t                    if (properties)\n\t                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n\t                            if (properties[keys[i]] != null)\n\t                                this[keys[i]] = properties[keys[i]];\n\t                }\n\t    \n\t                /**\n\t                 * BytesValue value.\n\t                 * @member {Uint8Array} value\n\t                 * @memberof google.protobuf.BytesValue\n\t                 * @instance\n\t                 */\n\t                BytesValue.prototype.value = $util.newBuffer([]);\n\t    \n\t                /**\n\t                 * Creates a new BytesValue instance using the specified properties.\n\t                 * @function create\n\t                 * @memberof google.protobuf.BytesValue\n\t                 * @static\n\t                 * @param {google.protobuf.IBytesValue=} [properties] Properties to set\n\t                 * @returns {google.protobuf.BytesValue} BytesValue instance\n\t                 */\n\t                BytesValue.create = function create(properties) {\n\t                    return new BytesValue(properties);\n\t                };\n\t    \n\t                /**\n\t                 * Encodes the specified BytesValue message. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.\n\t                 * @function encode\n\t                 * @memberof google.protobuf.BytesValue\n\t                 * @static\n\t                 * @param {google.protobuf.IBytesValue} message BytesValue message or plain object to encode\n\t                 * @param {$protobuf.Writer} [writer] Writer to encode to\n\t                 * @returns {$protobuf.Writer} Writer\n\t                 */\n\t                BytesValue.encode = function encode(message, writer) {\n\t                    if (!writer)\n\t                        writer = $Writer.create();\n\t                    if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n\t                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.value);\n\t                    return writer;\n\t                };\n\t    \n\t                /**\n\t                 * Decodes a BytesValue message from the specified reader or buffer.\n\t                 * @function decode\n\t                 * @memberof google.protobuf.BytesValue\n\t                 * @static\n\t                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n\t                 * @param {number} [length] Message length if known beforehand\n\t                 * @returns {google.protobuf.BytesValue} BytesValue\n\t                 * @throws {Error} If the payload is not a reader or valid buffer\n\t                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n\t                 */\n\t                BytesValue.decode = function decode(reader, length) {\n\t                    if (!(reader instanceof $Reader))\n\t                        reader = $Reader.create(reader);\n\t                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.BytesValue();\n\t                    while (reader.pos < end) {\n\t                        var tag = reader.uint32();\n\t                        switch (tag >>> 3) {\n\t                        case 1: {\n\t                                message.value = reader.bytes();\n\t                                break;\n\t                            }\n\t                        default:\n\t                            reader.skipType(tag & 7);\n\t                            break;\n\t                        }\n\t                    }\n\t                    return message;\n\t                };\n\t    \n\t                return BytesValue;\n\t            })();\n\t    \n\t            return protobuf;\n\t        })();\n\t    \n\t        return google;\n\t    })();\n\n\t    return $root;\n\t}); \n} (proto));\n\nvar protoExports = proto.exports;\n\n// eslint-disable-next-line no-shadow\nvar VpsVersion;\n(function (VpsVersion) {\n    VpsVersion[VpsVersion[\"1.0\"] = 1] = \"1.0\";\n    VpsVersion[VpsVersion[\"2.0\"] = 2] = \"2.0\";\n    VpsVersion[VpsVersion[\"3.0\"] = 3] = \"3.0\";\n    VpsVersion[VpsVersion[\"4.0\"] = 4] = \"4.0\";\n    VpsVersion[VpsVersion[\"5.0\"] = 5] = \"5.0\";\n})(VpsVersion || (VpsVersion = {}));\nvar MessageNames = {\n    ANSWER_TO_USER: 'ANSWER_TO_USER',\n    STT: 'STT',\n    MTT: 'MUSIC_RECOGNITION',\n    DO_NOTHING: 'DO_NOTHING',\n};\n\nvar createClientMethods = function (_a) {\n    var getMessageId = _a.getMessageId, sendMessage = _a.sendMessage;\n    var send = function (_a) {\n        var payload = _a.payload, messageId = _a.messageId, other = __rest(_a, [\"payload\", \"messageId\"]);\n        sendMessage(__assign(__assign(__assign({ messageName: '' }, payload), { messageId: messageId }), other));\n    };\n    var sendDevice = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                device: protoExports.Device.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendInitialSettings = function (data, last, messageId, params) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        return send({\n            payload: __assign({ initialSettings: protoExports.InitialSettings.create(data), last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var getHistoryRequest = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        var uuid = data.uuid, device = data.device, historyClient = data.history;\n        var historyProto = { messageTypes: historyClient === null || historyClient === void 0 ? void 0 : historyClient.messageTypes };\n        // Мапим объект настроек от пользователя в формат объекта протобафа\n        if (historyClient === null || historyClient === void 0 ? void 0 : historyClient.app) {\n            historyProto.app = Object.entries(historyClient.app).reduce(function (acc, _a) {\n                var _b;\n                var key = _a[0], value = _a[1];\n                return (__assign(__assign({}, acc), (_b = {}, _b[key] = { value: value }, _b)));\n            }, {});\n        }\n        if (historyClient === null || historyClient === void 0 ? void 0 : historyClient.offset) {\n            historyProto.offset = Object.entries(historyClient.offset).reduce(function (acc, _a) {\n                var _b;\n                var key = _a[0], value = _a[1];\n                return (__assign(__assign({}, acc), (_b = {}, _b[key] = { value: value.toString() }, _b)));\n            }, {});\n        }\n        return send({\n            payload: __assign(__assign({}, protoExports.ChatHistoryRequest.create({\n                uuid: uuid,\n                device: device,\n                getHistoryRequest: historyProto,\n            })), { messageName: 'GET_HISTORY', last: last ? 1 : -1 }),\n            messageId: messageId,\n        });\n    };\n    var sendCancel = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                cancel: protoExports.Cancel.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendLegacyDevice = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                legacyDevice: protoExports.LegacyDevice.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendMute = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                mute: protoExports.Mute.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendSettings = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                settings: protoExports.Settings.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendText = function (data, params, type, messageId) {\n        var _a;\n        if (params === void 0) { params = {}; }\n        if (type === void 0) { type = ''; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        var text = type ? { data: data, type: type } : { data: data };\n        send(__assign({ payload: {\n                text: protoExports.Text.create(text),\n                last: (_a = params.last) !== null && _a !== void 0 ? _a : 1,\n            }, messageId: messageId }, params));\n    };\n    var sendSystemMessage = function (_a, last, messageId, params) {\n        var data = _a.data, _b = _a.messageName, mesName = _b === void 0 ? '' : _b;\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        send({\n            payload: __assign({ systemMessage: protoExports.SystemMessage.create({\n                    data: JSON.stringify(data),\n                }), messageName: mesName, last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var sendVoice = function (data, last, messageId, mesName, params) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        return send({\n            payload: __assign({ voice: protoExports.Voice.create({\n                    data: new Uint8Array(data),\n                }), messageName: mesName, last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var batch = function (cb) {\n        var batchingMessageId = getMessageId();\n        var lastMessageSent = false;\n        var checkLastMessageStatus = function (last) {\n            if (lastMessageSent) {\n                if (last) {\n                    throw new Error(\"Can't send two last items in batch\");\n                }\n                else {\n                    throw new Error(\"Can't send messages in batch after last message have been sent\");\n                }\n            }\n            else if (last) {\n                lastMessageSent = true;\n            }\n        };\n        var upgradedSendText = function () {\n            var _a = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                _a[_i] = arguments[_i];\n            }\n            var data = _a[0], params = _a[1], type = _a[2];\n            checkLastMessageStatus((params === null || params === void 0 ? void 0 : params.last) === 1);\n            return sendText(data, params, type, batchingMessageId);\n        };\n        var upgradedSendSystemMessage = function (data, last, params) {\n            checkLastMessageStatus(last);\n            return sendSystemMessage(data, last, batchingMessageId, params);\n        };\n        var upgradedSendVoice = function (data, last, mesName, params) {\n            checkLastMessageStatus(last);\n            return sendVoice(data, last, batchingMessageId, mesName, params);\n        };\n        var upgradedSendSettings = function (data, last, messageId) {\n            checkLastMessageStatus(last);\n            return sendSettings(data, last, messageId);\n        };\n        return cb({\n            sendText: upgradedSendText,\n            sendSystemMessage: upgradedSendSystemMessage,\n            sendVoice: upgradedSendVoice,\n            sendSettings: upgradedSendSettings,\n            messageId: batchingMessageId,\n        });\n    };\n    return {\n        sendDevice: sendDevice,\n        sendInitialSettings: sendInitialSettings,\n        getHistoryRequest: getHistoryRequest,\n        sendCancel: sendCancel,\n        sendLegacyDevice: sendLegacyDevice,\n        sendMute: sendMute,\n        sendSettings: sendSettings,\n        sendText: sendText,\n        sendSystemMessage: sendSystemMessage,\n        sendVoice: sendVoice,\n        batch: batch,\n    };\n};\n\nvar safeJSONParse = function (str, defaultValue) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (err) {\n        return defaultValue;\n    }\n};\nvar compileBasePayload = function (_a) {\n    var userId = _a.userId, token = _a.token, userChannel = _a.userChannel, version = _a.version, messageName = _a.messageName, vpsToken = _a.vpsToken;\n    if (version < 3) {\n        return {\n            userId: userId,\n            token: token,\n            userChannel: userChannel,\n            messageName: messageName,\n            vpsToken: vpsToken,\n            version: version,\n        };\n    }\n    return {\n        token: token,\n        messageName: messageName,\n        version: version,\n    };\n};\nvar appendHeader = function (uint8Array) {\n    // Добавляем 4 байта в начало с длинной сообщения\n    var arrayBuffer = new ArrayBuffer(4);\n    var dataView = new DataView(arrayBuffer, 0);\n    dataView.setInt32(0, uint8Array.length, true);\n    var newUint8Array = new Uint8Array(4 + uint8Array.length);\n    newUint8Array.set(new Uint8Array(arrayBuffer));\n    newUint8Array.set(uint8Array, 4);\n    return newUint8Array;\n};\nvar removeHeader = function (uint8Array) {\n    // Убираем 4 байта в начале с длинной сообщения\n    var newUint8Array = new Uint8Array(uint8Array).slice(4);\n    return newUint8Array;\n};\nvar createProtocol = function (transport, _a) {\n    var logger = _a.logger, getToken = _a.getToken, getInitialMeta = _a.getInitialMeta, params = __rest(_a, [\"logger\", \"getToken\", \"getInitialMeta\"]);\n    var configuration = __assign(__assign({}, params), { token: '' });\n    var url = configuration.url, userId = configuration.userId, userChannel = configuration.userChannel, locale = configuration.locale, device = configuration.device, settings = configuration.settings, legacyDevice = configuration.legacyDevice, version = configuration.version, messageName = configuration.messageName, vpsToken = configuration.vpsToken;\n    var basePayload = compileBasePayload({ userId: userId, token: '', messageName: messageName, vpsToken: vpsToken, userChannel: userChannel, version: version });\n    var _b = createNanoEvents(), on = _b.on, emit = _b.emit;\n    var subscriptions = [];\n    var messageQueue = [];\n    var initMessageId; // ид инициализационного сообщения, отправим мессаджи в неинициализированный протокол\n    var currentSettings = { device: device, legacyDevice: legacyDevice, settings: settings, locale: locale };\n    var currentMessageId = Date.now();\n    var status = 'closed';\n    var destroyed = false;\n    var clearReadyTimer; // ид таймера установки состояния ready\n    var cancelUpdatingSettingsWhenSocketReady = function () { }; // отменяет обновление настроек VPS при готовности сокета\n    var getMessageId = function () {\n        return currentMessageId++;\n    };\n    var send = function (message) {\n        var createdMessage = protoExports.Message.create(__assign(__assign({}, basePayload), message));\n        logger === null || logger === void 0 ? void 0 : logger({ type: 'outcoming', message: createdMessage });\n        var encodedMessage = protoExports.Message.encode(createdMessage).finish();\n        var encodedMessageWithHeader = appendHeader(encodedMessage);\n        transport.send(encodedMessageWithHeader);\n        emit('outcoming', createdMessage);\n    };\n    var sendMessage = function (message) {\n        // отправляем инициализационные сообщения или все, когда сессия = ready\n        if (status === 'ready' || (typeof initMessageId !== undefined && message.messageId === initMessageId)) {\n            send(message);\n            return;\n        }\n        // накапливаем сообщения, отправим после успешного коннекта\n        messageQueue.push(message);\n        if (status === 'closed' && !destroyed) {\n            transport.open(url);\n        }\n    };\n    var _c = createClientMethods({ getMessageId: getMessageId, sendMessage: sendMessage }), sendDeviceOriginal = _c.sendDevice, sendInitialSettingsOriginal = _c.sendInitialSettings, getHistoryRequestOriginal = _c.getHistoryRequest, sendCancel = _c.sendCancel, sendLegacyDeviceOriginal = _c.sendLegacyDevice, sendMute = _c.sendMute, sendSettingsOriginal = _c.sendSettings, sendText = _c.sendText, sendSystemMessage = _c.sendSystemMessage, sendVoice = _c.sendVoice, batch = _c.batch;\n    var sendDevice = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        currentSettings = __assign(__assign({}, currentSettings), { device: data });\n        return sendDeviceOriginal.apply(void 0, __spreadArray([data], args));\n    });\n    var sendInitialSettings = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (data.device && data.settings) {\n            currentSettings = __assign(__assign({}, currentSettings), { device: data.device, settings: data.settings, locale: data.locale || undefined });\n        }\n        return sendInitialSettingsOriginal.apply(void 0, __spreadArray([data], args));\n    });\n    var getHistoryRequest = function (data) {\n        var _a, _b;\n        if (data === void 0) { data = {}; }\n        return getHistoryRequestOriginal({\n            device: currentSettings.device || null,\n            uuid: {\n                userId: ((_a = data.uuid) === null || _a === void 0 ? void 0 : _a.userId) || userId,\n                userChannel: ((_b = data.uuid) === null || _b === void 0 ? void 0 : _b.userChannel) || userChannel,\n            },\n            history: __assign({}, (data.history || {})),\n        });\n    };\n    var sendLegacyDevice = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        currentSettings = __assign(__assign({}, currentSettings), { legacyDevice: data });\n        return sendLegacyDeviceOriginal.apply(void 0, __spreadArray([data], args));\n    });\n    var updateDefaults = function (obj) {\n        Object.assign(basePayload, obj);\n        Object.assign(configuration, obj);\n    };\n    var updateDevice = function (obj) {\n        var _a, _b;\n        if (obj) {\n            var additionalInfo = obj.additionalInfo, deviceOptions = __rest(obj, [\"additionalInfo\"]);\n            var oldInfo = ((_a = currentSettings.device) === null || _a === void 0 ? void 0 : _a.additionalInfo)\n                ? safeJSONParse((_b = currentSettings.device) === null || _b === void 0 ? void 0 : _b.additionalInfo, {})\n                : {};\n            var newInfo = additionalInfo ? safeJSONParse(additionalInfo, {}) : {};\n            currentSettings.device = __assign(__assign(__assign({}, currentSettings.device), deviceOptions), { additionalInfo: JSON.stringify(__assign(__assign({}, oldInfo), newInfo)) });\n        }\n    };\n    var updateSettings = function (obj) {\n        var isSocketReady = status === 'connected' || status === 'ready';\n        cancelUpdatingSettingsWhenSocketReady();\n        Object.assign(currentSettings.settings, obj);\n        if (!isSocketReady) {\n            cancelUpdatingSettingsWhenSocketReady = on('ready', function () { return updateSettings(obj); });\n            return;\n        }\n        sendSettingsOriginal(obj);\n    };\n    subscriptions.push(transport.on('connecting', function () {\n        status = 'connecting';\n    }));\n    subscriptions.push(transport.on('close', function () {\n        status = 'closed';\n    }));\n    subscriptions.push(transport.on('open', function () { return __awaiter(void 0, void 0, void 0, function () {\n        var _a, _b, _c, _d, e_1, meta, _e;\n        var _f;\n        var _g;\n        return __generator(this, function (_h) {\n            switch (_h.label) {\n                case 0:\n                    _h.trys.push([0, 3, , 4]);\n                    _a = getToken;\n                    if (!_a) return [3 /*break*/, 2];\n                    _c = (_b = Object).assign;\n                    _d = [basePayload];\n                    _f = {};\n                    return [4 /*yield*/, getToken()];\n                case 1:\n                    _a = _c.apply(_b, _d.concat([(_f.token = _h.sent(), _f)]));\n                    _h.label = 2;\n                case 2:\n                    return [3 /*break*/, 4];\n                case 3:\n                    e_1 = _h.sent();\n                    emit('error', {\n                        type: 'GET_TOKEN_ERROR',\n                        message: (_g = e_1) === null || _g === void 0 ? void 0 : _g.message,\n                    });\n                    return [2 /*return*/];\n                case 4:\n                    Object.assign(configuration, { token: basePayload.token });\n                    initMessageId = getMessageId();\n                    if (!(version < 3)) return [3 /*break*/, 5];\n                    if (version === 1 && currentSettings.legacyDevice) {\n                        sendLegacyDevice(currentSettings.legacyDevice, false, initMessageId);\n                    }\n                    else if (version === 2 && currentSettings.device) {\n                        sendDevice(currentSettings.device, false, initMessageId);\n                    }\n                    sendSettingsOriginal(currentSettings.settings, true, initMessageId);\n                    return [3 /*break*/, 9];\n                case 5:\n                    if (!getInitialMeta) return [3 /*break*/, 7];\n                    return [4 /*yield*/, getInitialMeta()];\n                case 6:\n                    _e = (_h.sent());\n                    return [3 /*break*/, 8];\n                case 7:\n                    _e = undefined;\n                    _h.label = 8;\n                case 8:\n                    meta = _e;\n                    sendInitialSettings({\n                        userId: userId,\n                        userChannel: userChannel,\n                        device: currentSettings.device,\n                        settings: currentSettings.settings,\n                        locale: version > 3 ? currentSettings.locale : undefined,\n                    }, true, initMessageId, { meta: meta });\n                    _h.label = 9;\n                case 9:\n                    status = 'connected';\n                    window.clearTimeout(clearReadyTimer);\n                    /// считаем коннект = ready, если по истечении таймаута сокет не был разорван\n                    /// т.к бек может разрывать сокет, если с settings что-то не так\n                    clearReadyTimer = window.setTimeout(function () {\n                        if (status !== 'connected') {\n                            return;\n                        }\n                        while (messageQueue.length > 0) {\n                            var message = messageQueue.shift();\n                            if (message) {\n                                send(message);\n                            }\n                        }\n                        status = 'ready';\n                        emit('ready');\n                    }, 250);\n                    logger === null || logger === void 0 ? void 0 : logger({ type: 'init', params: __assign(__assign({}, configuration), currentSettings) });\n                    return [2 /*return*/];\n            }\n        });\n    }); }));\n    subscriptions.push(transport.on('message', function (message) {\n        var decodedMessage = protoExports.Message.decode(removeHeader(message));\n        logger === null || logger === void 0 ? void 0 : logger({ type: 'incoming', message: decodedMessage });\n        emit('incoming', decodedMessage);\n        if (decodedMessage.status) {\n            transport.close();\n        }\n    }));\n    return {\n        clearQueue: function () {\n            messageQueue.splice(0, messageQueue.length);\n        },\n        destroy: function () {\n            destroyed = true;\n            transport.close();\n            subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) { return unsubscribe(); });\n        },\n        on: on,\n        getHistoryRequest: getHistoryRequest,\n        getMessageId: getMessageId,\n        sendCancel: sendCancel,\n        sendMute: sendMute,\n        sendText: sendText,\n        sendSystemMessage: sendSystemMessage,\n        sendVoice: sendVoice,\n        send: sendMessage,\n        batch: batch,\n        changeConfiguration: updateDefaults,\n        changeDevice: updateDevice,\n        changeSettings: updateSettings,\n        reconnect: function () {\n            if (status !== 'closed') {\n                transport.reconnect(url); // даем время случиться close\n            }\n            else {\n                transport.open(url);\n            }\n        },\n        init: function () {\n            // в отличии от reconnect не обрывает коннект если он в порядке\n            if (status === 'ready' && window.navigator.onLine) {\n                return Promise.resolve();\n            }\n            return new Promise(function (resolve, reject) {\n                var subs = [];\n                subs.push(on('ready', function () {\n                    subs.map(function (sub) { return sub(); });\n                    resolve();\n                }));\n                subs.push(transport.on('error', function () {\n                    subs.map(function (sub) { return sub(); });\n                    reject(new Error('Network error'));\n                }));\n                transport.reconnect(url);\n            });\n        },\n        get currentMessageId() {\n            return currentMessageId;\n        },\n        get configuration() {\n            return configuration;\n        },\n        get status() {\n            return status;\n        },\n    };\n};\n\nexport { MessageNames as M, VpsVersion as V, appendHeader as a, commonjsRequire as b, commonjsGlobal as c, createProtocol as d, getDefaultExportFromCjs as g, protoExports as p, requireMinimal as r };\n"],"mappings":"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EAAE,EAAEsB,CAAC,EAChE,IAAI+L,UAAU,CAAC/F,IAAI,CAAChG,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACgG,IAAI,CAAChG,CAAC,CAAC,CAAC,GAAG+L,UAAU,CAAC/F,IAAI,CAAChG,CAAC,CAAC,CAAC;MACnD;;MAEA;AACT;AACA;AACA;AACA;AACA;MACSyY,MAAM,CAAClb,SAAS,CAAC6b,YAAY,GAAG,EAAE;;MAElC;AACT;AACA;AACA;AACA;AACA;MACSX,MAAM,CAAClb,SAAS,CAAC8b,eAAe,GAAG,EAAE;;MAErC;AACT;AACA;AACA;AACA;AACA;MACSZ,MAAM,CAAClb,SAAS,CAAC+b,OAAO,GAAG,EAAE;;MAE7B;AACT;AACA;AACA;AACA;AACA;MACSb,MAAM,CAAClb,SAAS,CAACgc,cAAc,GAAG,EAAE;;MAEpC;AACT;AACA;AACA;AACA;AACA;MACSd,MAAM,CAAClb,SAAS,CAACic,QAAQ,GAAG,EAAE;;MAE9B;AACT;AACA;AACA;AACA;AACA;MACSf,MAAM,CAAClb,SAAS,CAACkc,YAAY,GAAG,EAAE;;MAElC;AACT;AACA;AACA;AACA;AACA;MACShB,MAAM,CAAClb,SAAS,CAACmc,QAAQ,GAAG,EAAE;;MAE9B;AACT;AACA;AACA;AACA;AACA;MACSjB,MAAM,CAAClb,SAAS,CAACoc,kBAAkB,GAAG,EAAE;;MAExC;AACT;AACA;AACA;AACA;AACA;MACSlB,MAAM,CAAClb,SAAS,CAACqc,WAAW,GAAG,EAAE;;MAEjC;AACT;AACA;AACA;AACA;AACA;MACSnB,MAAM,CAAClb,SAAS,CAACsc,cAAc,GAAG,EAAE;;MAEpC;AACT;AACA;AACA;AACA;AACA;MACSpB,MAAM,CAAClb,SAAS,CAACuc,MAAM,GAAG,EAAE;;MAE5B;AACT;AACA;AACA;AACA;AACA;AACA;AACA;MACSrB,MAAM,CAACrM,MAAM,GAAG,SAASA,MAAMA,CAACL,UAAU,EAAE;QACxC,OAAO,IAAI0M,MAAM,CAAC1M,UAAU,CAAC;MACjC,CAAC;;MAED;AACT;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}